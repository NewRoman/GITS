!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=40)}([function(e,t,n){e.exports=n(49)()},function(e,t,n){"use strict";e.exports=n(41)},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,i,a,u],c=0;(l=new Error(t.replace(/%s/g,function(){return s[c++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){e.exports=n(58)()},function(e,t,n){"use strict";var r=n(30),o=n(65),i=Object.prototype.toString;function a(e){return"[object Array]"===i.call(e)}function u(e){return null!==e&&"object"==typeof e}function l(e){return"[object Function]"===i.call(e)}function s(e,t){if(null!=e)if("object"==typeof e||a(e)||(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:l,isStream:function(e){return u(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:s,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)s(arguments[r],n);return t},extend:function(e,t,n){return s(t,function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){e.exports=n(46)()},function(e,t,n){"use strict";n.r(t);var r=n(1),o=n(7),i=n.n(o),a=i.a.shape({trySubscribe:i.a.func.isRequired,tryUnsubscribe:i.a.func.isRequired,notifyNestedSubs:i.a.func.isRequired,isSubscribed:i.a.func.isRequired}),u=i.a.shape({subscribe:i.a.func.isRequired,dispatch:i.a.func.isRequired,getState:i.a.func.isRequired});function l(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1]||t+"Subscription",o=function(e){function o(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return i[t]=n.store,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(o,e),o.prototype.getChildContext=function(){var e;return(e={})[t]=this[t],e[n]=null,e},o.prototype.render=function(){return r.Children.only(this.props.children)},o}(r.Component);return o.propTypes={store:u.isRequired,children:i.a.element.isRequired},o.childContextTypes=((e={})[t]=u.isRequired,e[n]=a,e),o}var s=l(),c=n(14),f=n.n(c),p=n(3),d=n.n(p);var h=null,y={notify:function(){}};var v=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.store=t,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=y}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){var e,t;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=(e=[],t=[],{clear:function(){t=h,e=h},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&e!==h&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}))},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=y)},e}(),m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var w=0,b={};function E(){}function _(e){var t,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=o.getDisplayName,l=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,s=o.methodName,c=void 0===s?"connectAdvanced":s,p=o.renderCountProp,h=void 0===p?void 0:p,y=o.shouldHandleStateChanges,_=void 0===y||y,T=o.storeKey,g=void 0===T?"store":T,O=o.withRef,S=void 0!==O&&O,C=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),P=g+"Subscription",x=w++,N=((t={})[g]=u,t[P]=a,t),j=((n={})[P]=a,n);return function(t){d()("function"==typeof t,"You must pass a component to the function returned by connect. Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",o=l(n),i=m({},C,{getDisplayName:l,methodName:c,renderCountProp:h,shouldHandleStateChanges:_,storeKey:g,withRef:S,displayName:o,wrappedComponentName:n,WrappedComponent:t}),a=function(n){function a(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,n.call(this,e,t));return r.version=x,r.state={},r.renderCount=0,r.store=e[g]||t[g],r.propsMode=Boolean(e[g]),r.setWrappedInstance=r.setWrappedInstance.bind(r),d()(r.store,'Could not find "'+g+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+g+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,n),a.prototype.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[P]=t||this.context[P],e},a.prototype.componentDidMount=function(){_&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},a.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},a.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},a.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=E,this.store=null,this.selector.run=E,this.selector.shouldComponentUpdate=!1},a.prototype.getWrappedInstance=function(){return d()(S,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+c+"() call."),this.wrappedInstance},a.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},a.prototype.initSelector=function(){var t=e(this.store.dispatch,i);this.selector=function(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}(t,this.store),this.selector.run(this.props)},a.prototype.initSubscription=function(){if(_){var e=(this.propsMode?this.props:this.context)[P];this.subscription=new v(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},a.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(b)):this.notifyNestedSubs()},a.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},a.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},a.prototype.addExtraProps=function(e){if(!(S||h||this.propsMode&&this.subscription))return e;var t=m({},e);return S&&(t.ref=this.setWrappedInstance),h&&(t[h]=this.renderCount++),this.propsMode&&this.subscription&&(t[P]=this.subscription),t},a.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},a}(r.Component);return a.WrappedComponent=t,a.displayName=o,a.childContextTypes=j,a.contextTypes=N,a.propTypes=N,f()(a,t)}}var T=Object.prototype.hasOwnProperty;function g(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function O(e,t){if(g(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!T.call(t,n[o])||!g(e[n[o]],t[n[o]]))return!1;return!0}var S=n(13);n(10);function C(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function P(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function x(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=P(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=P(o),o=r(t,n)),o},r}}var N=[function(e){return"function"==typeof e?x(e):void 0},function(e){return e?void 0:C(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?C(function(t){return Object(S.bindActionCreators)(e,t)}):void 0}];var j=[function(e){return"function"==typeof e?x(e):void 0},function(e){return e?void 0:C(function(){return{}})}],R=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function M(e,t,n){return R({},n,e,t)}var L=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,i=!1,a=void 0;return function(t,n,u){var l=e(t,n,u);return i?r&&o(l,a)||(a=l):(i=!0,a=l),a}}}(e):void 0},function(e){return e?void 0:function(){return M}}];function U(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function A(e,t,n,r,o){var i=o.areStatesEqual,a=o.areOwnPropsEqual,u=o.areStatePropsEqual,l=!1,s=void 0,c=void 0,f=void 0,p=void 0,d=void 0;function h(o,l){var h,y,v=!a(l,c),m=!i(o,s);return s=o,c=l,v&&m?(f=e(s,c),t.dependsOnOwnProps&&(p=t(r,c)),d=n(f,p,c)):v?(e.dependsOnOwnProps&&(f=e(s,c)),t.dependsOnOwnProps&&(p=t(r,c)),d=n(f,p,c)):m?(h=e(s,c),y=!u(h,f),f=h,y&&(d=n(f,p,c)),d):d}return function(o,i){return l?h(o,i):(f=e(s=o,c=i),p=t(r,c),d=n(f,p,c),l=!0,d)}}function D(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),l=o(e,i);return(i.pure?A:U)(a,u,l,e,i)}var I=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function F(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function z(e,t){return e===t}var W=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.connectHOC,n=void 0===t?_:t,r=e.mapStateToPropsFactories,o=void 0===r?j:r,i=e.mapDispatchToPropsFactories,a=void 0===i?N:i,u=e.mergePropsFactories,l=void 0===u?L:u,s=e.selectorFactory,c=void 0===s?D:s;return function(e,t,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},u=i.pure,s=void 0===u||u,f=i.areStatesEqual,p=void 0===f?z:f,d=i.areOwnPropsEqual,h=void 0===d?O:d,y=i.areStatePropsEqual,v=void 0===y?O:y,m=i.areMergedPropsEqual,w=void 0===m?O:m,b=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),E=F(e,o,"mapStateToProps"),_=F(t,a,"mapDispatchToProps"),T=F(r,l,"mergeProps");return n(c,I({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:E,initMapDispatchToProps:_,initMergeProps:T,pure:s,areStatesEqual:p,areOwnPropsEqual:h,areStatePropsEqual:v,areMergedPropsEqual:w},b))}}();n.d(t,"Provider",function(){return s}),n.d(t,"createProvider",function(){return l}),n.d(t,"connectAdvanced",function(){return _}),n.d(t,"connect",function(){return W})},function(e,t,n){"use strict";n.r(t);var r=n(2),o=n.n(r),i=n(1),a=n.n(i),u=n(0),l=n.n(u),s=n(38),c=n.n(s),f=n(4),p=n.n(f),d=n(3),h=n.n(d),y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function v(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var m=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=v(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props.history.location.pathname)},v(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:y({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;h()(null==n||1===a.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){p()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?a.a.Children.only(e):null},t}(a.a.Component);m.propTypes={history:l.a.object.isRequired,children:l.a.node},m.contextTypes={router:l.a.object},m.childContextTypes={router:l.a.object.isRequired};var w=m,b=w;function E(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var _=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=E(this,e.call.apply(e,[this].concat(i))),r.history=c()(r.props),E(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(b,{history:this.history,children:this.props.children})},t}(a.a.Component);_.propTypes={basename:l.a.string,forceRefresh:l.a.bool,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var T=_,g=n(39),O=n.n(g);function S(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var C=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=S(this,e.call.apply(e,[this].concat(i))),r.history=O()(r.props),S(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(b,{history:this.history,children:this.props.children})},t}(a.a.Component);C.propTypes={basename:l.a.string,getUserConfirmation:l.a.func,hashType:l.a.oneOf(["hashbang","noslash","slash"]),children:l.a.node};var P=C,x=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function N(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var j=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},R=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=N(this,e.call.apply(e,[this].concat(i))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!j(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,i=n.to;o?t.replace(i):t.push(i)}},N(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);h()(this.context.router,"You should not use <Link> outside a <Router>");var o=this.context.router.history.createHref("string"==typeof t?{pathname:t}:t);return a.a.createElement("a",x({},r,{onClick:this.handleClick,href:o,ref:n}))},t}(a.a.Component);R.propTypes={onClick:l.a.func,target:l.a.string,replace:l.a.bool,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired,innerRef:l.a.oneOfType([l.a.string,l.a.func])},R.defaultProps={replace:!1},R.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired,createHref:l.a.func.isRequired}).isRequired}).isRequired};var M=R,L=n(22),U=n(23),A=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o},D=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},I=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=D({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=Object(L.default)(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},F=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&Object(U.default)(e.state,t.state)},z=function(){var e=null,t=[];return{setPrompt:function(t){return o()(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,i){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,i):(o()(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),i(!0)):i(!1!==a)}else i(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}},W=("undefined"==typeof window||!window.document||window.document.createElement,"function"==typeof Symbol&&Symbol.iterator,Object.assign,Object.assign,"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e}),$=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},k=function(e,t,n){return Math.min(Math.max(e,t),n)},Y=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,r=void 0===n?["/"]:n,i=e.initialIndex,a=void 0===i?0:i,u=e.keyLength,l=void 0===u?6:u,s=z(),c=function(e){$(v,e),v.length=v.entries.length,s.notifyListeners(v.location,v.action)},f=function(){return Math.random().toString(36).substr(2,l)},p=k(a,0,r.length-1),d=r.map(function(e){return I(e,void 0,"string"==typeof e?f():e.key||f())}),h=A,y=function(e){var n=k(v.index+e,0,v.entries.length-1),r=v.entries[n];s.confirmTransitionTo(r,"POP",t,function(e){e?c({action:"POP",location:r,index:n}):c()})},v={length:d.length,action:"POP",location:d[p],index:p,entries:d,createHref:h,push:function(e,n){o()(!("object"===(void 0===e?"undefined":W(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var r=I(e,n,f(),v.location);s.confirmTransitionTo(r,"PUSH",t,function(e){if(e){var t=v.index+1,n=v.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),c({action:"PUSH",location:r,index:t,entries:n})}})},replace:function(e,n){o()(!("object"===(void 0===e?"undefined":W(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var r=I(e,n,f(),v.location);s.confirmTransitionTo(r,"REPLACE",t,function(e){e&&(v.entries[v.index]=r,c({action:"REPLACE",location:r}))})},go:y,goBack:function(){return y(-1)},goForward:function(){return y(1)},canGo:function(e){var t=v.index+e;return t>=0&&t<v.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return s.setPrompt(e)},listen:function(e){return s.appendListener(e)}};return v};function Q(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var X=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=Q(this,e.call.apply(e,[this].concat(i))),r.history=Y(r.props),Q(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){p()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(w,{history:this.history,children:this.props.children})},t}(a.a.Component);X.propTypes={initialEntries:l.a.array,initialIndex:l.a.number,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var q=X,J=n(15),K=n.n(J),V={},Z=0,G=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];"string"==typeof t&&(t={path:t});var r=t,o=r.path,i=r.exact,a=void 0!==i&&i,u=r.strict,l=void 0!==u&&u,s=r.sensitive;if(null==o)return n;var c=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=V[n]||(V[n]={});if(r[e])return r[e];var o=[],i={re:K()(e,o,t),keys:o};return Z<1e4&&(r[e]=i,Z++),i}(o,{end:a,strict:l,sensitive:void 0!==s&&s}),f=c.re,p=c.keys,d=f.exec(e);if(!d)return null;var h=d[0],y=d.slice(1),v=e===h;return a&&!v?null:{path:o,url:"/"===o&&""===h?"/":h,isExact:v,params:p.reduce(function(e,t,n){return e[t.name]=y[n],e},{})}},B=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function H(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ee=function(e){return 0===a.a.Children.count(e)},te=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=H(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props,r.context.router)},H(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:B({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,i=e.strict,a=e.exact,u=e.sensitive;if(n)return n;h()(t,"You should not use <Route> or withRouter() outside a <Router>");var l=t.route,s=(r||l.location).pathname;return G(s,{path:o,strict:i,exact:a,sensitive:u},l.match)},t.prototype.componentWillMount=function(){p()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),p()(!(this.props.component&&this.props.children&&!ee(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),p()(!(this.props.render&&this.props.children&&!ee(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){p()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),p()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,i=this.context.router,u=i.history,l=i.route,s=i.staticContext,c={match:e,location:this.props.location||l.location,history:u,staticContext:s};return r?e?a.a.createElement(r,c):null:o?e?o(c):null:"function"==typeof n?n(c):n&&!ee(n)?a.a.Children.only(n):null},t}(a.a.Component);te.propTypes={computedMatch:l.a.object,path:l.a.string,exact:l.a.bool,strict:l.a.bool,sensitive:l.a.bool,component:l.a.func,render:l.a.func,children:l.a.oneOfType([l.a.func,l.a.node]),location:l.a.object},te.contextTypes={router:l.a.shape({history:l.a.object.isRequired,route:l.a.object.isRequired,staticContext:l.a.object})},te.childContextTypes={router:l.a.object.isRequired};var ne=te,re=ne,oe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var ae=function(e){var t=e.to,n=e.exact,r=e.strict,o=e.location,i=e.activeClassName,u=e.className,l=e.activeStyle,s=e.style,c=e.isActive,f=e.ariaCurrent,p=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","ariaCurrent"]);return a.a.createElement(re,{path:"object"===(void 0===t?"undefined":ie(t))?t.pathname:t,exact:n,strict:r,location:o,children:function(e){var n=e.location,r=e.match,o=!!(c?c(r,n):r);return a.a.createElement(M,oe({to:t,className:o?[u,i].filter(function(e){return e}).join(" "):u,style:o?oe({},s,l):s,"aria-current":o&&f},p))}})};ae.propTypes={to:M.propTypes.to,exact:l.a.bool,strict:l.a.bool,location:l.a.object,activeClassName:l.a.string,className:l.a.string,activeStyle:l.a.object,style:l.a.object,isActive:l.a.func,ariaCurrent:l.a.oneOf(["page","step","location","true"])},ae.defaultProps={activeClassName:"active",ariaCurrent:"true"};var ue=ae;var le=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){h()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(a.a.Component);le.propTypes={when:l.a.bool,message:l.a.oneOfType([l.a.func,l.a.string]).isRequired},le.defaultProps={when:!0},le.contextTypes={router:l.a.shape({history:l.a.shape({block:l.a.func.isRequired}).isRequired}).isRequired};var se=le,ce={},fe=0,pe=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"/"===e?e:function(e){var t=e,n=ce[t]||(ce[t]={});if(n[e])return n[e];var r=K.a.compile(e);return fe<1e4&&(n[e]=r,fe++),r}(e)(t,{pretty:!0})},de=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var he=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){h()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=I(e.to),n=I(this.props.to);F(t,n)?p()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.computeTo=function(e){var t=e.computedMatch,n=e.to;return t?"string"==typeof n?pe(n,t.params):de({},n,{pathname:pe(n.pathname,t.params)}):n},t.prototype.perform=function(){var e=this.context.router.history,t=this.props.push,n=this.computeTo(this.props);t?e.push(n):e.replace(n)},t.prototype.render=function(){return null},t}(a.a.Component);he.propTypes={computedMatch:l.a.object,push:l.a.bool,from:l.a.string,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired},he.defaultProps={push:!1},he.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired}).isRequired,staticContext:l.a.object}).isRequired};var ye=he,ve=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function me(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var we=function(e){return"/"===e.charAt(0)?e:"/"+e},be=function(e,t){return e?ve({},t,{pathname:we(e)+t.pathname}):t},Ee=function(e,t){if(!e)return t;var n=we(e);return 0!==t.pathname.indexOf(n)?t:ve({},t,{pathname:t.pathname.substr(n.length)})},_e=function(e){return"string"==typeof e?e:A(e)},Te=function(e){return function(){h()(!1,"You cannot %s with <StaticRouter>",e)}},ge=function(){},Oe=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=me(this,e.call.apply(e,[this].concat(i))),r.createHref=function(e){return we(r.props.basename+_e(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=be(n,I(e)),o.url=_e(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=be(n,I(e)),o.url=_e(o.location)},r.handleListen=function(){return ge},r.handleBlock=function(){return ge},me(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){p()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:Ee(t,I(n)),push:this.handlePush,replace:this.handleReplace,go:Te("go"),goBack:Te("goBack"),goForward:Te("goForward"),listen:this.handleListen,block:this.handleBlock};return a.a.createElement(w,ve({},r,{history:o}))},t}(a.a.Component);Oe.propTypes={basename:l.a.string,context:l.a.object.isRequired,location:l.a.oneOfType([l.a.string,l.a.object])},Oe.defaultProps={basename:"",location:"/"},Oe.childContextTypes={router:l.a.object.isRequired};var Se=Oe;var Ce=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){h()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){p()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),p()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,o=void 0;return a.a.Children.forEach(t,function(t){if(null==r&&a.a.isValidElement(t)){var i=t.props,u=i.path,l=i.exact,s=i.strict,c=i.sensitive,f=i.from,p=u||f;o=t,r=G(n.pathname,{path:p,exact:l,strict:s,sensitive:c},e.match)}}),r?a.a.cloneElement(o,{location:n,computedMatch:r}):null},t}(a.a.Component);Ce.contextTypes={router:l.a.shape({route:l.a.object.isRequired}).isRequired},Ce.propTypes={children:l.a.node,location:l.a.object};var Pe=Ce,xe=G,Ne=n(14),je=n.n(Ne),Re=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var Me=function(e){var t=function(t){var n=t.wrappedComponentRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return a.a.createElement(ne,{children:function(t){return a.a.createElement(e,Re({},r,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:l.a.func},je()(t,e)};n.d(t,"BrowserRouter",function(){return T}),n.d(t,"HashRouter",function(){return P}),n.d(t,"Link",function(){return M}),n.d(t,"MemoryRouter",function(){return q}),n.d(t,"NavLink",function(){return ue}),n.d(t,"Prompt",function(){return se}),n.d(t,"Redirect",function(){return ye}),n.d(t,"Route",function(){return re}),n.d(t,"Router",function(){return b}),n.d(t,"StaticRouter",function(){return Se}),n.d(t,"Switch",function(){return Pe}),n.d(t,"matchPath",function(){return xe}),n.d(t,"withRouter",function(){return Me})},function(e,t,n){"use strict";var r=n(37),o="object"==typeof self&&self&&self.Object===Object&&self,i=(r.a||o||Function("return this")()).Symbol,a=Object.prototype,u=a.hasOwnProperty,l=a.toString,s=i?i.toStringTag:void 0;var c=function(e){var t=u.call(e,s),n=e[s];try{e[s]=void 0;var r=!0}catch(e){}var o=l.call(e);return r&&(t?e[s]=n:delete e[s]),o},f=Object.prototype.toString;var p=function(e){return f.call(e)},d="[object Null]",h="[object Undefined]",y=i?i.toStringTag:void 0;var v=function(e){return null==e?void 0===e?h:d:y&&y in Object(e)?c(e):p(e)};var m=function(e,t){return function(n){return e(t(n))}}(Object.getPrototypeOf,Object);var w=function(e){return null!=e&&"object"==typeof e},b="[object Object]",E=Function.prototype,_=Object.prototype,T=E.toString,g=_.hasOwnProperty,O=T.call(Object);t.a=function(e){if(!w(e)||v(e)!=b)return!1;var t=m(e);if(null===t)return!0;var n=g.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&T.call(n)==O}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.resetPassword=t.validateToken=t.resetPasswordRequest=t.confirm=t.signup=t.logout=t.login=t.userLoggedOut=t.userLoggedIn=void 0;var r=i(n(12)),o=i(n(29));function i(e){return e&&e.__esModule?e:{default:e}}var a=t.userLoggedIn=function(e){return{type:r.default.USER_LOGGED_IN,user:e}},u=t.userLoggedOut=function(){return{type:r.default.USER_LOGGED_OUT}};t.login=function(e){return function(t){return o.default.user.login(e).then(function(e){localStorage.setItem("user",JSON.stringify(e)),t(a(e))})}},t.logout=function(){return function(e){localStorage.removeItem("user"),e(u())}},t.signup=function(e){return function(t){return o.default.user.signup(e).then(function(e){localStorage.setItem("user",JSON.stringify(e)),t(a(e))})}},t.confirm=function(e){return function(t){return o.default.user.confirm(e).then(function(e){localStorage.bookwormJWT=e.token,t(a(e))})}},t.resetPasswordRequest=function(e){var t=e.email;return function(){return o.default.user.resetPasswordRequest(t)}},t.validateToken=function(e){return function(){return o.default.user.validateToken(e)}},t.resetPassword=function(e){return function(){return o.default.user.resetPassword(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={MOVIES_FETCHED:"MOVIES_FETCHED",MOVIE_CREATED:"MOVIE_CREATED",CLEAR_ALL_MOVIES:"CLEAR_ALL_MOVIES",USER_LOGGED_IN:"USER_LOGGED_IN",USER_LOGGED_OUT:"USER_LOGGED_OUT"}},function(e,t,n){"use strict";n.r(t);var r=n(10),o=n(24),i={INIT:"@@redux/INIT"};function a(e,t,n){var u;if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(a)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var l=e,s=t,c=[],f=c,p=!1;function d(){f===c&&(f=c.slice())}function h(){return s}function y(e){if("function"!=typeof e)throw new Error("Expected listener to be a function.");var t=!0;return d(),f.push(e),function(){if(t){t=!1,d();var n=f.indexOf(e);f.splice(n,1)}}}function v(e){if(!Object(r.a)(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,s=l(s,e)}finally{p=!1}for(var t=c=f,n=0;n<t.length;n++){(0,t[n])()}return e}return v({type:i.INIT}),(u={dispatch:v,subscribe:y,getState:h,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");l=e,v({type:i.INIT})}})[o.a]=function(){var e,t=y;return(e={subscribe:function(e){if("object"!=typeof e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[o.a]=function(){return this},e},u}function u(e,t){var n=t&&t.type;return"Given action "+(n&&'"'+n.toString()+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function l(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var a=Object.keys(n);var l=void 0;try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:i.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){l=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(l)throw l;for(var r=!1,o={},i=0;i<a.length;i++){var s=a[i],c=n[s],f=e[s],p=c(f,t);if(void 0===p){var d=u(s,t);throw new Error(d)}o[s]=p,r=r||p!==f}return r?o:e}}function s(e,t){return function(){return t(e.apply(void 0,arguments))}}function c(e,t){if("function"==typeof e)return s(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var i=n[o],a=e[i];"function"==typeof a&&(r[i]=s(a,t))}return r}function f(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}var p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function d(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(n,r,o){var i,a=e(n,r,o),u=a.dispatch,l={getState:a.getState,dispatch:function(e){return u(e)}};return i=t.map(function(e){return e(l)}),u=f.apply(void 0,i)(a.dispatch),p({},a,{dispatch:u})}}}n.d(t,"createStore",function(){return a}),n.d(t,"combineReducers",function(){return l}),n.d(t,"bindActionCreators",function(){return c}),n.d(t,"applyMiddleware",function(){return d}),n.d(t,"compose",function(){return f})},function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i=Object.defineProperty,a=Object.getOwnPropertyNames,u=Object.getOwnPropertySymbols,l=Object.getOwnPropertyDescriptor,s=Object.getPrototypeOf,c=s&&s(Object);e.exports=function e(t,n,f){if("string"!=typeof n){if(c){var p=s(n);p&&p!==c&&e(t,p,f)}var d=a(n);u&&(d=d.concat(u(n)));for(var h=0;h<d.length;++h){var y=d[h];if(!(r[y]||o[y]||f&&f[y])){var v=l(n,y);try{i(t,y,v)}catch(e){}}}return t}return t}},function(e,t,n){var r=n(51);e.exports=d,e.exports.parse=i,e.exports.compile=function(e,t){return u(i(e,t))},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,u="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],d=n.index;if(u+=e.slice(a,d),a=d+f.length,p)u+=p[1];else{var h=e[a],y=n[2],v=n[3],m=n[4],w=n[5],b=n[6],E=n[7];u&&(r.push(u),u="");var _=null!=y&&null!=h&&h!==y,T="+"===b||"*"===b,g="?"===b||"*"===b,O=n[2]||c,S=m||w;r.push({name:v||i++,prefix:y||"",delimiter:O,optional:g,repeat:T,partial:_,asterisk:!!E,pattern:S?s(S):E?".*":"[^"+l(O)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function u(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var i="",u=n||{},l=(o||{}).pretty?a:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var f,p=u[c.name];if(null==p){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(p)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=l(p[d]),!t[s].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===d?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(p).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):l(p),!t[s].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');i+=c.prefix+f}}else i+=c}return i}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var s=e[u];if("string"==typeof s)a+=l(s);else{var p=l(s.prefix),d="(?:"+s.pattern+")";t.push(s),s.repeat&&(d+="(?:"+p+d+")*"),a+=d=s.optional?s.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var h=l(n.delimiter||"/"),y=a.slice(-h.length)===h;return o||(a=(y?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&y?"":"(?="+h+"|$)",c(new RegExp("^"+a,f(n)),t)}function d(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(d(e[o],t,n).source);return c(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return p(i(e,n),t,n)}(e,t,n)}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";t.__esModule=!0;t.addLeadingSlash=function(e){return"/"===e.charAt(0)?e:"/"+e},t.stripLeadingSlash=function(e){return"/"===e.charAt(0)?e.substr(1):e};var r=t.hasBasename=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)};t.stripBasename=function(e,t){return r(e,t)?e.substr(t.length):e},t.stripTrailingSlash=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},t.parsePath=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}},t.createPath=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},function(e,t,n){"use strict";(function(t){var r=n(6),o=n(67),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,l={adapter:("undefined"!=typeof XMLHttpRequest?u=n(31):void 0!==t&&(u=n(31)),u),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};l.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){l.headers[e]={}}),r.forEach(["post","put","patch"],function(e){l.headers[e]=r.merge(i)}),e.exports=l}).call(this,n(19))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var l,s=[],c=!1,f=-1;function p(){c&&l&&(c=!1,l.length?s=l.concat(s):f=-1,s.length&&d())}function d(){if(!c){var e=u(p);c=!0;for(var t=s.length;t;){for(l=s,s=[];++f<t;)l&&l[f].run();f=-1,t=s.length}l=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||c||u(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(1),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){var t=e.text;return i.default.createElement("span",{className:"error-text font-weight-bold text-danger"},t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(!("string"==typeof e||e instanceof String))throw new TypeError("This library (validator.js) validates strings only")},e.exports=t.default},function(e,t,n){"use strict";function r(e){return"/"===e.charAt(0)}function o(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}n.r(t),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],i=t&&t.split("/")||[],a=e&&r(e),u=t&&r(t),l=a||u;if(e&&r(e)?i=n:n.length&&(i.pop(),i=i.concat(n)),!i.length)return"/";var s=void 0;if(i.length){var c=i[i.length-1];s="."===c||".."===c||""===c}else s=!1;for(var f=0,p=i.length;p>=0;p--){var d=i[p];"."===d?o(i,p):".."===d?(o(i,p),f++):f&&(o(i,p),f--)}if(!l)for(;f--;f)i.unshift("..");!l||""===i[0]||i[0]&&r(i[0])||i.unshift("");var h=i.join("/");return s&&"/"!==h.substr(-1)&&(h+="/"),h}},function(e,t,n){"use strict";n.r(t);var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var o=void 0===t?"undefined":r(t);if(o!==(void 0===n?"undefined":r(n)))return!1;if("object"===o){var i=t.valueOf(),a=n.valueOf();if(i!==t||a!==n)return e(i,a);var u=Object.keys(t),l=Object.keys(n);return u.length===l.length&&u.every(function(r){return e(t[r],n[r])})}return!1}},function(e,t,n){"use strict";(function(e,r){var o,i=n(36);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(16),n(48)(e))},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,u=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var s in n=Object(arguments[l]))o.call(n,s)&&(u[s]=n[s]);if(r){a=r(n);for(var c=0;c<a.length;c++)i.call(n,a[c])&&(u[a[c]]=n[a[c]])}}return u}},function(e,t,n){"use strict";t.__esModule=!0,t.locationsAreEqual=t.createLocation=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=u(n(22)),i=u(n(23)),a=n(17);function u(e){return e&&e.__esModule?e:{default:e}}t.createLocation=function(e,t,n,i){var u=void 0;"string"==typeof e?(u=(0,a.parsePath)(e)).state=t:(void 0===(u=r({},e)).pathname&&(u.pathname=""),u.search?"?"!==u.search.charAt(0)&&(u.search="?"+u.search):u.search="",u.hash?"#"!==u.hash.charAt(0)&&(u.hash="#"+u.hash):u.hash="",void 0!==t&&void 0===u.state&&(u.state=t));try{u.pathname=decodeURI(u.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+u.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(u.key=n),i?u.pathname?"/"!==u.pathname.charAt(0)&&(u.pathname=(0,o.default)(u.pathname,i.pathname)):u.pathname=i.pathname:u.pathname||(u.pathname="/"),u},t.locationsAreEqual=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,i.default)(e.state,t.state)}},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(2),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=null,t=[];return{setPrompt:function(t){return(0,i.default)(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):((0,i.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}},function(e,t,n){"use strict";t.__esModule=!0;t.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),t.addEventListener=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},t.removeEventListener=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},t.getConfirmation=function(e,t){return t(window.confirm(e))},t.supportsHistory=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},t.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},t.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},t.isExtraneousPopstateEvent=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(63);(r=o)&&r.__esModule;t.default={user:{login:function(e){for(var t=JSON.parse(localStorage.getItem("users")),n=null,r=0;r<t.length;r++)e.email==t[r].email&&e.password==t[r].password&&(n=t[r]);return new Promise(function(e,t){setTimeout(function(){return e(n)},500)})},signup:function(e){var t=e;delete t.repeat_password;var n=JSON.parse(localStorage.getItem("users"));return n.push(t),localStorage.setItem("users",JSON.stringify(n)),new Promise(function(e,n){setTimeout(function(){return e(t)},500)})}},movie:{fetchAll:function(e){for(var t=JSON.parse(localStorage.getItem("movies")),n=[],r=0;r<t.length;r++)t[r].userEmail==e&&(n=t[r].usersMovies);return new Promise(function(e,t){setTimeout(function(){return e(n)},500)})},addMovie:function(e){for(var t=e,n=!1,r=JSON.parse(localStorage.getItem("movies")),o=e.userEmail,i=0;i<r.length;i++)r[i].userEmail==o&&(delete t.userEmail,r[i].usersMovies.push(t),localStorage.setItem("movies",JSON.stringify(r)),n=!n);if(!n){delete t.userEmail;var a={userEmail:o,usersMovies:[t]};r.push(a),localStorage.setItem("movies",JSON.stringify(r))}return new Promise(function(e,n){setTimeout(function(){return e(t)},500)})},clearAllMovies:function(e){for(var t=JSON.parse(localStorage.getItem("movies")),n=0;n<t.length;n++)t[n].userEmail==e&&(t[n].usersMovies.length=0,localStorage.setItem("movies",JSON.stringify(t)));return new Promise(function(e,t){setTimeout(function(){return e([])},500)})}}}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(6),o=n(68),i=n(70),a=n(71),u=n(72),l=n(32),s="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(73);e.exports=function(e){return new Promise(function(t,c){var f=e.data,p=e.headers;r.isFormData(f)&&delete p["Content-Type"];var d=new XMLHttpRequest,h="onreadystatechange",y=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in d||u(e.url)||(d=new window.XDomainRequest,h="onload",y=!0,d.onprogress=function(){},d.ontimeout=function(){}),e.auth){var v=e.auth.username||"",m=e.auth.password||"";p.Authorization="Basic "+s(v+":"+m)}if(d.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d[h]=function(){if(d&&(4===d.readyState||y)&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?a(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:1223===d.status?204:d.status,statusText:1223===d.status?"No Content":d.statusText,headers:n,config:e,request:d};o(t,c,r),d=null}},d.onerror=function(){c(l("Network Error",e,null,d)),d=null},d.ontimeout=function(){c(l("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var w=n(74),b=(e.withCredentials||u(e.url))&&e.xsrfCookieName?w.read(e.xsrfCookieName):void 0;b&&(p[e.xsrfHeaderName]=b)}if("setRequestHeader"in d&&r.forEach(p,function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete p[t]:d.setRequestHeader(t,e)}),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){d&&(d.abort(),c(e),d=null)}),void 0===f&&(f=null),d.send(f)})}},function(e,t,n){"use strict";var r=n(69);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.clearList=t.addNewMovie=t.fetchMovies=void 0;var r=i(n(12)),o=i(n(29));function i(e){return e&&e.__esModule?e:{default:e}}t.fetchMovies=function(e){return function(t){o.default.movie.fetchAll(e).then(function(e){t(function(e){return{type:r.default.MOVIES_FETCHED,movies:e}}(e))})}},t.addNewMovie=function(e){return function(t){return o.default.movie.addMovie(e).then(function(e){return t(function(e){return{type:r.default.MOVIE_CREATED,movie:e}}(e))})}},t.clearList=function(e){return function(t){return o.default.movie.clearAllMovies(e).then(function(e){return t(function(e){return{type:r.default.CLEAR_ALL_MOVIES,movie:e}}(e))})}}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(16))},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=f(n(2)),a=f(n(3)),u=n(26),l=n(17),s=f(n(27)),c=n(28);function f(e){return e&&e.__esModule?e:{default:e}}var p=function(){try{return window.history.state||{}}catch(e){return{}}};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,a.default)(c.canUseDOM,"Browser history needs a DOM");var t=window.history,n=(0,c.supportsHistory)(),f=!(0,c.supportsPopStateOnHashChange)(),d=e.forceRefresh,h=void 0!==d&&d,y=e.getUserConfirmation,v=void 0===y?c.getConfirmation:y,m=e.keyLength,w=void 0===m?6:m,b=e.basename?(0,l.stripTrailingSlash)((0,l.addLeadingSlash)(e.basename)):"",E=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return(0,i.default)(!b||(0,l.hasBasename)(a,b),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+b+'".'),b&&(a=(0,l.stripBasename)(a,b)),(0,u.createLocation)(a,r,n)},_=function(){return Math.random().toString(36).substr(2,w)},T=(0,s.default)(),g=function(e){o(D,e),D.length=t.length,T.notifyListeners(D.location,D.action)},O=function(e){(0,c.isExtraneousPopstateEvent)(e)||P(E(e.state))},S=function(){P(E(p()))},C=!1,P=function(e){C?(C=!1,g()):T.confirmTransitionTo(e,"POP",v,function(t){t?g({action:"POP",location:e}):x(e)})},x=function(e){var t=D.location,n=j.indexOf(t.key);-1===n&&(n=0);var r=j.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(C=!0,M(o))},N=E(p()),j=[N.key],R=function(e){return b+(0,l.createPath)(e)},M=function(e){t.go(e)},L=0,U=function(e){1===(L+=e)?((0,c.addEventListener)(window,"popstate",O),f&&(0,c.addEventListener)(window,"hashchange",S)):0===L&&((0,c.removeEventListener)(window,"popstate",O),f&&(0,c.removeEventListener)(window,"hashchange",S))},A=!1,D={length:t.length,action:"POP",location:N,createHref:R,push:function(e,o){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,u.createLocation)(e,o,_(),D.location);T.confirmTransitionTo(a,"PUSH",v,function(e){if(e){var r=R(a),o=a.key,u=a.state;if(n)if(t.pushState({key:o,state:u},null,r),h)window.location.href=r;else{var l=j.indexOf(D.location.key),s=j.slice(0,-1===l?0:l+1);s.push(a.key),j=s,g({action:"PUSH",location:a})}else(0,i.default)(void 0===u,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,o){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,u.createLocation)(e,o,_(),D.location);T.confirmTransitionTo(a,"REPLACE",v,function(e){if(e){var r=R(a),o=a.key,u=a.state;if(n)if(t.replaceState({key:o,state:u},null,r),h)window.location.replace(r);else{var l=j.indexOf(D.location.key);-1!==l&&(j[l]=a.key),g({action:"REPLACE",location:a})}else(0,i.default)(void 0===u,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:M,goBack:function(){return M(-1)},goForward:function(){return M(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=T.setPrompt(e);return A||(U(1),A=!0),function(){return A&&(A=!1,U(-1)),t()}},listen:function(e){var t=T.appendListener(e);return U(1),function(){U(-1),t()}}};return D}},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=c(n(2)),i=c(n(3)),a=n(26),u=n(17),l=c(n(27)),s=n(28);function c(e){return e&&e.__esModule?e:{default:e}}var f={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+(0,u.stripLeadingSlash)(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:u.stripLeadingSlash,decodePath:u.addLeadingSlash},slash:{encodePath:u.addLeadingSlash,decodePath:u.addLeadingSlash}},p=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},d=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,i.default)(s.canUseDOM,"Hash history needs a DOM");var t=window.history,n=(0,s.supportsGoWithoutReloadUsingHash)(),c=e.getUserConfirmation,h=void 0===c?s.getConfirmation:c,y=e.hashType,v=void 0===y?"slash":y,m=e.basename?(0,u.stripTrailingSlash)((0,u.addLeadingSlash)(e.basename)):"",w=f[v],b=w.encodePath,E=w.decodePath,_=function(){var e=E(p());return(0,o.default)(!m||(0,u.hasBasename)(e,m),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+m+'".'),m&&(e=(0,u.stripBasename)(e,m)),(0,a.createLocation)(e)},T=(0,l.default)(),g=function(e){r(I,e),I.length=t.length,T.notifyListeners(I.location,I.action)},O=!1,S=null,C=function(){var e=p(),t=b(e);if(e!==t)d(t);else{var n=_(),r=I.location;if(!O&&(0,a.locationsAreEqual)(r,n))return;if(S===(0,u.createPath)(n))return;S=null,P(n)}},P=function(e){O?(O=!1,g()):T.confirmTransitionTo(e,"POP",h,function(t){t?g({action:"POP",location:e}):x(e)})},x=function(e){var t=I.location,n=M.lastIndexOf((0,u.createPath)(t));-1===n&&(n=0);var r=M.lastIndexOf((0,u.createPath)(e));-1===r&&(r=0);var o=n-r;o&&(O=!0,L(o))},N=p(),j=b(N);N!==j&&d(j);var R=_(),M=[(0,u.createPath)(R)],L=function(e){(0,o.default)(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},U=0,A=function(e){1===(U+=e)?(0,s.addEventListener)(window,"hashchange",C):0===U&&(0,s.removeEventListener)(window,"hashchange",C)},D=!1,I={length:t.length,action:"POP",location:R,createHref:function(e){return"#"+b(m+(0,u.createPath)(e))},push:function(e,t){(0,o.default)(void 0===t,"Hash history cannot push state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,I.location);T.confirmTransitionTo(n,"PUSH",h,function(e){if(e){var t=(0,u.createPath)(n),r=b(m+t);if(p()!==r){S=t,function(e){window.location.hash=e}(r);var i=M.lastIndexOf((0,u.createPath)(I.location)),a=M.slice(0,-1===i?0:i+1);a.push(t),M=a,g({action:"PUSH",location:n})}else(0,o.default)(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),g()}})},replace:function(e,t){(0,o.default)(void 0===t,"Hash history cannot replace state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,I.location);T.confirmTransitionTo(n,"REPLACE",h,function(e){if(e){var t=(0,u.createPath)(n),r=b(m+t);p()!==r&&(S=t,d(r));var o=M.indexOf((0,u.createPath)(I.location));-1!==o&&(M[o]=t),g({action:"REPLACE",location:n})}})},go:L,goBack:function(){return L(-1)},goForward:function(){return L(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=T.setPrompt(e);return D||(A(1),D=!0),function(){return D&&(D=!1,A(-1)),t()}},listen:function(e){var t=T.appendListener(e);return A(1),function(){A(-1),t()}}};return I}},function(e,t,n){"use strict";var r=c(n(1)),o=c(n(42)),i=n(8),a=n(9),u=c(n(52)),l=c(n(57)),s=n(11);function c(e){return e&&e.__esModule?e:{default:e}}n(99);var f=(0,u.default)();if(localStorage.getItem("users")||localStorage.setItem("users",JSON.stringify([])),localStorage.getItem("movies")||localStorage.setItem("movies",JSON.stringify([])),localStorage.getItem("user")){var p=JSON.parse(localStorage.getItem("user"));f.dispatch((0,s.userLoggedIn)(p))}o.default.render(r.default.createElement(a.BrowserRouter,null,r.default.createElement(i.Provider,{store:f},r.default.createElement(a.Route,{component:l.default}))),document.getElementById("root"))},function(e,t,n){"use strict";
/** @license React v16.7.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(25),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,s=o?Symbol.for("react.profiler"):60114,c=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.concurrent_mode"):60111,d=o?Symbol.for("react.forward_ref"):60112,h=o?Symbol.for("react.suspense"):60113,y=o?Symbol.for("react.memo"):60115,v=o?Symbol.for("react.lazy"):60116,m="function"==typeof Symbol&&Symbol.iterator;function w(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],s=0;(e=Error(t.replace(/%s/g,function(){return l[s++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function _(e,t,n){this.props=e,this.context=t,this.refs=E,this.updater=n||b}function T(){}function g(e,t,n){this.props=e,this.context=t,this.refs=E,this.updater=n||b}_.prototype.isReactComponent={},_.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&w("85"),this.updater.enqueueSetState(this,e,t,"setState")},_.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},T.prototype=_.prototype;var O=g.prototype=new T;O.constructor=g,r(O,_.prototype),O.isPureReactComponent=!0;var S={current:null,currentDispatcher:null},C=Object.prototype.hasOwnProperty,P={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,n){var r=void 0,o={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)C.call(t,r)&&!P.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:S.current}}function N(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var j=/\/+/g,R=[];function M(e,t,n,r){if(R.length){var o=R.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function L(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>R.length&&R.push(e)}function U(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case i:case a:l=!0}}if(l)return r(o,t,""===n?"."+A(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var c=n+A(u=t[s],s);l+=e(u,c,r,o)}else if(c=null===t||"object"!=typeof t?null:"function"==typeof(c=m&&t[m]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),s=0;!(u=t.next()).done;)l+=e(u=u.value,c=n+A(u,s++),r,o);else"object"===u&&w("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function I(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,function(e){return e}):null!=e&&(N(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(j,"$&/")+"/")+n)),r.push(e))}function F(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(j,"$&/")+"/"),U(e,I,t=M(t,i,r,o)),L(t)}var z={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;U(e,D,t=M(null,null,t,n)),L(t)},count:function(e){return U(e,function(){return null},null)},toArray:function(e){var t=[];return F(e,t,null,function(e){return e}),t},only:function(e){return N(e)||w("143"),e}},createRef:function(){return{current:null}},Component:_,PureComponent:g,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:y,type:e,compare:void 0===t?null:t}},Fragment:u,StrictMode:l,Suspense:h,createElement:x,cloneElement:function(e,t,n){null==e&&w("267",e);var o=void 0,a=r({},e.props),u=e.key,l=e.ref,s=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,s=S.current),void 0!==t.key&&(u=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)C.call(t,o)&&!P.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){c=Array(o);for(var f=0;f<o;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:i,type:e.type,key:u,ref:l,props:a,_owner:s}},createFactory:function(e){var t=x.bind(null,e);return t.type=e,t},isValidElement:N,version:"16.7.0",unstable_ConcurrentMode:p,unstable_Profiler:s,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:S,assign:r}},W={default:z},$=W&&z||W;e.exports=$.default||$},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(43)},function(e,t,n){"use strict";
/** @license React v16.7.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(1),o=n(25),i=n(44);function a(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],s=0;(e=Error(t.replace(/%s/g,function(){return l[s++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||a("227");var u=!1,l=null,s=!1,c=null,f={onError:function(e){u=!0,l=e}};function p(e,t,n,r,o,i,a,s,c){u=!1,l=null,function(e,t,n,r,o,i,a,u,l){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}.apply(f,arguments)}var d=null,h={};function y(){if(d)for(var e in h){var t=h[e],n=d.indexOf(e);if(-1<n||a("96",e),!m[n])for(var r in t.extractEvents||a("97",e),m[n]=t,n=t.eventTypes){var o=void 0,i=n[r],u=t,l=r;w.hasOwnProperty(l)&&a("99",l),w[l]=i;var s=i.phasedRegistrationNames;if(s){for(o in s)s.hasOwnProperty(o)&&v(s[o],u,l);o=!0}else i.registrationName?(v(i.registrationName,u,l),o=!0):o=!1;o||a("98",r,e)}}}function v(e,t,n){b[e]&&a("100",e),b[e]=t,E[e]=t.eventTypes[n].dependencies}var m=[],w={},b={},E={},_=null,T=null,g=null;function O(e,t,n){var r=e.type||"unknown-event";e.currentTarget=g(n),function(e,t,n,r,o,i,f,d,h){if(p.apply(this,arguments),u){if(u){var y=l;u=!1,l=null}else a("198"),y=void 0;s||(s=!0,c=y)}}(r,t,void 0,e),e.currentTarget=null}function S(e,t){return null==t&&a("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function C(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var P=null;function x(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)O(e,t[r],n[r]);else t&&O(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var N={injectEventPluginOrder:function(e){d&&a("101"),d=Array.prototype.slice.call(e),y()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&a("102",t),h[t]=r,n=!0)}n&&y()}};function j(e,t){var n=e.stateNode;if(!n)return null;var r=_(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&a("231",t,typeof n),n)}function R(e){if(null!==e&&(P=S(P,e)),e=P,P=null,e&&(C(e,x),P&&a("95"),s))throw e=c,s=!1,c=null,e}var M=Math.random().toString(36).slice(2),L="__reactInternalInstance$"+M,U="__reactEventHandlers$"+M;function A(e){if(e[L])return e[L];for(;!e[L];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[L]).tag||6===e.tag?e:null}function D(e){return!(e=e[L])||5!==e.tag&&6!==e.tag?null:e}function I(e){if(5===e.tag||6===e.tag)return e.stateNode;a("33")}function F(e){return e[U]||null}function z(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function W(e,t,n){(t=j(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function $(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=z(t);for(t=n.length;0<t--;)W(n[t],"captured",e);for(t=0;t<n.length;t++)W(n[t],"bubbled",e)}}function k(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=j(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function Y(e){e&&e.dispatchConfig.registrationName&&k(e._targetInst,null,e)}function Q(e){C(e,$)}var X=!("undefined"==typeof window||!window.document||!window.document.createElement);function q(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var J={animationend:q("Animation","AnimationEnd"),animationiteration:q("Animation","AnimationIteration"),animationstart:q("Animation","AnimationStart"),transitionend:q("Transition","TransitionEnd")},K={},V={};function Z(e){if(K[e])return K[e];if(!J[e])return e;var t,n=J[e];for(t in n)if(n.hasOwnProperty(t)&&t in V)return K[e]=n[t];return e}X&&(V=document.createElement("div").style,"AnimationEvent"in window||(delete J.animationend.animation,delete J.animationiteration.animation,delete J.animationstart.animation),"TransitionEvent"in window||delete J.transitionend.transition);var G=Z("animationend"),B=Z("animationiteration"),H=Z("animationstart"),ee=Z("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,oe=null;function ie(){if(oe)return oe;var e,t,n=re,r=n.length,o="value"in ne?ne.value:ne.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return oe=o.slice(e,1<t?1-t:void 0)}function ae(){return!0}function ue(){return!1}function le(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ae:ue,this.isPropagationStopped=ue,this}function se(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function ce(e){e instanceof this||a("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=se,e.release=ce}o(le.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ae)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ae)},persist:function(){this.isPersistent=ae},isPersistent:ue,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=ue,this._dispatchInstances=this._dispatchListeners=null}}),le.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},le.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(le);var pe=le.extend({data:null}),de=le.extend({data:null}),he=[9,13,27,32],ye=X&&"CompositionEvent"in window,ve=null;X&&"documentMode"in document&&(ve=document.documentMode);var me=X&&"TextEvent"in window&&!ve,we=X&&(!ye||ve&&8<ve&&11>=ve),be=String.fromCharCode(32),Ee={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},_e=!1;function Te(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ge(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Oe=!1;var Se={eventTypes:Ee,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ye)e:{switch(e){case"compositionstart":o=Ee.compositionStart;break e;case"compositionend":o=Ee.compositionEnd;break e;case"compositionupdate":o=Ee.compositionUpdate;break e}o=void 0}else Oe?Te(e,n)&&(o=Ee.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=Ee.compositionStart);return o?(we&&"ko"!==n.locale&&(Oe||o!==Ee.compositionStart?o===Ee.compositionEnd&&Oe&&(i=ie()):(re="value"in(ne=r)?ne.value:ne.textContent,Oe=!0)),o=pe.getPooled(o,t,n,r),i?o.data=i:null!==(i=ge(n))&&(o.data=i),Q(o),i=o):i=null,(e=me?function(e,t){switch(e){case"compositionend":return ge(t);case"keypress":return 32!==t.which?null:(_e=!0,be);case"textInput":return(e=t.data)===be&&_e?null:e;default:return null}}(e,n):function(e,t){if(Oe)return"compositionend"===e||!ye&&Te(e,t)?(e=ie(),oe=re=ne=null,Oe=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return we&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=de.getPooled(Ee.beforeInput,t,n,r)).data=e,Q(t)):t=null,null===i?t:null===t?i:[i,t]}},Ce=null,Pe=null,xe=null;function Ne(e){if(e=T(e)){"function"!=typeof Ce&&a("280");var t=_(e.stateNode);Ce(e.stateNode,e.type,t)}}function je(e){Pe?xe?xe.push(e):xe=[e]:Pe=e}function Re(){if(Pe){var e=Pe,t=xe;if(xe=Pe=null,Ne(e),t)for(e=0;e<t.length;e++)Ne(t[e])}}function Me(e,t){return e(t)}function Le(e,t,n){return e(t,n)}function Ue(){}var Ae=!1;function De(e,t){if(Ae)return e(t);Ae=!0;try{return Me(e,t)}finally{Ae=!1,(null!==Pe||null!==xe)&&(Ue(),Re())}}var Ie={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Fe(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ie[e.type]:"textarea"===t}function ze(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function We(e){if(!X)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function $e(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ke(e){e._valueTracker||(e._valueTracker=function(e){var t=$e(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Ye(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=$e(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Qe=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Xe=/^(.*)[\\\/]/,qe="function"==typeof Symbol&&Symbol.for,Je=qe?Symbol.for("react.element"):60103,Ke=qe?Symbol.for("react.portal"):60106,Ve=qe?Symbol.for("react.fragment"):60107,Ze=qe?Symbol.for("react.strict_mode"):60108,Ge=qe?Symbol.for("react.profiler"):60114,Be=qe?Symbol.for("react.provider"):60109,He=qe?Symbol.for("react.context"):60110,et=qe?Symbol.for("react.concurrent_mode"):60111,tt=qe?Symbol.for("react.forward_ref"):60112,nt=qe?Symbol.for("react.suspense"):60113,rt=qe?Symbol.for("react.memo"):60115,ot=qe?Symbol.for("react.lazy"):60116,it="function"==typeof Symbol&&Symbol.iterator;function at(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=it&&e[it]||e["@@iterator"])?e:null}function ut(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case Ve:return"Fragment";case Ke:return"Portal";case Ge:return"Profiler";case Ze:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case He:return"Context.Consumer";case Be:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return ut(e.type);case ot:if(e=1===e._status?e._result:null)return ut(e)}return null}function lt(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=ut(e.type);n=null,r&&(n=ut(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(Xe,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var st=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ct=Object.prototype.hasOwnProperty,ft={},pt={};function dt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new dt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new dt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new dt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ht[e]=new dt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new dt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new dt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){ht[e]=new dt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new dt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){ht[e]=new dt(e,5,!1,e.toLowerCase(),null)});var yt=/[\-:]([a-z])/g;function vt(e){return e[1].toUpperCase()}function mt(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!ct.call(pt,e)||!ct.call(ft,e)&&(st.test(e)?pt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function wt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function bt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Et(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=wt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function _t(e,t){null!=(t=t.checked)&&mt(e,"checked",t,!1)}function Tt(e,t){_t(e,t);var n=wt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ot(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ot(e,t.type,wt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function gt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ot(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(yt,vt);ht[t]=new dt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(yt,vt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(yt,vt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),ht.tabIndex=new dt("tabIndex",1,!1,"tabindex",null);var St={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Ct(e,t,n){return(e=le.getPooled(St.change,e,t,n)).type="change",je(n),Q(e),e}var Pt=null,xt=null;function Nt(e){R(e)}function jt(e){if(Ye(I(e)))return e}function Rt(e,t){if("change"===e)return t}var Mt=!1;function Lt(){Pt&&(Pt.detachEvent("onpropertychange",Ut),xt=Pt=null)}function Ut(e){"value"===e.propertyName&&jt(xt)&&De(Nt,e=Ct(xt,e,ze(e)))}function At(e,t,n){"focus"===e?(Lt(),xt=n,(Pt=t).attachEvent("onpropertychange",Ut)):"blur"===e&&Lt()}function Dt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return jt(xt)}function It(e,t){if("click"===e)return jt(t)}function Ft(e,t){if("input"===e||"change"===e)return jt(t)}X&&(Mt=We("input")&&(!document.documentMode||9<document.documentMode));var zt={eventTypes:St,_isInputEventSupported:Mt,extractEvents:function(e,t,n,r){var o=t?I(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=Rt:Fe(o)?Mt?i=Ft:(i=Dt,a=At):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=It),i&&(i=i(e,t)))return Ct(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Ot(o,"number",o.value)}},Wt=le.extend({view:null,detail:null}),$t={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=$t[e])&&!!t[e]}function Yt(){return kt}var Qt=0,Xt=0,qt=!1,Jt=!1,Kt=Wt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Yt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Qt;return Qt=e.screenX,qt?"mousemove"===e.type?e.screenX-t:0:(qt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Xt;return Xt=e.screenY,Jt?"mousemove"===e.type?e.screenY-t:0:(Jt=!0,0)}}),Vt=Kt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Zt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Gt={eventTypes:Zt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?A(t):null):i=null,i===t)return null;var a=void 0,u=void 0,l=void 0,s=void 0;"mouseout"===e||"mouseover"===e?(a=Kt,u=Zt.mouseLeave,l=Zt.mouseEnter,s="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Vt,u=Zt.pointerLeave,l=Zt.pointerEnter,s="pointer");var c=null==i?o:I(i);if(o=null==t?o:I(t),(e=a.getPooled(u,i,n,r)).type=s+"leave",e.target=c,e.relatedTarget=o,(n=a.getPooled(l,t,n,r)).type=s+"enter",n.target=o,n.relatedTarget=c,r=t,i&&r)e:{for(o=r,s=0,a=t=i;a;a=z(a))s++;for(a=0,l=o;l;l=z(l))a++;for(;0<s-a;)t=z(t),s--;for(;0<a-s;)o=z(o),a--;for(;s--;){if(t===o||t===o.alternate)break e;t=z(t),o=z(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(s=i.alternate)||s!==o);)t.push(i),i=z(i);for(i=[];r&&r!==o&&(null===(s=r.alternate)||s!==o);)i.push(r),r=z(r);for(r=0;r<t.length;r++)k(t[r],"bubbled",e);for(r=i.length;0<r--;)k(i[r],"captured",n);return[e,n]}},Bt=Object.prototype.hasOwnProperty;function Ht(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function en(e,t){if(Ht(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Bt.call(t,n[r])||!Ht(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&a("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&a("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var u=o.child;u;){if(u===n)return nn(o),e;if(u===r)return nn(o),t;u=u.sibling}a("188")}if(n.return!==r.return)n=o,r=i;else{u=!1;for(var l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}u||a("189")}}n.alternate!==r&&a("190")}return 3!==n.tag&&a("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=le.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=le.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),un=Wt.extend({relatedTarget:null});function ln(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=Wt.extend({key:function(e){if(e.key){var t=sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=ln(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Yt,charCode:function(e){return"keypress"===e.type?ln(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?ln(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),pn=Kt.extend({dataTransfer:null}),dn=Wt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Yt}),hn=le.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),yn=Kt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),vn=[["abort","abort"],[G,"animationEnd"],[B,"animationIteration"],[H,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],mn={},wn={};function bn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},mn[e]=t,wn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){bn(e,!0)}),vn.forEach(function(e){bn(e,!1)});var En={eventTypes:mn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=wn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=wn[e];if(!o)return null;switch(e){case"keypress":if(0===ln(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=un;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Kt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=dn;break;case G:case B:case H:e=on;break;case ee:e=hn;break;case"scroll":e=Wt;break;case"wheel":e=yn;break;case"copy":case"cut":case"paste":e=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Vt;break;default:e=le}return Q(t=e.getPooled(o,t,n,r)),t}},_n=En.isInteractiveTopLevelEventType,Tn=[];function gn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=A(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=ze(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=null,u=0;u<m.length;u++){var l=m[u];l&&(l=l.extractEvents(r,t,i,o))&&(a=S(a,l))}R(a)}}var On=!0;function Sn(e,t){if(!t)return null;var n=(_n(e)?Pn:xn).bind(null,e);t.addEventListener(e,n,!1)}function Cn(e,t){if(!t)return null;var n=(_n(e)?Pn:xn).bind(null,e);t.addEventListener(e,n,!0)}function Pn(e,t){Le(xn,e,t)}function xn(e,t){if(On){var n=ze(t);if(null===(n=A(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),Tn.length){var r=Tn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{De(gn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Tn.length&&Tn.push(e)}}}var Nn={},jn=0,Rn="_reactListenersID"+(""+Math.random()).slice(2);function Mn(e){return Object.prototype.hasOwnProperty.call(e,Rn)||(e[Rn]=jn++,Nn[e[Rn]]={}),Nn[e[Rn]]}function Ln(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Un(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function An(e,t){var n,r=Un(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Un(r)}}function Dn(){for(var e=window,t=Ln();t instanceof e.HTMLIFrameElement;){try{e=t.contentDocument.defaultView}catch(e){break}t=Ln(e.document)}return t}function In(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Fn=X&&"documentMode"in document&&11>=document.documentMode,zn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Wn=null,$n=null,kn=null,Yn=!1;function Qn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Yn||null==Wn||Wn!==Ln(n)?null:("selectionStart"in(n=Wn)&&In(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},kn&&en(kn,n)?null:(kn=n,(e=le.getPooled(zn.select,$n,e,t)).type="select",e.target=Wn,Q(e),e))}var Xn={eventTypes:zn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Mn(i),o=E.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?I(t):window,e){case"focus":(Fe(i)||"true"===i.contentEditable)&&(Wn=i,$n=t,kn=null);break;case"blur":kn=$n=Wn=null;break;case"mousedown":Yn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Yn=!1,Qn(n,r);case"selectionchange":if(Fn)break;case"keydown":case"keyup":return Qn(n,r)}return null}};function qn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Jn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+wt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Kn(e,t){return null!=t.dangerouslySetInnerHTML&&a("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Vn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&a("92"),Array.isArray(t)&&(1>=t.length||a("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:wt(n)}}function Zn(e,t){var n=wt(t.value),r=wt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Gn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}N.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),_=F,T=D,g=I,N.injectEventPluginsByName({SimpleEventPlugin:En,EnterLeaveEventPlugin:Gt,ChangeEventPlugin:zt,SelectEventPlugin:Xn,BeforeInputEventPlugin:Se});var Bn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Hn(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function er(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Hn(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var tr,nr=void 0,rr=(tr=function(e,t){if(e.namespaceURI!==Bn.svg||"innerHTML"in e)e.innerHTML=t;else{for((nr=nr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=nr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return tr(e,t)})}:tr);function or(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ir={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ar=["Webkit","ms","Moz","O"];function ur(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ir.hasOwnProperty(e)&&ir[e]?(""+t).trim():t+"px"}function lr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=ur(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ir).forEach(function(e){ar.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ir[t]=ir[e]})});var sr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function cr(e,t){t&&(sr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&a("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&a("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||a("61")),null!=t.style&&"object"!=typeof t.style&&a("62",""))}function fr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function pr(e,t){var n=Mn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=E[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Cn("scroll",e);break;case"focus":case"blur":Cn("focus",e),Cn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":We(o)&&Cn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(o)&&Sn(o,e)}n[o]=!0}}}function dr(){}var hr=null,yr=null;function vr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function mr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var wr="function"==typeof setTimeout?setTimeout:void 0,br="function"==typeof clearTimeout?clearTimeout:void 0;function Er(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function _r(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var Tr=[],gr=-1;function Or(e){0>gr||(e.current=Tr[gr],Tr[gr]=null,gr--)}function Sr(e,t){Tr[++gr]=e.current,e.current=t}var Cr={},Pr={current:Cr},xr={current:!1},Nr=Cr;function jr(e,t){var n=e.type.contextTypes;if(!n)return Cr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Rr(e){return null!=(e=e.childContextTypes)}function Mr(e){Or(xr),Or(Pr)}function Lr(e){Or(xr),Or(Pr)}function Ur(e,t,n){Pr.current!==Cr&&a("168"),Sr(Pr,t),Sr(xr,n)}function Ar(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in e||a("108",ut(t)||"Unknown",i);return o({},n,r)}function Dr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Cr,Nr=Pr.current,Sr(Pr,t),Sr(xr,xr.current),!0}function Ir(e,t,n){var r=e.stateNode;r||a("169"),n?(t=Ar(e,t,Nr),r.__reactInternalMemoizedMergedChildContext=t,Or(xr),Or(Pr),Sr(Pr,t)):Or(xr),Sr(xr,n)}var Fr=null,zr=null;function Wr(e){return function(t){try{return e(t)}catch(e){}}}function $r(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.firstContextDependency=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function kr(e,t,n,r){return new $r(e,t,n,r)}function Yr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Qr(e,t){var n=e.alternate;return null===n?((n=kr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.firstContextDependency=e.firstContextDependency,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Xr(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)Yr(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case Ve:return qr(n.children,o,i,t);case et:return Jr(n,3|o,i,t);case Ze:return Jr(n,2|o,i,t);case Ge:return(e=kr(12,n,t,4|o)).elementType=Ge,e.type=Ge,e.expirationTime=i,e;case nt:return(e=kr(13,n,t,o)).elementType=nt,e.type=nt,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Be:u=10;break e;case He:u=9;break e;case tt:u=11;break e;case rt:u=14;break e;case ot:u=16,r=null;break e}a("130",null==e?e:typeof e,"")}return(t=kr(u,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function qr(e,t,n,r){return(e=kr(7,e,r,t)).expirationTime=n,e}function Jr(e,t,n,r){return e=kr(8,e,r,t),t=0==(1&t)?Ze:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function Kr(e,t,n){return(e=kr(6,e,null,t)).expirationTime=n,e}function Vr(e,t,n){return(t=kr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),Hr(t,e)}function Gr(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),Hr(t,e)}function Br(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function Hr(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,i=t.latestPingedTime;0===(o=0!==o?o:i)&&(0===e||r<e)&&(o=r),0!==(e=o)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}var eo=!1;function to(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function no(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function ro(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function oo(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function io(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=to(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=to(e.memoizedState),o=n.updateQueue=to(n.memoizedState)):r=e.updateQueue=no(o):null===o&&(o=n.updateQueue=no(r));null===o||r===o?oo(r,t):null===r.lastUpdate||null===o.lastUpdate?(oo(r,t),oo(o,t)):(oo(r,t),o.lastUpdate=t)}function ao(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=to(e.memoizedState):uo(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function uo(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=no(t)),t}function lo(e,t,n,r,i,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case 3:e.effectTag=-2049&e.effectTag|64;case 0:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case 2:eo=!0}return r}function so(e,t,n,r,o){eo=!1;for(var i=(t=uo(e,t)).baseState,a=null,u=0,l=t.firstUpdate,s=i;null!==l;){var c=l.expirationTime;c<o?(null===a&&(a=l,i=s),u<c&&(u=c)):(s=lo(e,0,l,s,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(c=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<o?(null===c&&(c=l,null===a&&(i=s)),u<f&&(u=f)):(s=lo(e,0,l,s,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===c&&(i=s),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=c,e.expirationTime=u,e.memoizedState=s}function co(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),fo(t.firstEffect,n),t.firstEffect=t.lastEffect=null,fo(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function fo(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&a("191",n),n.call(r)}e=e.nextEffect}}function po(e,t){return{value:e,source:t,stack:lt(t)}}var ho={current:null},yo=null,vo=null,mo=null;function wo(e,t){var n=e.type._context;Sr(ho,n._currentValue),n._currentValue=t}function bo(e){var t=ho.current;Or(ho),e.type._context._currentValue=t}function Eo(e){yo=e,mo=vo=null,e.firstContextDependency=null}function _o(e,t){return mo!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(mo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===vo?(null===yo&&a("293"),yo.firstContextDependency=vo=t):vo=vo.next=t),e._currentValue}var To={},go={current:To},Oo={current:To},So={current:To};function Co(e){return e===To&&a("174"),e}function Po(e,t){Sr(So,t),Sr(Oo,e),Sr(go,To);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:er(null,"");break;default:t=er(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Or(go),Sr(go,t)}function xo(e){Or(go),Or(Oo),Or(So)}function No(e){Co(So.current);var t=Co(go.current),n=er(t,e.type);t!==n&&(Sr(Oo,e),Sr(go,n))}function jo(e){Oo.current===e&&(Or(go),Or(Oo))}function Ro(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Mo=Qe.ReactCurrentOwner,Lo=(new r.Component).refs;function Uo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Ao={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Ca(),o=ro(r=Bi(r,e));o.payload=t,null!=n&&(o.callback=n),Ji(),io(e,o),ta(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Ca(),o=ro(r=Bi(r,e));o.tag=1,o.payload=t,null!=n&&(o.callback=n),Ji(),io(e,o),ta(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Ca(),r=ro(n=Bi(n,e));r.tag=2,null!=t&&(r.callback=t),Ji(),io(e,r),ta(e,n)}};function Do(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(o,i))}function Io(e,t,n){var r=!1,o=Cr,i=t.contextType;return"object"==typeof i&&null!==i?i=Mo.currentDispatcher.readContext(i):(o=Rr(t)?Nr:Pr.current,i=(r=null!=(r=t.contextTypes))?jr(e,o):Cr),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Ao,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Fo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ao.enqueueReplaceState(t,t.state,null)}function zo(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Lo;var i=t.contextType;"object"==typeof i&&null!==i?o.context=Mo.currentDispatcher.readContext(i):(i=Rr(t)?Nr:Pr.current,o.context=jr(e,i)),null!==(i=e.updateQueue)&&(so(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(Uo(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Ao.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(so(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Wo=Array.isArray;function $o(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&a("289"),r=n.stateNode),r||a("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===Lo&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&a("284"),n._owner||a("290",e)}return e}function ko(e,t){"textarea"!==e.type&&a("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Yo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Qr(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Kr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=$o(e,t,n),r.return=e,r):((r=Xr(n.type,n.key,n.props,null,e.mode,r)).ref=$o(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Vr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=qr(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Kr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Je:return(n=Xr(t.type,t.key,t.props,null,e.mode,n)).ref=$o(e,null,t),n.return=e,n;case Ke:return(t=Vr(t,e.mode,n)).return=e,t}if(Wo(t)||at(t))return(t=qr(t,e.mode,n,null)).return=e,t;ko(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Je:return n.key===o?n.type===Ve?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case Ke:return n.key===o?c(e,t,n,r):null}if(Wo(n)||at(n))return null!==o?null:f(e,t,n,r,null);ko(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Je:return e=e.get(null===r.key?n:r.key)||null,r.type===Ve?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case Ke:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Wo(r)||at(r))return f(t,e=e.get(n)||null,r,o,null);ko(t,r)}return null}function y(o,a,u,l){for(var s=null,c=null,f=a,y=a=0,v=null;null!==f&&y<u.length;y++){f.index>y?(v=f,f=null):v=f.sibling;var m=d(o,f,u[y],l);if(null===m){null===f&&(f=v);break}e&&f&&null===m.alternate&&t(o,f),a=i(m,a,y),null===c?s=m:c.sibling=m,c=m,f=v}if(y===u.length)return n(o,f),s;if(null===f){for(;y<u.length;y++)(f=p(o,u[y],l))&&(a=i(f,a,y),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);y<u.length;y++)(v=h(f,o,y,u[y],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?y:v.key),a=i(v,a,y),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach(function(e){return t(o,e)}),s}function v(o,u,l,s){var c=at(l);"function"!=typeof c&&a("150"),null==(l=c.call(l))&&a("151");for(var f=c=null,y=u,v=u=0,m=null,w=l.next();null!==y&&!w.done;v++,w=l.next()){y.index>v?(m=y,y=null):m=y.sibling;var b=d(o,y,w.value,s);if(null===b){y||(y=m);break}e&&y&&null===b.alternate&&t(o,y),u=i(b,u,v),null===f?c=b:f.sibling=b,f=b,y=m}if(w.done)return n(o,y),c;if(null===y){for(;!w.done;v++,w=l.next())null!==(w=p(o,w.value,s))&&(u=i(w,u,v),null===f?c=w:f.sibling=w,f=w);return c}for(y=r(o,y);!w.done;v++,w=l.next())null!==(w=h(y,o,v,w.value,s))&&(e&&null!==w.alternate&&y.delete(null===w.key?v:w.key),u=i(w,u,v),null===f?c=w:f.sibling=w,f=w);return e&&y.forEach(function(e){return t(o,e)}),c}return function(e,r,i,l){var s="object"==typeof i&&null!==i&&i.type===Ve&&null===i.key;s&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case Je:e:{for(c=i.key,s=r;null!==s;){if(s.key===c){if(7===s.tag?i.type===Ve:s.elementType===i.type){n(e,s.sibling),(r=o(s,i.type===Ve?i.props.children:i.props)).ref=$o(e,s,i),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}i.type===Ve?((r=qr(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Xr(i.type,i.key,i.props,null,e.mode,l)).ref=$o(e,r,i),l.return=e,e=l)}return u(e);case Ke:e:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Vr(i,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Kr(i,e.mode,l)).return=e,e=r),u(e);if(Wo(i))return y(e,r,i,l);if(at(i))return v(e,r,i,l);if(c&&ko(e,i),void 0===i&&!s)switch(e.tag){case 1:case 0:a("152",(l=e.type).displayName||l.name||"Component")}return n(e,r)}}var Qo=Yo(!0),Xo=Yo(!1),qo=null,Jo=null,Ko=!1;function Vo(e,t){var n=kr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Zo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Go(e){if(Ko){var t=Jo;if(t){var n=t;if(!Zo(e,t)){if(!(t=Er(n))||!Zo(e,t))return e.effectTag|=2,Ko=!1,void(qo=e);Vo(qo,n)}qo=e,Jo=_r(t)}else e.effectTag|=2,Ko=!1,qo=e}}function Bo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;qo=e}function Ho(e){if(e!==qo)return!1;if(!Ko)return Bo(e),Ko=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!mr(t,e.memoizedProps))for(t=Jo;t;)Vo(e,t),t=Er(t);return Bo(e),Jo=qo?Er(e.stateNode):null,!0}function ei(){Jo=qo=null,Ko=!1}var ti=Qe.ReactCurrentOwner;function ni(e,t,n,r){t.child=null===e?Xo(t,null,n,r):Qo(t,e.child,n,r)}function ri(e,t,n,r,o){n=n.render;var i=t.ref;return Eo(t),r=n(r,i),t.effectTag|=1,ni(e,t,r,o),t.child}function oi(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Yr(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Xr(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,ii(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:en)(o,r)&&e.ref===t.ref)?pi(e,t,i):(t.effectTag|=1,(e=Qr(a,r)).ref=t.ref,e.return=t,t.child=e)}function ii(e,t,n,r,o,i){return null!==e&&o<i&&en(e.memoizedProps,r)&&e.ref===t.ref?pi(e,t,i):ui(e,t,n,r,i)}function ai(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function ui(e,t,n,r,o){var i=Rr(n)?Nr:Pr.current;return i=jr(t,i),Eo(t),n=n(r,i),t.effectTag|=1,ni(e,t,n,o),t.child}function li(e,t,n,r,o){if(Rr(n)){var i=!0;Dr(t)}else i=!1;if(Eo(t),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Io(t,n,r),zo(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,s=n.contextType;"object"==typeof s&&null!==s?s=Mo.currentDispatcher.readContext(s):s=jr(t,s=Rr(n)?Nr:Pr.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==s)&&Fo(t,a,r,s),eo=!1;var p=t.memoizedState;l=a.state=p;var d=t.updateQueue;null!==d&&(so(t,d,r,a,o),l=t.memoizedState),u!==r||p!==l||xr.current||eo?("function"==typeof c&&(Uo(t,n,c,r),l=t.memoizedState),(u=eo||Do(t,n,u,r,p,l,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=s,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,u=t.memoizedProps,a.props=t.type===t.elementType?u:Ro(t.type,u),l=a.context,"object"==typeof(s=n.contextType)&&null!==s?s=Mo.currentDispatcher.readContext(s):s=jr(t,s=Rr(n)?Nr:Pr.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==s)&&Fo(t,a,r,s),eo=!1,l=t.memoizedState,p=a.state=l,null!==(d=t.updateQueue)&&(so(t,d,r,a,o),p=t.memoizedState),u!==r||l!==p||xr.current||eo?("function"==typeof c&&(Uo(t,n,c,r),p=t.memoizedState),(c=eo||Do(t,n,u,r,l,p,s))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,s)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=s,r=c):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return si(e,t,n,r,i,o)}function si(e,t,n,r,o,i){ai(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&Ir(t,n,!1),pi(e,t,i);r=t.stateNode,ti.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Qo(t,e.child,null,i),t.child=Qo(t,null,u,i)):ni(e,t,u,i),t.memoizedState=r.state,o&&Ir(t,n,!0),t.child}function ci(e){var t=e.stateNode;t.pendingContext?Ur(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ur(0,t.context,!1),Po(e,t.containerInfo)}function fi(e,t,n){var r=t.mode,o=t.pendingProps,i=t.memoizedState;if(0==(64&t.effectTag)){i=null;var a=!1}else i={timedOutAt:null!==i?i.timedOutAt:0},a=!0,t.effectTag&=-65;if(null===e)if(a){var u=o.fallback;e=qr(null,r,0,null),0==(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=qr(u,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=Xo(t,null,o.children,n);else null!==e.memoizedState?(u=(r=e.child).sibling,a?(n=o.fallback,o=Qr(r,r.pendingProps),0==(1&t.mode)&&((a=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(o.child=a)),r=o.sibling=Qr(u,n,u.expirationTime),n=o,o.childExpirationTime=0,n.return=r.return=t):n=r=Qo(t,r.child,o.children,n)):(u=e.child,a?(a=o.fallback,(o=qr(null,r,0,null)).child=u,0==(1&t.mode)&&(o.child=null!==t.memoizedState?t.child.child:t.child),(r=o.sibling=qr(a,r,n,null)).effectTag|=2,n=o,o.childExpirationTime=0,n.return=r.return=t):r=n=Qo(t,u,o.children,n)),t.stateNode=e.stateNode;return t.memoizedState=i,t.child=n,r}function pi(e,t,n){if(null!==e&&(t.firstContextDependency=e.firstContextDependency),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&a("153"),null!==t.child){for(n=Qr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Qr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function di(e,t,n){var r=t.expirationTime;if(null!==e&&e.memoizedProps===t.pendingProps&&!xr.current&&r<n){switch(t.tag){case 3:ci(t),ei();break;case 5:No(t);break;case 1:Rr(t.type)&&Dr(t);break;case 4:Po(t,t.stateNode.containerInfo);break;case 10:wo(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?fi(e,t,n):null!==(t=pi(e,t,n))?t.sibling:null}return pi(e,t,n)}switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var o=jr(t,Pr.current);if(Eo(t),o=r(e,o),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,Rr(r)){var i=!0;Dr(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var u=r.getDerivedStateFromProps;"function"==typeof u&&Uo(t,r,u,e),o.updater=Ao,t.stateNode=o,o._reactInternalFiber=t,zo(t,r,e,n),t=si(null,t,r,!0,i,n)}else t.tag=0,ni(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),i=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:throw e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._result=t,t}}(o),t.type=e,o=t.tag=function(e){if("function"==typeof e)return Yr(e)?1:0;if(null!=e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),i=Ro(e,i),u=void 0,o){case 0:u=ui(null,t,e,i,n);break;case 1:u=li(null,t,e,i,n);break;case 11:u=ri(null,t,e,i,n);break;case 14:u=oi(null,t,e,Ro(e.type,i),r,n);break;default:a("306",e,"")}return u;case 0:return r=t.type,o=t.pendingProps,ui(e,t,r,o=t.elementType===r?o:Ro(r,o),n);case 1:return r=t.type,o=t.pendingProps,li(e,t,r,o=t.elementType===r?o:Ro(r,o),n);case 3:return ci(t),null===(r=t.updateQueue)&&a("282"),o=null!==(o=t.memoizedState)?o.element:null,so(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(ei(),t=pi(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(Jo=_r(t.stateNode.containerInfo),qo=t,o=Ko=!0),o?(t.effectTag|=2,t.child=Xo(t,null,r,n)):(ni(e,t,r,n),ei()),t=t.child),t;case 5:return No(t),null===e&&Go(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,mr(r,o)?u=null:null!==i&&mr(r,i)&&(t.effectTag|=16),ai(e,t),1!==n&&1&t.mode&&o.hidden?(t.expirationTime=1,t=null):(ni(e,t,u,n),t=t.child),t;case 6:return null===e&&Go(t),null;case 13:return fi(e,t,n);case 4:return Po(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Qo(t,null,r,n):ni(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,ri(e,t,r,o=t.elementType===r?o:Ro(r,o),n);case 7:return ni(e,t,t.pendingProps,n),t.child;case 8:case 12:return ni(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,u=t.memoizedProps,wo(t,i=o.value),null!==u){var l=u.value;if(0===(i=l===i&&(0!==l||1/l==1/i)||l!=l&&i!=i?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(u.children===o.children&&!xr.current){t=pi(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){if(null!==(l=u.firstContextDependency))do{if(l.context===r&&0!=(l.observedBits&i)){if(1===u.tag){var s=ro(n);s.tag=2,io(u,s)}u.expirationTime<n&&(u.expirationTime=n),null!==(s=u.alternate)&&s.expirationTime<n&&(s.expirationTime=n);for(var c=u.return;null!==c;){if(s=c.alternate,c.childExpirationTime<n)c.childExpirationTime=n,null!==s&&s.childExpirationTime<n&&(s.childExpirationTime=n);else{if(!(null!==s&&s.childExpirationTime<n))break;s.childExpirationTime=n}c=c.return}}s=u.child,l=l.next}while(null!==l);else s=10===u.tag&&u.type===t.type?null:u.child;if(null!==s)s.return=u;else for(s=u;null!==s;){if(s===t){s=null;break}if(null!==(u=s.sibling)){u.return=s.return,s=u;break}s=s.return}u=s}}ni(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,Eo(t),r=r(o=_o(o,i.unstable_observedBits)),t.effectTag|=1,ni(e,t,r,n),t.child;case 14:return i=Ro(o=t.type,t.pendingProps),oi(e,t,o,i=Ro(o.type,i),r,n);case 15:return ii(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ro(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Rr(r)?(e=!0,Dr(t)):e=!1,Eo(t),Io(t,r,o),zo(t,r,o,n),si(null,t,r,!0,e,n);default:a("156")}}function hi(e){e.effectTag|=4}var yi=void 0,vi=void 0,mi=void 0,wi=void 0;yi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},vi=function(){},mi=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var u=t.stateNode;switch(Co(go.current),e=null,n){case"input":a=bt(u,a),r=bt(u,r),e=[];break;case"option":a=qn(u,a),r=qn(u,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Kn(u,a),r=Kn(u,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(u.onclick=dr)}cr(n,r),u=n=void 0;var l=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var s=a[n];for(u in s)s.hasOwnProperty(u)&&(l||(l={}),l[u]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(b.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var c=r[n];if(s=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&c!==s&&(null!=c||null!=s))if("style"===n)if(s){for(u in s)!s.hasOwnProperty(u)||c&&c.hasOwnProperty(u)||(l||(l={}),l[u]="");for(u in c)c.hasOwnProperty(u)&&s[u]!==c[u]&&(l||(l={}),l[u]=c[u])}else l||(e||(e=[]),e.push(n,l)),l=c;else"dangerouslySetInnerHTML"===n?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(n,""+c)):"children"===n?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(n,""+c):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(b.hasOwnProperty(n)?(null!=c&&pr(i,n),e||s===c||(e=[])):(e=e||[]).push(n,c))}l&&(e=e||[]).push("style",l),i=e,(t.updateQueue=i)&&hi(t)}},wi=function(e,t,n,r){n!==r&&hi(t)};var bi="function"==typeof WeakSet?WeakSet:Set;function Ei(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=lt(n)),null!==n&&ut(n.type),t=t.value,null!==e&&1===e.tag&&ut(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function _i(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Gi(e,t)}else t.current=null}function Ti(e){switch("function"==typeof zr&&zr(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(null!==r){var o=e;try{r()}catch(e){Gi(o,e)}}n=n.next}while(n!==t)}break;case 1:if(_i(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Gi(e,t)}break;case 5:_i(e);break;case 4:Si(e)}}function gi(e){return 5===e.tag||3===e.tag||4===e.tag}function Oi(e){e:{for(var t=e.return;null!==t;){if(gi(t)){var n=t;break e}t=t.return}a("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(or(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||gi(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,u=o.stateNode,l=n;8===i.nodeType?i.parentNode.insertBefore(u,l):i.insertBefore(u,l)}else t.insertBefore(o.stateNode,n);else r?(u=t,l=o.stateNode,8===u.nodeType?(i=u.parentNode).insertBefore(l,u):(i=u).appendChild(l),null!=(u=u._reactRootContainer)||null!==i.onclick||(i.onclick=dr)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Si(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&a("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,u=i;;)if(Ti(u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===i)break;for(;null===u.sibling;){if(null===u.return||u.return===i)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}o?(i=r,u=t.stateNode,8===i.nodeType?i.parentNode.removeChild(u):i.removeChild(u)):r.removeChild(t.stateNode)}else if(4===t.tag?(r=t.stateNode.containerInfo,o=!0):Ti(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function Ci(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&function(e,t,n,r,o){e[U]=o,"input"===n&&"radio"===o.type&&null!=o.name&&_t(e,o),fr(n,r),r=fr(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],u=t[i+1];"style"===a?lr(e,u):"dangerouslySetInnerHTML"===a?rr(e,u):"children"===a?or(e,u):mt(e,a,u,r)}switch(n){case"input":Tt(e,o);break;case"textarea":Zn(e,o);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Jn(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Jn(e,!!o.multiple,o.defaultValue,!0):Jn(e,!!o.multiple,o.multiple?[]:"",!1))}}(n,i,o,e,r)}break;case 6:null===t.stateNode&&a("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=Ca())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=ur("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var u=t.stateNode;null===u&&(u=t.stateNode=new bi),n.forEach(function(e){var n=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=Bi(t=Ca(),e),null!==(e=ea(e,t))&&(Zr(e,t),0!==(t=e.expirationTime)&&Pa(e,t))}.bind(null,t,e);u.has(e)||(u.add(e),e.then(n,n))})}break;case 17:break;default:a("163")}}var Pi="function"==typeof WeakMap?WeakMap:Map;function xi(e,t,n){(n=ro(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Da(r),Ei(e,t)},n}function Ni(e,t,n){(n=ro(n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Xi?Xi=new Set([this]):Xi.add(this));var n=t.value,o=t.stack;Ei(e,t),this.componentDidCatch(n,{componentStack:null!==o?o:""})}),n}function ji(e){switch(e.tag){case 1:Rr(e.type)&&Mr();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return xo(),Lr(),0!=(64&(t=e.effectTag))&&a("285"),e.effectTag=-2049&t|64,e;case 5:return jo(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 4:return xo(),null;case 10:return bo(e),null;default:return null}}var Ri={readContext:_o},Mi=Qe.ReactCurrentOwner,Li=1073741822,Ui=0,Ai=!1,Di=null,Ii=null,Fi=0,zi=-1,Wi=!1,$i=null,ki=!1,Yi=null,Qi=null,Xi=null;function qi(){if(null!==Di)for(var e=Di.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&Mr();break;case 3:xo(),Lr();break;case 5:jo(t);break;case 4:xo();break;case 10:bo(t)}e=e.return}Ii=null,Fi=0,zi=-1,Wi=!1,Di=null}function Ji(){null!==Qi&&(i.unstable_cancelCallback(Yi),Qi())}function Ki(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){Di=e;e:{var i=t,u=Fi,l=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Rr(t.type)&&Mr();break;case 3:xo(),Lr(),(l=t.stateNode).pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),null!==i&&null!==i.child||(Ho(t),t.effectTag&=-3),vi(t);break;case 5:jo(t);var s=Co(So.current);if(u=t.type,null!==i&&null!=t.stateNode)mi(i,t,u,l,s),i.ref!==t.ref&&(t.effectTag|=128);else if(l){var c=Co(go.current);if(Ho(t)){i=(l=t).stateNode;var f=l.type,p=l.memoizedProps,d=s;switch(i[L]=l,i[U]=p,u=void 0,s=f){case"iframe":case"object":Sn("load",i);break;case"video":case"audio":for(f=0;f<te.length;f++)Sn(te[f],i);break;case"source":Sn("error",i);break;case"img":case"image":case"link":Sn("error",i),Sn("load",i);break;case"form":Sn("reset",i),Sn("submit",i);break;case"details":Sn("toggle",i);break;case"input":Et(i,p),Sn("invalid",i),pr(d,"onChange");break;case"select":i._wrapperState={wasMultiple:!!p.multiple},Sn("invalid",i),pr(d,"onChange");break;case"textarea":Vn(i,p),Sn("invalid",i),pr(d,"onChange")}for(u in cr(s,p),f=null,p)p.hasOwnProperty(u)&&(c=p[u],"children"===u?"string"==typeof c?i.textContent!==c&&(f=["children",c]):"number"==typeof c&&i.textContent!==""+c&&(f=["children",""+c]):b.hasOwnProperty(u)&&null!=c&&pr(d,u));switch(s){case"input":ke(i),gt(i,p,!0);break;case"textarea":ke(i),Gn(i);break;case"select":case"option":break;default:"function"==typeof p.onClick&&(i.onclick=dr)}u=f,l.updateQueue=u,(l=null!==u)&&hi(t)}else{p=t,i=u,d=l,f=9===s.nodeType?s:s.ownerDocument,c===Bn.html&&(c=Hn(i)),c===Bn.html?"script"===i?((i=f.createElement("div")).innerHTML="<script><\/script>",f=i.removeChild(i.firstChild)):"string"==typeof d.is?f=f.createElement(i,{is:d.is}):(f=f.createElement(i),"select"===i&&d.multiple&&(f.multiple=!0)):f=f.createElementNS(c,i),(i=f)[L]=p,i[U]=l,yi(i,t,!1,!1),d=i;var h=s,y=fr(f=u,p=l);switch(f){case"iframe":case"object":Sn("load",d),s=p;break;case"video":case"audio":for(s=0;s<te.length;s++)Sn(te[s],d);s=p;break;case"source":Sn("error",d),s=p;break;case"img":case"image":case"link":Sn("error",d),Sn("load",d),s=p;break;case"form":Sn("reset",d),Sn("submit",d),s=p;break;case"details":Sn("toggle",d),s=p;break;case"input":Et(d,p),s=bt(d,p),Sn("invalid",d),pr(h,"onChange");break;case"option":s=qn(d,p);break;case"select":d._wrapperState={wasMultiple:!!p.multiple},s=o({},p,{value:void 0}),Sn("invalid",d),pr(h,"onChange");break;case"textarea":Vn(d,p),s=Kn(d,p),Sn("invalid",d),pr(h,"onChange");break;default:s=p}cr(f,s),c=void 0;var v=f,m=d,w=s;for(c in w)if(w.hasOwnProperty(c)){var E=w[c];"style"===c?lr(m,E):"dangerouslySetInnerHTML"===c?null!=(E=E?E.__html:void 0)&&rr(m,E):"children"===c?"string"==typeof E?("textarea"!==v||""!==E)&&or(m,E):"number"==typeof E&&or(m,""+E):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(b.hasOwnProperty(c)?null!=E&&pr(h,c):null!=E&&mt(m,c,E,y))}switch(f){case"input":ke(d),gt(d,p,!1);break;case"textarea":ke(d),Gn(d);break;case"option":null!=p.value&&d.setAttribute("value",""+wt(p.value));break;case"select":(s=d).multiple=!!p.multiple,null!=(d=p.value)?Jn(s,!!p.multiple,d,!1):null!=p.defaultValue&&Jn(s,!!p.multiple,p.defaultValue,!0);break;default:"function"==typeof s.onClick&&(d.onclick=dr)}(l=vr(u,l))&&hi(t),t.stateNode=i}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&a("166");break;case 6:i&&null!=t.stateNode?wi(i,t,i.memoizedProps,l):("string"!=typeof l&&(null===t.stateNode&&a("166")),i=Co(So.current),Co(go.current),Ho(t)?(u=(l=t).stateNode,i=l.memoizedProps,u[L]=l,(l=u.nodeValue!==i)&&hi(t)):(u=t,(l=(9===i.nodeType?i:i.ownerDocument).createTextNode(l))[L]=t,u.stateNode=l));break;case 11:break;case 13:if(l=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=u,Di=t;break e}l=null!==l,u=null!==i&&null!==i.memoizedState,null!==i&&!l&&u&&(null!==(i=i.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=i,i.nextEffect=s):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),(l!==u||0==(1&t.effectTag)&&l)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:xo(),vi(t);break;case 10:bo(t);break;case 9:case 14:break;case 17:Rr(t.type)&&Mr();break;default:a("156")}Di=null}if(t=e,1===Fi||1!==t.childExpirationTime){for(l=0,u=t.child;null!==u;)(i=u.expirationTime)>l&&(l=i),(s=u.childExpirationTime)>l&&(l=s),u=u.sibling;t.childExpirationTime=l}if(null!==Di)return Di;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=ji(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function Vi(e){var t=di(e.alternate,e,Fi);return e.memoizedProps=e.pendingProps,null===t&&(t=Ki(e)),Mi.current=null,t}function Zi(e,t){Ai&&a("243"),Ji(),Ai=!0,Mi.currentDispatcher=Ri;var n=e.nextExpirationTimeToWorkOn;n===Fi&&e===Ii&&null!==Di||(qi(),Fi=n,Di=Qr((Ii=e).current,null),e.pendingCommitExpirationTime=0);for(var r=!1;;){try{if(t)for(;null!==Di&&!ja();)Di=Vi(Di);else for(;null!==Di;)Di=Vi(Di)}catch(t){if(mo=vo=yo=null,null===Di)r=!0,Da(t);else{null===Di&&a("271");var o=Di,i=o.return;if(null!==i){e:{var u=e,l=i,s=o,c=t;if(i=Fi,s.effectTag|=1024,s.firstEffect=s.lastEffect=null,null!==c&&"object"==typeof c&&"function"==typeof c.then){var f=c;c=l;var p=-1,d=-1;do{if(13===c.tag){var h=c.alternate;if(null!==h&&null!==(h=h.memoizedState)){d=10*(1073741822-h.timedOutAt);break}"number"==typeof(h=c.pendingProps.maxDuration)&&(0>=h?p=0:(-1===p||h<p)&&(p=h))}c=c.return}while(null!==c);c=l;do{if((h=13===c.tag)&&(h=void 0!==c.memoizedProps.fallback&&null===c.memoizedState),h){if(null===(l=c.updateQueue)?c.updateQueue=new Set([f]):l.add(f),0==(1&c.mode)){c.effectTag|=64,s.effectTag&=-1957,1===s.tag&&(null===s.alternate?s.tag=17:((i=ro(1073741823)).tag=2,io(s,i))),s.expirationTime=1073741823;break e}null===(s=u.pingCache)?(s=u.pingCache=new Pi,l=new Set,s.set(f,l)):void 0===(l=s.get(f))&&(l=new Set,s.set(f,l)),l.has(i)||(l.add(i),s=Hi.bind(null,u,f,i),f.then(s,s)),-1===p?u=1073741823:(-1===d&&(d=10*(1073741822-Br(u,i))-5e3),u=d+p),0<=u&&zi<u&&(zi=u),c.effectTag|=2048,c.expirationTime=i;break e}c=c.return}while(null!==c);c=Error((ut(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+lt(s))}Wi=!0,c=po(c,s),u=l;do{switch(u.tag){case 3:u.effectTag|=2048,u.expirationTime=i,ao(u,i=xi(u,c,i));break e;case 1:if(f=c,p=u.type,d=u.stateNode,0==(64&u.effectTag)&&("function"==typeof p.getDerivedStateFromError||null!==d&&"function"==typeof d.componentDidCatch&&(null===Xi||!Xi.has(d)))){u.effectTag|=2048,u.expirationTime=i,ao(u,i=Ni(u,f,i));break e}}u=u.return}while(null!==u)}Di=Ki(o);continue}r=!0,Da(t)}}break}if(Ai=!1,mo=vo=yo=Mi.currentDispatcher=null,r)Ii=null,e.finishedWork=null;else if(null!==Di)e.finishedWork=null;else{if(null===(r=e.current.alternate)&&a("281"),Ii=null,Wi){if(o=e.latestPendingTime,i=e.latestSuspendedTime,u=e.latestPingedTime,0!==o&&o<n||0!==i&&i<n||0!==u&&u<n)return Gr(e,n),void Sa(e,r,n,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,n=e.nextExpirationTimeToWorkOn=n,t=e.expirationTime=1073741823,void Sa(e,r,n,t,-1)}t&&-1!==zi?(Gr(e,n),(t=10*(1073741822-Br(e,n)))<zi&&(zi=t),t=10*(1073741822-Ca()),t=zi-t,Sa(e,r,n,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=n,e.finishedWork=r)}}function Gi(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Xi||!Xi.has(r)))return io(n,e=Ni(n,e=po(t,e),1073741823)),void ta(n,1073741823);break;case 3:return io(n,e=xi(n,e=po(t,e),1073741823)),void ta(n,1073741823)}n=n.return}3===e.tag&&(io(e,n=xi(e,n=po(t,e),1073741823)),ta(e,1073741823))}function Bi(e,t){return 0!==Ui?e=Ui:Ai?e=ki?1073741823:Fi:1&t.mode?(e=ya?1073741822-10*(1+((1073741822-e+15)/10|0)):1073741822-25*(1+((1073741822-e+500)/25|0)),null!==Ii&&e===Fi&&--e):e=1073741823,ya&&(0===ca||e<ca)&&(ca=e),e}function Hi(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==Ii&&Fi===n?Ii=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),Hr(n,e),0!==(n=e.expirationTime)&&Pa(e,n)))}function ea(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function ta(e,t){null!==(e=ea(e,t))&&(!Ai&&0!==Fi&&t>Fi&&qi(),Zr(e,t),Ai&&!ki&&Ii===e||Pa(e,e.expirationTime),_a>Ea&&(_a=0,a("185")))}function na(e,t,n,r,o){var i=Ui;Ui=1073741823;try{return e(t,n,r,o)}finally{Ui=i}}var ra=null,oa=null,ia=0,aa=void 0,ua=!1,la=null,sa=0,ca=0,fa=!1,pa=null,da=!1,ha=!1,ya=!1,va=null,ma=i.unstable_now(),wa=1073741822-(ma/10|0),ba=wa,Ea=50,_a=0,Ta=null;function ga(){wa=1073741822-((i.unstable_now()-ma)/10|0)}function Oa(e,t){if(0!==ia){if(t<ia)return;null!==aa&&i.unstable_cancelCallback(aa)}ia=t,e=i.unstable_now()-ma,aa=i.unstable_scheduleCallback(Ra,{timeout:10*(1073741822-t)-e})}function Sa(e,t,n,r,o){e.expirationTime=r,0!==o||ja()?0<o&&(e.timeoutHandle=wr(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,ga(),ba=wa,La(e,n)}.bind(null,e,t,n),o)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function Ca(){return ua?ba:(xa(),0!==sa&&1!==sa||(ga(),ba=wa),ba)}function Pa(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===oa?(ra=oa=e,e.nextScheduledRoot=e):(oa=oa.nextScheduledRoot=e).nextScheduledRoot=ra):t>e.expirationTime&&(e.expirationTime=t),ua||(da?ha&&(la=e,sa=1073741823,Ua(e,1073741823,!1)):1073741823===t?Ma(1073741823,!1):Oa(e,t))}function xa(){var e=0,t=null;if(null!==oa)for(var n=oa,r=ra;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===oa)&&a("244"),r===r.nextScheduledRoot){ra=oa=r.nextScheduledRoot=null;break}if(r===ra)ra=o=r.nextScheduledRoot,oa.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===oa){(oa=n).nextScheduledRoot=ra,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(o>e&&(e=o,t=r),r===oa)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}la=t,sa=e}var Na=!1;function ja(){return!!Na||!!i.unstable_shouldYield()&&(Na=!0)}function Ra(){try{if(!ja()&&null!==ra){ga();var e=ra;do{var t=e.expirationTime;0!==t&&wa<=t&&(e.nextExpirationTimeToWorkOn=wa),e=e.nextScheduledRoot}while(e!==ra)}Ma(0,!0)}finally{Na=!1}}function Ma(e,t){if(xa(),t)for(ga(),ba=wa;null!==la&&0!==sa&&e<=sa&&!(Na&&wa>sa);)Ua(la,sa,wa>sa),xa(),ga(),ba=wa;else for(;null!==la&&0!==sa&&e<=sa;)Ua(la,sa,!1),xa();if(t&&(ia=0,aa=null),0!==sa&&Oa(la,sa),_a=0,Ta=null,null!==va)for(e=va,va=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){fa||(fa=!0,pa=e)}}if(fa)throw e=pa,pa=null,fa=!1,e}function La(e,t){ua&&a("253"),la=e,sa=t,Ua(e,t,!1),Ma(1073741823,!1)}function Ua(e,t,n){if(ua&&a("245"),ua=!0,n){var r=e.finishedWork;null!==r?Aa(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,br(r)),Zi(e,n),null!==(r=e.finishedWork)&&(ja()?e.finishedWork=r:Aa(e,r,t)))}else null!==(r=e.finishedWork)?Aa(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,br(r)),Zi(e,n),null!==(r=e.finishedWork)&&Aa(e,r,t));ua=!1}function Aa(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===va?va=[r]:va.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===Ta?_a++:(Ta=e,_a=0),ki=Ai=!0,e.current===t&&a("177"),0===(n=e.pendingCommitExpirationTime)&&a("261"),e.pendingCommitExpirationTime=0,r=t.expirationTime;var o=t.childExpirationTime;if(r=o>r?o:r,e.didError=!1,0===r?(e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0):(r<e.latestPingedTime&&(e.latestPingedTime=0),0!==(o=e.latestPendingTime)&&(o>r?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>r&&(e.earliestPendingTime=e.latestPendingTime)),0===(o=e.earliestSuspendedTime)?Zr(e,r):r<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Zr(e,r)):r>o&&Zr(e,r)),Hr(0,e),Mi.current=null,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,hr=On,In(o=Dn())){if("selectionStart"in o)var i={start:o.selectionStart,end:o.selectionEnd};else e:{var u=(i=(i=o.ownerDocument)&&i.defaultView||window).getSelection&&i.getSelection();if(u&&0!==u.rangeCount){i=u.anchorNode;var l=u.anchorOffset,s=u.focusNode;u=u.focusOffset;try{i.nodeType,s.nodeType}catch(e){i=null;break e}var c=0,f=-1,p=-1,d=0,h=0,y=o,v=null;t:for(;;){for(var m;y!==i||0!==l&&3!==y.nodeType||(f=c+l),y!==s||0!==u&&3!==y.nodeType||(p=c+u),3===y.nodeType&&(c+=y.nodeValue.length),null!==(m=y.firstChild);)v=y,y=m;for(;;){if(y===o)break t;if(v===i&&++d===l&&(f=c),v===s&&++h===u&&(p=c),null!==(m=y.nextSibling))break;v=(y=v).parentNode}y=m}i=-1===f||-1===p?null:{start:f,end:p}}else i=null}i=i||{start:0,end:0}}else i=null;for(yr={focusedElem:o,selectionRange:i},On=!1,$i=r;null!==$i;){o=!1,i=void 0;try{for(;null!==$i;){if(256&$i.effectTag)e:{var w=$i.alternate;switch((l=$i).tag){case 0:case 11:case 15:break e;case 1:if(256&l.effectTag&&null!==w){var b=w.memoizedProps,E=w.memoizedState,_=l.stateNode,T=_.getSnapshotBeforeUpdate(l.elementType===l.type?b:Ro(l.type,b),E);_.__reactInternalSnapshotBeforeUpdate=T}break e;case 3:case 5:case 6:case 4:case 17:break e;default:a("163")}}$i=$i.nextEffect}}catch(e){o=!0,i=e}o&&(null===$i&&a("178"),Gi($i,i),null!==$i&&($i=$i.nextEffect))}for($i=r;null!==$i;){w=!1,b=void 0;try{for(;null!==$i;){var g=$i.effectTag;if(16&g&&or($i.stateNode,""),128&g){var O=$i.alternate;if(null!==O){var S=O.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(14&g){case 2:Oi($i),$i.effectTag&=-3;break;case 6:Oi($i),$i.effectTag&=-3,Ci($i.alternate,$i);break;case 4:Ci($i.alternate,$i);break;case 8:Si(E=$i),E.return=null,E.child=null,E.memoizedState=null,E.updateQueue=null;var C=E.alternate;null!==C&&(C.return=null,C.child=null,C.memoizedState=null,C.updateQueue=null)}$i=$i.nextEffect}}catch(e){w=!0,b=e}w&&(null===$i&&a("178"),Gi($i,b),null!==$i&&($i=$i.nextEffect))}if(S=yr,O=Dn(),g=S.focusedElem,w=S.selectionRange,O!==g&&g&&g.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(g.ownerDocument.documentElement,g)){null!==w&&In(g)&&(O=w.start,void 0===(S=w.end)&&(S=O),"selectionStart"in g?(g.selectionStart=O,g.selectionEnd=Math.min(S,g.value.length)):(S=(O=g.ownerDocument||document)&&O.defaultView||window).getSelection&&(S=S.getSelection(),b=g.textContent.length,C=Math.min(w.start,b),w=void 0===w.end?C:Math.min(w.end,b),!S.extend&&C>w&&(b=w,w=C,C=b),b=An(g,C),E=An(g,w),b&&E&&(1!==S.rangeCount||S.anchorNode!==b.node||S.anchorOffset!==b.offset||S.focusNode!==E.node||S.focusOffset!==E.offset)&&((O=O.createRange()).setStart(b.node,b.offset),S.removeAllRanges(),C>w?(S.addRange(O),S.extend(E.node,E.offset)):(O.setEnd(E.node,E.offset),S.addRange(O))))),O=[];for(S=g;S=S.parentNode;)1===S.nodeType&&O.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof g.focus&&g.focus(),g=0;g<O.length;g++)(S=O[g]).element.scrollLeft=S.left,S.element.scrollTop=S.top}for(yr=null,On=!!hr,hr=null,e.current=t,$i=r;null!==$i;){r=!1,g=void 0;try{for(O=n;null!==$i;){var P=$i.effectTag;if(36&P){var x=$i.alternate;switch(C=O,(S=$i).tag){case 0:case 11:case 15:break;case 1:var N=S.stateNode;if(4&S.effectTag)if(null===x)N.componentDidMount();else{var j=S.elementType===S.type?x.memoizedProps:Ro(S.type,x.memoizedProps);N.componentDidUpdate(j,x.memoizedState,N.__reactInternalSnapshotBeforeUpdate)}var R=S.updateQueue;null!==R&&co(0,R,N);break;case 3:var M=S.updateQueue;if(null!==M){if(w=null,null!==S.child)switch(S.child.tag){case 5:w=S.child.stateNode;break;case 1:w=S.child.stateNode}co(0,M,w)}break;case 5:var L=S.stateNode;null===x&&4&S.effectTag&&vr(S.type,S.memoizedProps)&&L.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:a("163")}}if(128&P){var U=$i.ref;if(null!==U){var A=$i.stateNode;switch($i.tag){case 5:var D=A;break;default:D=A}"function"==typeof U?U(D):U.current=D}}$i=$i.nextEffect}}catch(e){r=!0,g=e}r&&(null===$i&&a("178"),Gi($i,g),null!==$i&&($i=$i.nextEffect))}Ai=ki=!1,"function"==typeof Fr&&Fr(t.stateNode),P=t.expirationTime,0===(t=(t=t.childExpirationTime)>P?t:P)&&(Xi=null),e.expirationTime=t,e.finishedWork=null}function Da(e){null===la&&a("246"),la.expirationTime=0,fa||(fa=!0,pa=e)}function Ia(e,t){var n=da;da=!0;try{return e(t)}finally{(da=n)||ua||Ma(1073741823,!1)}}function Fa(e,t){if(da&&!ha){ha=!0;try{return e(t)}finally{ha=!1}}return e(t)}function za(e,t,n){if(ya)return e(t,n);da||ua||0===ca||(Ma(ca,!1),ca=0);var r=ya,o=da;da=ya=!0;try{return e(t,n)}finally{ya=r,(da=o)||ua||Ma(1073741823,!1)}}function Wa(e,t,n,r,o){var i=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||a("170");var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(Rr(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);a("171"),u=void 0}if(1===n.tag){var l=n.type;if(Rr(l)){n=Ar(n,l,u);break e}}n=u}else n=Cr;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=ro(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Ji(),io(i,o),ta(i,r),r}function $a(e,t,n,r){var o=t.current;return Wa(e,t,n,o=Bi(Ca(),o),r)}function ka(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Ya(e){var t=1073741822-25*(1+((1073741822-Ca()+500)/25|0));t>=Li&&(t=Li-1),this._expirationTime=Li=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Qa(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Xa(e,t,n){e={current:t=kr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function qa(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ja(e,t,n,r,o){qa(n)||a("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var u=o;o=function(){var e=ka(i._internalRoot);u.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Xa(e,!1,t)}(n,r),"function"==typeof o){var l=o;o=function(){var e=ka(i._internalRoot);l.call(e)}}Fa(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return ka(i._internalRoot)}function Ka(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return qa(t)||a("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ke,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Ce=function(e,t,n){switch(t){case"input":if(Tt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=F(r);o||a("90"),Ye(r),Tt(r,o)}}}break;case"textarea":Zn(e,n);break;case"select":null!=(t=n.value)&&Jn(e,!!n.multiple,t,!1)}},Ya.prototype.render=function(e){this._defer||a("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Qa;return Wa(e,t,null,n,r._onCommit),r},Ya.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Ya.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||a("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&a("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,La(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Ya.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Qa.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Qa.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&a("191",n),n()}}},Xa.prototype.render=function(e,t){var n=this._internalRoot,r=new Qa;return null!==(t=void 0===t?null:t)&&r.then(t),$a(e,n,null,r._onCommit),r},Xa.prototype.unmount=function(e){var t=this._internalRoot,n=new Qa;return null!==(e=void 0===e?null:e)&&n.then(e),$a(null,t,null,n._onCommit),n},Xa.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new Qa;return null!==(n=void 0===n?null:n)&&o.then(n),$a(t,r,e,o._onCommit),o},Xa.prototype.createBatch=function(){var e=new Ya(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Me=Ia,Le=za,Ue=function(){ua||0===ca||(Ma(ca,!1),ca=0)};var Va={createPortal:Ka,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?a("188"):a("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return Ja(null,e,t,!0,n)},render:function(e,t,n){return Ja(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&a("38"),Ja(e,t,n,!1,r)},unmountComponentAtNode:function(e){return qa(e)||a("40"),!!e._reactRootContainer&&(Fa(function(){Ja(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Ka.apply(void 0,arguments)},unstable_batchedUpdates:Ia,unstable_interactiveUpdates:za,flushSync:function(e,t){ua&&a("187");var n=da;da=!0;try{return na(e,t)}finally{da=n,Ma(1073741823,!1)}},unstable_createRoot:function(e,t){return qa(e)||a("299","unstable_createRoot"),new Xa(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=da;da=!0;try{na(e)}finally{(da=t)||ua||Ma(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[D,I,F,N.injectEventPluginsByName,w,Q,function(e){C(e,Y)},je,Re,xn,R]}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Fr=Wr(function(e){return t.onCommitFiberRoot(n,e)}),zr=Wr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(o({},e,{overrideProps:null,findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:A,bundleType:0,version:"16.7.0",rendererPackageName:"react-dom"});var Za={default:Va},Ga=Za&&Va||Za;e.exports=Ga.default||Ga},function(e,t,n){"use strict";e.exports=n(45)},function(e,t,n){"use strict";(function(e){
/** @license React v0.12.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,o=3,i=-1,a=-1,u=!1,l=!1;function s(){if(!u){var e=n.expirationTime;l?g():l=!0,T(p,e)}}function c(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var i=o,u=a;o=e,a=t;try{var l=r()}finally{o=i,a=u}if("function"==typeof l)if(l={callback:l,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=l.next=l.previous=l;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=l,s()),(t=r.previous).next=r.previous=l,l.next=r,l.previous=t}}function f(){if(-1===i&&null!==n&&1===n.priorityLevel){u=!0;try{do{c()}while(null!==n&&1===n.priorityLevel)}finally{u=!1,null!==n?s():l=!1}}}function p(e){u=!0;var o=r;r=e;try{if(e)for(;null!==n;){var i=t.unstable_now();if(!(n.expirationTime<=i))break;do{c()}while(null!==n&&n.expirationTime<=i)}else if(null!==n)do{c()}while(null!==n&&!O())}finally{u=!1,r=o,null!==n?s():l=!1,f()}}var d,h,y=Date,v="function"==typeof setTimeout?setTimeout:void 0,m="function"==typeof clearTimeout?clearTimeout:void 0,w="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,b="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function E(e){d=w(function(t){m(h),e(t)}),h=v(function(){b(d),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var _=performance;t.unstable_now=function(){return _.now()}}else t.unstable_now=function(){return y.now()};var T,g,O,S=null;if("undefined"!=typeof window?S=window:void 0!==e&&(S=e),S&&S._schedMock){var C=S._schedMock;T=C[0],g=C[1],O=C[2],t.unstable_now=C[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var P=null,x=function(e){if(null!==P)try{P(e)}finally{P=null}};T=function(e){null!==P?setTimeout(T,0,e):(P=e,setTimeout(x,0,!1))},g=function(){P=null},O=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof w&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var N=null,j=!1,R=-1,M=!1,L=!1,U=0,A=33,D=33;O=function(){return U<=t.unstable_now()};var I=new MessageChannel,F=I.port2;I.port1.onmessage=function(){j=!1;var e=N,n=R;N=null,R=-1;var r=t.unstable_now(),o=!1;if(0>=U-r){if(!(-1!==n&&n<=r))return M||(M=!0,E(z)),N=e,void(R=n);o=!0}if(null!==e){L=!0;try{e(o)}finally{L=!1}}};var z=function(e){if(null!==N){E(z);var t=e-U+D;t<D&&A<D?(8>t&&(t=8),D=t<A?A:t):A=t,U=e+D,j||(j=!0,F.postMessage(void 0))}else M=!1};T=function(e,t){N=e,R=t,L||0>t?F.postMessage(void 0):M||(M=!0,E(z))},g=function(){N=null,j=!1,R=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=o,a=i;o=e,i=t.unstable_now();try{return n()}finally{o=r,i=a,f()}},t.unstable_scheduleCallback=function(e,r){var a=-1!==i?i:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=a+r.timeout;else switch(o){case 1:r=a+-1;break;case 2:r=a+250;break;case 5:r=a+1073741823;break;case 4:r=a+1e4;break;default:r=a+5e3}if(e={callback:e,priorityLevel:o,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,s();else{a=null;var u=n;do{if(u.expirationTime>r){a=u;break}u=u.next}while(u!==n);null===a?a=n:a===n&&(n=e,s()),(r=a.previous).next=a.previous=e,e.next=a,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=o;return function(){var r=o,a=i;o=n,i=t.unstable_now();try{return e.apply(this,arguments)}finally{o=r,i=a,f()}}},t.unstable_getCurrentPriorityLevel=function(){return o},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<a||O())},t.unstable_continueExecution=function(){null!==n&&s()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(16))},function(e,t,n){"use strict";var r=n(47);function o(){}e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";var r=n(50);function o(){}e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.configureStore=s;var o=n(13),i=u(n(53)),a=u(n(54));function u(e){return e&&e.__esModule?e:{default:e}}var l="object"===("undefined"==typeof window?"undefined":r(window))&&(window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:o.compose);function s(){var e=[i.default];return(0,o.createStore)(a.default,{user:{},movies:[]},l(o.applyMiddleware.apply(void 0,e)))}t.default=s},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}t.__esModule=!0;var o=r();o.withExtraArgument=r,t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(13),o=a(n(55)),i=a(n(56));function a(e){return e&&e.__esModule?e:{default:e}}t.default=(0,r.combineReducers)({user:o.default,movies:i.default})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};switch(t.type){case a.default.USER_LOGGED_IN:return r({},t.user);case a.default.USER_LOGGED_OUT:return{};default:return e}};var o,i=n(12),a=(o=i)&&o.__esModule?o:{default:o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments[1];switch(t.type){case i.default.MOVIES_FETCHED:return t.movies;case i.default.MOVIE_CREATED:return[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(e),[t.movie]);case i.default.CLEAR_ALL_MOVIES:return[];default:return e}};var r,o=n(12),i=(r=o)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=y(n(1)),o=n(8),i=y(n(5)),a=n(9),u=y(n(62)),l=y(n(82)),s=y(n(84)),c=y(n(90)),f=y(n(92)),p=y(n(96)),d=y(n(97)),h=y(n(98));function y(e){return e&&e.__esModule?e:{default:e}}var v=function(e){var t=e.location,n=e.isAuthenticated;return r.default.createElement("div",{className:"container"},n&&r.default.createElement(h.default,{location:t}),r.default.createElement(a.Route,{location:t,path:"/",exact:!0,component:u.default}),r.default.createElement(d.default,{location:t,path:"/login",exact:!0,component:l.default}),r.default.createElement(d.default,{location:t,path:"/signup",exact:!0,component:c.default}),r.default.createElement(p.default,{location:t,path:"/dashboard",exact:!0,component:s.default}),r.default.createElement(p.default,{location:t,path:"/dashboard/add",exact:!0,component:f.default}))};v.propTypes={location:i.default.shape({pathname:i.default.string.isRequired}).isRequired,isAuthenticated:i.default.bool.isRequired},t.default=(0,o.connect)(function(e){return{isAuthenticated:!!e.user.email}})(v)},function(e,t,n){"use strict";var r=n(59),o=n(60),i=n(61);e.exports=function(){function e(e,t,n,r,a,u){u!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,a,u,l){if(r(t),!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,i,a,u,l],f=0;(s=new Error(t.replace(/%s/g,function(){return c[f++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=l(n(1)),o=l(n(5)),i=n(9),a=n(8),u=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(11));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){var t=e.isAuthenticated,n=e.logout;return r.default.createElement("div",{className:"start-page row justify-content-md-center"},r.default.createElement("div",{className:"styled-form-block col-sm-6 mt-3 text-center"},t?r.default.createElement("h3",{className:"mb-3"},"Here you can go away(("):r.default.createElement("h3",{className:"mb-3"},"Let's go!!!"),t?r.default.createElement("button",{className:"btn btn-block btn-outline-primary btn-md mt-3",onClick:function(){return n()}},"Logout"):r.default.createElement("div",null,r.default.createElement(i.Link,{className:"btn btn-outline-primary btn-md btn-block ",to:"/login"},"Login"),"or",r.default.createElement(i.Link,{className:"btn btn-outline-primary btn-md btn-block ",to:"/signup"},"Sign Up"))))};s.propTypes={isAuthenticated:o.default.bool.isRequired,logout:o.default.func.isRequired},t.default=(0,a.connect)(function(e){return{isAuthenticated:!!e.user.email}},{logout:u.logout})(s)},function(e,t,n){e.exports=n(64)},function(e,t,n){"use strict";var r=n(6),o=n(30),i=n(66),a=n(18);function u(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var l=u(a);l.Axios=i,l.create=function(e){return u(r.merge(a,e))},l.Cancel=n(34),l.CancelToken=n(80),l.isCancel=n(33),l.all=function(e){return Promise.all(e)},l.spread=n(81),e.exports=l,e.exports.default=l},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(18),o=n(6),i=n(75),a=n(76),u=n(78),l=n(79);function s(e){this.defaults=e,this.interceptors={request:new i,response:new i}}s.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,this.defaults,{method:"get"},e)).method=e.method.toLowerCase(),e.baseURL&&!u(e.url)&&(e.url=l(e.baseURL,e.url));var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(e){s.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){s.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=s},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(32);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(6);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,function(e,t){null!=e&&(r.isArray(e)&&(t+="[]"),r.isArray(e)||(e=[e]),r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))}))}),i=a.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,n){"use strict";var r=n(6);e.exports=function(e){var t,n,o,i={};return e?(r.forEach(e.split("\n"),function(e){o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t&&(i[t]=i[t]?i[t]+", "+n:n)}),i):i}},function(e,t,n){"use strict";var r=n(6);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,i=String(e),a="",u=0,l=r;i.charAt(0|u)||(l="=",u%1);a+=l.charAt(63&t>>8-u%1*8)){if((n=i.charCodeAt(u+=.75))>255)throw new o;t=t<<8|n}return a}},function(e,t,n){"use strict";var r=n(6);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var u=[];u.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(i)&&u.push("domain="+i),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(6);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(6),o=n(77),i=n(33),a=n(18);function u(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return u(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||a.adapter)(e).then(function(t){return u(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(u(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(34);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=c(n(1)),i=c(n(5)),a=n(8),u=n(9),l=c(n(83)),s=n(11);function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.submit=n.submit.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"submit",value:function(e){this.props.login(e)}},{key:"render",value:function(){return o.default.createElement("div",{className:"row justify-content-md-center"},o.default.createElement("div",{className:"styled-form-block col-sm-6 mt-3 text-center"},o.default.createElement("h3",{className:"mb-3"},"Login"),o.default.createElement(l.default,{submit:this.submit}),o.default.createElement("div",{className:"mt-3"},"New user? ",o.default.createElement(u.Link,{to:"/signup"},"Signup!"))))}}]),t}();f.propTypes={login:i.default.func.isRequired},t.default=(0,a.connect)(null,{login:s.login})(f)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=l(n(1)),a=l(n(5)),u=l(n(20));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={data:{email:"",password:""},errors:{}},n.onSubmit=n.onSubmit.bind(n),n.onChange=n.onChange.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default.Component),o(t,[{key:"onChange",value:function(e){var t,n,o;this.setState({data:r({},this.state.data,(t={},n=e.target.name,o=e.target.value,n in t?Object.defineProperty(t,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[n]=o,t))})}},{key:"onSubmit",value:function(e){e.preventDefault();var t=this.validate(this.state.data);this.setState({errors:t}),0===Object.keys(t).length&&this.props.submit(this.state.data)}},{key:"validate",value:function(e){var t={};return-1==e.email.indexOf("@")&&(t.email="Invalid email"),e.password||e.repeat_password||(t.blank_password="Passwords can't be blank"),t}},{key:"render",value:function(){var e=this.state,t=(e.data,e.errors);return i.default.createElement("form",{onSubmit:this.onSubmit},i.default.createElement("div",{className:"form-group text-left"},i.default.createElement("label",{htmlFor:"email"},"Email address"),i.default.createElement("input",{onChange:this.onChange,type:"text",className:"form-control",id:"email",placeholder:"Enter email",name:"email"}),t.email&&i.default.createElement(u.default,{text:t.email})),i.default.createElement("div",{className:"form-group  text-left"},i.default.createElement("label",{htmlFor:"password"},"Password"),i.default.createElement("input",{onChange:this.onChange,type:"password",className:"form-control",id:"password",placeholder:"Password",name:"password"}),t.blank_password&&i.default.createElement(u.default,{text:t.blank_password})),i.default.createElement("button",{type:"submit",className:"btn btn-block btn-primary btn-md mt-3"},"Login"))}}]),t}();s.propTypes={submit:a.default.func.isRequired},t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=f(n(1)),i=f(n(5)),a=n(8),u=n(9),l=f(n(85)),s=f(n(87)),c=n(35);n(88);function f(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={isStartSearch:""},n.onInit=n.onInit.bind(n),n.clearList=n.clearList.bind(n),n.startSearch=n.startSearch.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"componentDidMount",value:function(){this.onInit(this.props)}},{key:"onInit",value:function(e){e.fetchMovies(e.userEmail)}},{key:"startSearch",value:function(e){this.setState({isStartSearch:e.toLowerCase()})}},{key:"clearList",value:function(){this.props.clearList(this.props.userEmail)}},{key:"render",value:function(){var e=this,t=this.props.movies,n=this.state.isStartSearch;return""!=n&&(t=t.filter(function(t){return(0,l.default)(t.title.toLowerCase(),e.state.isStartSearch)})),o.default.createElement("div",{className:"col"},0===t.length&&""==n?o.default.createElement("div",{className:"no-result-block"},o.default.createElement("h3",null,"You haven't any favorite movies!")):o.default.createElement("h2",{className:"mb-3"},"Your favorite movies list!"),o.default.createElement("hr",null),o.default.createElement("div",{className:"actions-dashboard row"},o.default.createElement("div",{className:"col-6"},o.default.createElement(u.NavLink,{className:"btn btn-outline-primary btn-sm mt-1 mr-3",to:"/dashboard/add"}," Add new movie "),t.length>0&&o.default.createElement("button",{className:"btn btn-outline-primary btn-sm mt-1",onClick:this.clearList,type:"button"},"Clear list")),o.default.createElement("div",{className:"col-6"},o.default.createElement(s.default,{startSearch:this.startSearch}))),n&&!t.length&&o.default.createElement("div",{className:"no-result-block"},o.default.createElement("h3",null,"There are no result for showing")),t.length>0&&o.default.createElement("table",{className:"table table-sm mt-3"},o.default.createElement("thead",null,t.map(function(e,t){if(0==t)return o.default.createElement("tr",{key:t},Object.keys(e).map(function(e,t){return o.default.createElement("th",{scope:"col",key:t}," ",e)}))})),o.default.createElement("tbody",null,t.map(function(e,t){return o.default.createElement("tr",{key:t,className:"movie-item"},Object.keys(e).map(function(t,n){return o.default.createElement("td",{key:n,className:n}," ",e[t]?e[t]:"-")}))}))))}}]),t}();p.propTypes={userEmail:i.default.string.isRequired,fetchMovies:i.default.func.isRequired,clearList:i.default.func.isRequired,movies:i.default.array.isRequired},t.default=(0,a.connect)(function(e){return{userEmail:e.user.email,movies:e.movies}},{fetchMovies:c.fetchMovies,clearList:c.clearList})(p)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,r.default)(e),e.indexOf((0,o.default)(t))>=0};var r=i(n(21)),o=i(n(86));function i(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function(e){"object"===(void 0===e?"undefined":r(e))&&null!==e?e="function"==typeof e.toString?e.toString():"[object Object]":(null==e||isNaN(e)&&!e.length)&&(e="");return String(e)},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(1)),i=a(n(5));function a(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={searchText:""},n.onChange=n.onChange.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"onChange",value:function(e){var t=this;this.setState({searchText:e.target.value},function(){t.props.startSearch(t.state.searchText)})}},{key:"render",value:function(){return o.default.createElement("div",{className:"input-group pull-right input-group-sm"},o.default.createElement("input",{onChange:this.onChange,type:"text",className:"form-control",placeholder:"Search by movie's title",name:"searchText"}))}}]),t}();u.propTypes={startSearch:i.default.func.isRequired},t.default=u},function(e,t,n){"use strict";(function(t){const r={enabled:!0,visible:!0,styles:{},keys:{}};"FORCE_COLOR"in t.env&&(r.enabled="0"!==t.env.FORCE_COLOR);const o=(e,t,n)=>{let{open:r,close:o,regex:i}=e;return t=r+(t.includes(o)?t.replace(i,o+r):t)+o,n?t.replace(/\r?\n/g,`${o}$&${r}`):t},i=(e,t,n)=>{r.styles[e]=(e=>(e.open=`[${e.codes[0]}m`,e.close=`[${e.codes[1]}m`,e.regex=new RegExp(`\\u001b\\[${e.codes[1]}m`,"g"),e))({name:e,codes:t}),(r.keys[n]||(r.keys[n]=[])).push(e),Reflect.defineProperty(r,e,{get(){let t=e=>((e,t)=>{if(""===e||null==e)return"";if(!1===r.enabled)return e;if(!1===r.visible)return"";let n=""+e,i=n.includes("\n"),a=t.length;for(;a-- >0;)n=o(r.styles[t[a]],n,i);return n})(e,t.stack);return Reflect.setPrototypeOf(t,r),t.stack=this.stack?this.stack.concat(e):[e],t}})};i("reset",[0,0],"modifier"),i("bold",[1,22],"modifier"),i("dim",[2,22],"modifier"),i("italic",[3,23],"modifier"),i("underline",[4,24],"modifier"),i("inverse",[7,27],"modifier"),i("hidden",[8,28],"modifier"),i("strikethrough",[9,29],"modifier"),i("black",[30,39],"color"),i("red",[31,39],"color"),i("green",[32,39],"color"),i("yellow",[33,39],"color"),i("blue",[34,39],"color"),i("magenta",[35,39],"color"),i("cyan",[36,39],"color"),i("white",[37,39],"color"),i("gray",[90,39],"color"),i("grey",[90,39],"color"),i("bgBlack",[40,49],"bg"),i("bgRed",[41,49],"bg"),i("bgGreen",[42,49],"bg"),i("bgYellow",[43,49],"bg"),i("bgBlue",[44,49],"bg"),i("bgMagenta",[45,49],"bg"),i("bgCyan",[46,49],"bg"),i("bgWhite",[47,49],"bg"),i("blackBright",[90,39],"bright"),i("redBright",[91,39],"bright"),i("greenBright",[92,39],"bright"),i("yellowBright",[93,39],"bright"),i("blueBright",[94,39],"bright"),i("magentaBright",[95,39],"bright"),i("cyanBright",[96,39],"bright"),i("whiteBright",[97,39],"bright"),i("bgBlackBright",[100,49],"bgBright"),i("bgRedBright",[101,49],"bgBright"),i("bgGreenBright",[102,49],"bgBright"),i("bgYellowBright",[103,49],"bgBright"),i("bgBlueBright",[104,49],"bgBright"),i("bgMagentaBright",[105,49],"bgBright"),i("bgCyanBright",[106,49],"bgBright"),i("bgWhiteBright",[107,49],"bgBright");const a=r.ansiRegex=/\u001b\[\d+m/gm;r.hasColor=r.hasAnsi=(e=>(a.lastIndex=0,!!e&&"string"==typeof e&&a.test(e))),r.unstyle=(e=>(a.lastIndex=0,"string"==typeof e?e.replace(a,""):e)),r.none=r.clear=r.noop=(e=>e),r.stripColor=r.unstyle,r.symbols=n(89),r.define=i,e.exports=r}).call(this,n(19))},function(e,t,n){"use strict";(function(t){const n="win32"===t.platform,r="linux"===t.platform,o={bullet:"•",check:"√",cross:"×",ellipsis:"...",heart:"❤",info:"i",line:"─",middot:"·",minus:"－",plus:"＋",question:"?",questionSmall:"﹖",pointer:">",pointerSmall:"»",warning:"‼"},i={ballotCross:"✘",bullet:"•",check:"✔",cross:"✖",ellipsis:"…",heart:"❤",info:"ℹ",line:"─",middot:"·",minus:"－",plus:"＋",question:"?",questionFull:"？",questionSmall:"﹖",pointer:r?"▸":"❯",pointerSmall:r?"‣":"›",warning:"⚠"};e.exports=n?o:i,Reflect.defineProperty(e.exports,"windows",{enumerable:!1,value:o}),Reflect.defineProperty(e.exports,"other",{enumerable:!1,value:i})}).call(this,n(19))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=c(n(1)),i=c(n(5)),a=n(8),u=n(9),l=c(n(91)),s=n(11);function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.submit=n.submit.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"submit",value:function(e){this.props.signup(e)}},{key:"render",value:function(){return o.default.createElement("div",{className:"row justify-content-md-center"},o.default.createElement("div",{className:"styled-form-block col-sm-6 mt-3 text-center"},o.default.createElement("h3",{className:"mb-3"},"Signup"),o.default.createElement(l.default,{submit:this.submit}),o.default.createElement("div",{className:"mt-3"},"Already signup go to ",o.default.createElement(u.Link,{to:"/login"},"Login page!"))))}}]),t}();f.propTypes={signup:i.default.func.isRequired},t.default=(0,a.connect)(null,{signup:s.signup})(f)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=l(n(1)),a=l(n(5)),u=l(n(20));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={data:{email:"",password:"",repeat_password:""},errors:{}},n.onSubmit=n.onSubmit.bind(n),n.onChange=n.onChange.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default.Component),o(t,[{key:"onChange",value:function(e){var t,n,o;this.setState({data:r({},this.state.data,(t={},n=e.target.name,o=e.target.value,n in t?Object.defineProperty(t,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[n]=o,t))})}},{key:"onSubmit",value:function(e){e.preventDefault();var t=this.validate(this.state.data);this.setState({errors:t}),0===Object.keys(t).length&&this.props.submit(this.state.data)}},{key:"validate",value:function(e){var t={};return-1==e.email.indexOf("@")&&(t.email="Invalid email"),e.password||e.repeat_password||(t.blank_password="Passwords can't be blank"),e.password!=e.repeat_password&&(t.unmatch_password="Passwords don't match"),t}},{key:"render",value:function(){var e=this.state,t=(e.data,e.errors);e.loading;return i.default.createElement("form",{onSubmit:this.onSubmit},i.default.createElement("div",{className:"form-group text-left"},i.default.createElement("label",{htmlFor:"email"},"Email address"),i.default.createElement("input",{onChange:this.onChange,type:"text",className:"form-control",id:"email",placeholder:"Enter email",name:"email"}),t.email&&i.default.createElement(u.default,{text:t.email})),i.default.createElement("div",{className:"form-group text-left"},i.default.createElement("label",{htmlFor:"first_password"},"Password"),i.default.createElement("input",{onChange:this.onChange,type:"password",className:"form-control",id:"first_password",placeholder:"Password",name:"password"}),t.blank_password&&i.default.createElement(u.default,{text:t.blank_password})),i.default.createElement("div",{className:"form-group text-left"},i.default.createElement("label",{htmlFor:"repeat_password"},"Password"),i.default.createElement("input",{onChange:this.onChange,type:"password",className:"form-control",id:"repeat_password",placeholder:"Repeat Password",name:"repeat_password"}),t.blank_password&&i.default.createElement(u.default,{text:t.blank_password}),t.unmatch_password&&i.default.createElement(u.default,{text:t.unmatch_password})),i.default.createElement("button",{type:"submit",className:"btn btn-block btn-primary btn-md mt-3"},"Submit"))}}]),t}();s.propTypes={submit:a.default.func.isRequired},t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(1)),i=s(n(5)),a=n(8),u=s(n(93)),l=n(35);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.submit=n.submit.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"submit",value:function(e){var t=this;e.userEmail=this.props.userEmail,this.props.addNewMovie(e).then(function(){return t.props.history.push("/dashboard")})}},{key:"render",value:function(){return o.default.createElement("div",{className:"row justify-content-md-center"},o.default.createElement("div",{className:"styled-form-block col-sm-6 mt-3 text-center"},o.default.createElement("h3",{className:"mb-3"},"Add new movie"),o.default.createElement(u.default,{submit:this.submit})))}}]),t}();c.propTypes={history:i.default.shape({push:i.default.func.isRequired}).isRequired,userEmail:i.default.string.isRequired,addNewMovie:i.default.func.isRequired},t.default=(0,a.connect)(function(e){return{userEmail:e.user.email}},{addNewMovie:l.addNewMovie})(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=c(n(1)),a=c(n(5)),u=c(n(94)),l=c(n(95)),s=c(n(20));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={data:{title:"",release:"",budget:""},errors:{}},n.onSubmit=n.onSubmit.bind(n),n.onChange=n.onChange.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default.Component),o(t,[{key:"onChange",value:function(e){var t,n,o;this.setState({data:r({},this.state.data,(t={},n=e.target.name,o=e.target.value,n in t?Object.defineProperty(t,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[n]=o,t))})}},{key:"onSubmit",value:function(e){e.preventDefault();var t=this.validate(this.state.data);this.setState({errors:t}),0===Object.keys(t).length&&this.props.submit(this.state.data)}},{key:"validate",value:function(e){var t={};return e.title||(t.title="Title can't be blank"),(0,u.default)(e.release)||(0,l.default)(e.release)||(t.release="Required only digits"),t}},{key:"render",value:function(){var e=this.state.errors;return i.default.createElement("form",{onSubmit:this.onSubmit},i.default.createElement("div",{className:"form-group text-left"},i.default.createElement("label",{htmlFor:"movieTitle"},"Movie Title"),i.default.createElement("input",{onChange:this.onChange,type:"text",className:"form-control",id:"movieTitle",placeholder:"Enter title",name:"title"}),e.title&&i.default.createElement(s.default,{text:e.title})),i.default.createElement("div",{className:"form-group text-left"},i.default.createElement("label",{htmlFor:"movieRelease"},"Movie Release"),i.default.createElement("input",{onChange:this.onChange,type:"text",className:"form-control",id:"movieRelease",placeholder:"Movie Release",name:"release"}),e.release&&i.default.createElement(s.default,{text:e.release})),i.default.createElement("div",{className:"form-group text-left"},i.default.createElement("label",{htmlFor:"movieBudget"},"Movie Budget"),i.default.createElement("input",{onChange:this.onChange,type:"text",className:"form-control",id:"movieBudget",placeholder:"Movie Budget",name:"budget"})),i.default.createElement("button",{type:"submit",className:"btn btn-block btn-primary btn-md mt-3"},"Add new movie"))}}]),t}();f.propTypes={submit:a.default.func.isRequired},t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){(0,i.default)(e);var n=(t=t||{}).hasOwnProperty("allow_leading_zeroes")&&!t.allow_leading_zeroes?a:u,r=!t.hasOwnProperty("min")||e>=t.min,o=!t.hasOwnProperty("max")||e<=t.max,l=!t.hasOwnProperty("lt")||e<t.lt,s=!t.hasOwnProperty("gt")||e>t.gt;return n.test(e)&&r&&o&&l&&s};var r,o=n(21),i=(r=o)&&r.__esModule?r:{default:r};var a=/^(?:[-+]?(?:0|[1-9][0-9]*))$/,u=/^[-+]?[0-9]+$/;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,i.default)(e),0===e.length};var r,o=n(21),i=(r=o)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=l(n(1)),i=l(n(5)),a=n(8),u=n(9);function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){var t=e.isAuthenticated,n=e.component,i=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["isAuthenticated","component"]);return o.default.createElement(u.Route,r({},i,{render:function(e){return t?o.default.createElement(n,e):o.default.createElement(u.Redirect,{to:"/"})}}))};s.propTypes={isAuthenticated:i.default.bool.isRequired,component:i.default.func.isRequired},t.default=(0,a.connect)(function(e){return{isAuthenticated:!!e.user.email}})(s)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=l(n(1)),i=l(n(5)),a=n(8),u=n(9);function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){var t=e.isAuthenticated,n=e.component,i=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["isAuthenticated","component"]);return o.default.createElement(u.Route,r({},i,{render:function(e){return t?o.default.createElement(u.Redirect,{to:"/dashboard"}):o.default.createElement(n,e)}}))};s.propTypes={component:i.default.func.isRequired,isAuthenticated:i.default.bool.isRequired},t.default=(0,a.connect)(function(e){return{isAuthenticated:!!e.user.email}})(s)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=l(n(1)),o=l(n(5)),i=n(8),a=n(9),u=n(11);function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){var t=e.location,n=e.logout,o=e.user;return r.default.createElement("section",{className:"col mt-3"},"/"!=t.pathname&&r.default.createElement("span",null,r.default.createElement(a.NavLink,{to:"/"},"Go Home")),r.default.createElement("span",{className:"col-sm-3"},o.email),"/"!=t.pathname&&r.default.createElement("span",{className:"col-sm-3 text-center"},r.default.createElement("button",{className:"btn btn-outline-primary btn-sm mt-1",onClick:n},"LogOut")),"/dashboard"!=t.pathname&&r.default.createElement("span",{className:"col-sm-3"},r.default.createElement(a.NavLink,{to:"/dashboard"},"Show movies list")),r.default.createElement("hr",null))};s.propTypes={logout:o.default.func.isRequired,user:o.default.shape({email:o.default.string.isRequired}).isRequired},t.default=(0,i.connect)(function(e){return{user:e.user}},{logout:u.logout})(s)},function(e,t,n){var r=n(100);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(101)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),u=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),l=null,s=0,c=[],f=n(102);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(w(r.parts[a],t))}else{var u=[];for(a=0;a<r.parts.length;a++)u.push(w(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:u}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],u={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(u):n.push(r[a]={id:a,parts:[u]})}return n}function h(e,t){var n=u(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=u(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function y(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function v(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),m(t,e.attrs),h(e,t),t}function m(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function w(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var a=s++;n=l||(l=v(t)),r=_.bind(null,n,a,!1),o=_.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",m(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),u=e.href;e.href=URL.createObjectURL(a),u&&URL.revokeObjectURL(u)}.bind(null,n,t),o=function(){y(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){y(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(u=i[a.id]).refs--,r.push(u)}e&&p(d(e,t),t);for(o=0;o<r.length;o++){var u;if(0===(u=r[o]).refs){for(var l=0;l<u.parts.length;l++)u.parts[l]();delete i[u.id]}}}};var b,E=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function _(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=E(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludmFyaWFudC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3dhcm5pbmcvd2FybmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvd3JhcE1hcFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tZXJnZVByb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9jb25uZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvQnJvd3NlclJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9IYXNoUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvUGF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL0xvY2F0aW9uVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlTWVtb3J5SGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9ET01VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVIYXNoSGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9NZW1vcnlSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9OYXZMaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUHJvbXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1Byb21wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL2dlbmVyYXRlUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1N0YXRpY1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1N3aXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvbWF0Y2hQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvd2l0aFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy93aXRoUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX292ZXJBcmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0UHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNPYmplY3RMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNQbGFpbk9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9ucy9hdXRoLmpzIiwid2VicGFjazovLy8uL3NyYy9jb25zdGFudHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9jcmVhdGVTdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvY29tYmluZVJlZHVjZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9iaW5kQWN0aW9uQ3JlYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL2NvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL2FwcGx5TWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L1BhdGhVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbWVzc2FnZXMvRXJyb3JNc2cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvdXRpbC9hc3NlcnRTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZhbHVlLWVxdWFsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9Mb2NhdGlvblV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L0RPTVV0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9ucy9tb3ZpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2ZyZWVHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvY3JlYXRlQnJvd3Nlckhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvY3JlYXRlSGFzaEhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtdGh1bmsvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1Y2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvdXNlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvbW92aWVzLmpzIiwid2VicGFjazovLy8uL3NyYy9BcHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3BhZ2VzL0hvbWVQYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idG9hLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9wYWdlcy9Mb2dpblBhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZm9ybXMvTG9naW5Gb3JtLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3BhZ2VzL0Rhc2hib2FyZFBhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvY29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvdXRpbC90b1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9mb3Jtcy9TZWFyY2hNb3ZpZXNJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW5zaS1jb2xvcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fuc2ktY29sb3JzL3N5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvcGFnZXMvU2lnbnVwUGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9mb3Jtcy9TaWdudXBGb3JtLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3BhZ2VzL05ld01vdmllUGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9mb3Jtcy9BZGROZXdNb3ZpZUZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNJbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNFbXB0eS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9yb3V0ZXMvVXNlclJvdXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3JvdXRlcy9HdWVzdFJvdXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL25hdmlnYXRpb24vVG9wTmF2QmFyLmpzIiwid2VicGFjazovLy8uL3NyYy9zY3NzL0FwcC5zY3NzP2VhZGUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjb25kaXRpb24iLCJmb3JtYXQiLCJhIiwiYiIsImUiLCJmIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCJFcnJvciIsImFyZ3MiLCJhcmdJbmRleCIsInJlcGxhY2UiLCJmcmFtZXNUb1BvcCIsIndhcm5pbmciLCJpc0J1ZmZlciIsInRvU3RyaW5nIiwiaXNBcnJheSIsInZhbCIsImlzT2JqZWN0IiwiaXNGdW5jdGlvbiIsImZvckVhY2giLCJvYmoiLCJmbiIsImxlbmd0aCIsImlzQXJyYXlCdWZmZXIiLCJpc0Zvcm1EYXRhIiwiRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnVmZmVyIiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzVW5kZWZpbmVkIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIm1lcmdlIiwicmVzdWx0IiwiYXNzaWduVmFsdWUiLCJhcmd1bWVudHMiLCJleHRlbmQiLCJ0aGlzQXJnIiwidHJpbSIsInN0ciIsInN1YnNjcmlwdGlvblNoYXBlIiwicHJvcF90eXBlc19kZWZhdWx0Iiwic2hhcGUiLCJ0cnlTdWJzY3JpYmUiLCJmdW5jIiwiaXNSZXF1aXJlZCIsInRyeVVuc3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsImlzU3Vic2NyaWJlZCIsInN0b3JlU2hhcGUiLCJzdWJzY3JpYmUiLCJkaXNwYXRjaCIsImdldFN0YXRlIiwiY3JlYXRlUHJvdmlkZXIiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJzdG9yZUtleSIsInN1YnNjcmlwdGlvbktleSIsIlByb3ZpZGVyIiwiX0NvbXBvbmVudCIsInByb3BzIiwiY29udGV4dCIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwiX3RoaXMiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInN0b3JlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY29uc3RydWN0b3IiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2luaGVyaXRzIiwiZ2V0Q2hpbGRDb250ZXh0IiwiX3JlZiIsInJlbmRlciIsInJlYWN0Iiwib25seSIsImNoaWxkcmVuIiwicHJvcFR5cGVzIiwiZWxlbWVudCIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29tcG9uZW50c19Qcm92aWRlciIsIkNMRUFSRUQiLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiU3Vic2NyaXB0aW9uIiwicGFyZW50U3ViIiwib25TdGF0ZUNoYW5nZSIsIlN1YnNjcmlwdGlvbl9jbGFzc0NhbGxDaGVjayIsInVuc3Vic2NyaWJlIiwibGlzdGVuZXJzIiwiYWRkTmVzdGVkU3ViIiwibGlzdGVuZXIiLCJCb29sZWFuIiwiY3VycmVudCIsIm5leHQiLCJjbGVhciIsInNsaWNlIiwicHVzaCIsInNwbGljZSIsImluZGV4T2YiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsInNvdXJjZSIsImhvdFJlbG9hZGluZ1ZlcnNpb24iLCJkdW1teVN0YXRlIiwibm9vcCIsImNvbm5lY3RBZHZhbmNlZCIsInNlbGVjdG9yRmFjdG9yeSIsIl9jb250ZXh0VHlwZXMiLCJfY2hpbGRDb250ZXh0VHlwZXMiLCJfcmVmJGdldERpc3BsYXlOYW1lIiwiZ2V0RGlzcGxheU5hbWUiLCJfcmVmJG1ldGhvZE5hbWUiLCJtZXRob2ROYW1lIiwiX3JlZiRyZW5kZXJDb3VudFByb3AiLCJyZW5kZXJDb3VudFByb3AiLCJfcmVmJHNob3VsZEhhbmRsZVN0YXQiLCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMiLCJfcmVmJHN0b3JlS2V5IiwiX3JlZiR3aXRoUmVmIiwid2l0aFJlZiIsImNvbm5lY3RPcHRpb25zIiwia2V5cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInZlcnNpb24iLCJjb250ZXh0VHlwZXMiLCJXcmFwcGVkQ29tcG9uZW50IiwiYnJvd3Nlcl9kZWZhdWx0IiwiSlNPTiIsInN0cmluZ2lmeSIsIndyYXBwZWRDb21wb25lbnROYW1lIiwiZGlzcGxheU5hbWUiLCJzZWxlY3RvckZhY3RvcnlPcHRpb25zIiwiQ29ubmVjdCIsImNvbm5lY3RBZHZhbmNlZF9jbGFzc0NhbGxDaGVjayIsImNvbm5lY3RBZHZhbmNlZF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic3RhdGUiLCJyZW5kZXJDb3VudCIsInByb3BzTW9kZSIsInNldFdyYXBwZWRJbnN0YW5jZSIsImluaXRTZWxlY3RvciIsImluaXRTdWJzY3JpcHRpb24iLCJjb25uZWN0QWR2YW5jZWRfaW5oZXJpdHMiLCJfcmVmMiIsInN1YnNjcmlwdGlvbiIsImNvbXBvbmVudERpZE1vdW50Iiwic2VsZWN0b3IiLCJydW4iLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJmb3JjZVVwZGF0ZSIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImdldFdyYXBwZWRJbnN0YW5jZSIsIndyYXBwZWRJbnN0YW5jZSIsInJlZiIsInNvdXJjZVNlbGVjdG9yIiwibWFrZVNlbGVjdG9yU3RhdGVmdWwiLCJjb21wb25lbnREaWRVcGRhdGUiLCJub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGUiLCJzZXRTdGF0ZSIsImFkZEV4dHJhUHJvcHMiLCJ3aXRoRXh0cmFzIiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfY2pzX2RlZmF1bHQiLCJoYXNPd24iLCJpcyIsIngiLCJ5Iiwic2hhbGxvd0VxdWFsIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwid3JhcE1hcFRvUHJvcHNDb25zdGFudCIsImdldENvbnN0YW50Iiwib3B0aW9ucyIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsImNvbm5lY3RfbWFwRGlzcGF0Y2hUb1Byb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwiZXMiLCJjb25uZWN0X21hcFN0YXRlVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsIm1lcmdlUHJvcHNfZXh0ZW5kcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJjb25uZWN0X21lcmdlUHJvcHMiLCJtZXJnZVByb3BzIiwicHVyZSIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibWVyZ2VkUHJvcHMiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsIm5leHRTdGF0ZSIsIm5leHRPd25Qcm9wcyIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiaW5pdE1hcFN0YXRlVG9Qcm9wcyIsImluaXRNYXBEaXNwYXRjaFRvUHJvcHMiLCJpbml0TWVyZ2VQcm9wcyIsInNlbGVjdG9yRmFjdG9yeV9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImNvbm5lY3RfZXh0ZW5kcyIsIm1hdGNoIiwiYXJnIiwiZmFjdG9yaWVzIiwic3RyaWN0RXF1YWwiLCJjb25uZWN0X2Nvbm5lY3QiLCJfcmVmJGNvbm5lY3RIT0MiLCJjb25uZWN0SE9DIiwiX3JlZiRtYXBTdGF0ZVRvUHJvcHNGIiwibWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtYXBEaXNwYXRjaFRvUHJvIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtZXJnZVByb3BzRmFjdG9yIiwibWVyZ2VQcm9wc0ZhY3RvcmllcyIsIl9yZWYkc2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIkcHVyZSIsIl9yZWYyJGFyZVN0YXRlc0VxdWFsIiwiX3JlZjIkYXJlT3duUHJvcHNFcXVhIiwiX3JlZjIkYXJlU3RhdGVQcm9wc0VxIiwiX3JlZjIkYXJlTWVyZ2VkUHJvcHNFIiwiZXh0cmFPcHRpb25zIiwiY29ubmVjdF9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIl9fd2VicGFja19leHBvcnRzX18iLCJSb3V0ZXJfUm91dGVyIiwiX1JlYWN0JENvbXBvbmVudCIsIlJvdXRlciIsIl90ZW1wIiwiX2xlbiIsIkFycmF5IiwiX2tleSIsImFwcGx5IiwiY29uY2F0IiwiY29tcHV0ZU1hdGNoIiwiaGlzdG9yeSIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJyb3V0ZXIiLCJyb3V0ZSIsInBhdGgiLCJ1cmwiLCJwYXJhbXMiLCJpc0V4YWN0IiwiY29tcG9uZW50V2lsbE1vdW50IiwiX3RoaXMyIiwiX3Byb3BzIiwiaW52YXJpYW50X2Jyb3dzZXJfZGVmYXVsdCIsInJlYWN0X2RlZmF1bHQiLCJDaGlsZHJlbiIsImNvdW50IiwidW5saXN0ZW4iLCJsaXN0ZW4iLCJ3YXJuaW5nX2RlZmF1bHQiLCJDb21wb25lbnQiLCJub2RlIiwiZXNfUm91dGVyIiwicmVhY3Rfcm91dGVyX2RvbV9lc19Sb3V0ZXIiLCJCcm93c2VyUm91dGVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJCcm93c2VyUm91dGVyX0Jyb3dzZXJSb3V0ZXIiLCJCcm93c2VyUm91dGVyIiwiQnJvd3NlclJvdXRlcl9jbGFzc0NhbGxDaGVjayIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5X2RlZmF1bHQiLCJCcm93c2VyUm91dGVyX2luaGVyaXRzIiwiY3JlYXRlRWxlbWVudCIsImJhc2VuYW1lIiwic3RyaW5nIiwiZm9yY2VSZWZyZXNoIiwiYm9vbCIsImdldFVzZXJDb25maXJtYXRpb24iLCJrZXlMZW5ndGgiLCJudW1iZXIiLCJlc19Ccm93c2VyUm91dGVyIiwiSGFzaFJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiSGFzaFJvdXRlcl9IYXNoUm91dGVyIiwiSGFzaFJvdXRlciIsIkhhc2hSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJjcmVhdGVIYXNoSGlzdG9yeV9kZWZhdWx0IiwiSGFzaFJvdXRlcl9pbmhlcml0cyIsImhhc2hUeXBlIiwib25lT2YiLCJlc19IYXNoUm91dGVyIiwiTGlua19leHRlbmRzIiwiTGlua19wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiaXNNb2RpZmllZEV2ZW50IiwiZXZlbnQiLCJtZXRhS2V5IiwiYWx0S2V5IiwiY3RybEtleSIsInNoaWZ0S2V5IiwiTGlua19MaW5rIiwiTGluayIsIkxpbmtfY2xhc3NDYWxsQ2hlY2siLCJoYW5kbGVDbGljayIsIm9uQ2xpY2siLCJkZWZhdWx0UHJldmVudGVkIiwiYnV0dG9uIiwicHJldmVudERlZmF1bHQiLCJfdGhpcyRwcm9wcyIsInRvIiwiTGlua19pbmhlcml0cyIsImlubmVyUmVmIiwiaHJlZiIsImNyZWF0ZUhyZWYiLCJvbmVPZlR5cGUiLCJkZWZhdWx0UHJvcHMiLCJlc19MaW5rIiwiY3JlYXRlUGF0aCIsInNlYXJjaCIsImhhc2giLCJjaGFyQXQiLCJMb2NhdGlvblV0aWxzX2V4dGVuZHMiLCJMb2NhdGlvblV0aWxzX2NyZWF0ZUxvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic3Vic3RyIiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsInJlc29sdmVfcGF0aG5hbWUiLCJMb2NhdGlvblV0aWxzX2xvY2F0aW9uc0FyZUVxdWFsIiwidmFsdWVfZXF1YWwiLCJlc19jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiYWN0aW9uIiwiY2FsbGJhY2siLCJhcHBlbmRMaXN0ZW5lciIsImlzQWN0aXZlIiwiZmlsdGVyIiwiaXRlbSIsIm5vdGlmeUxpc3RlbmVycyIsImNyZWF0ZU1lbW9yeUhpc3RvcnlfdHlwZW9mIiwiaXRlcmF0b3IiLCJjcmVhdGVNZW1vcnlIaXN0b3J5X2V4dGVuZHMiLCJjbGFtcCIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwiTWF0aCIsIm1pbiIsIm1heCIsImVzX2NyZWF0ZU1lbW9yeUhpc3RvcnkiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJpbml0aWFsSW5kZXgiLCJfcHJvcHMka2V5TGVuZ3RoIiwidHJhbnNpdGlvbk1hbmFnZXIiLCJlbnRyaWVzIiwiY3JlYXRlS2V5IiwicmFuZG9tIiwiaW5kZXgiLCJtYXAiLCJlbnRyeSIsImdvIiwibmV4dEluZGV4Iiwib2siLCJuZXh0RW50cmllcyIsImdvQmFjayIsImdvRm9yd2FyZCIsImNhbkdvIiwiYmxvY2siLCJNZW1vcnlSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIk1lbW9yeVJvdXRlcl9NZW1vcnlSb3V0ZXIiLCJNZW1vcnlSb3V0ZXIiLCJNZW1vcnlSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJNZW1vcnlSb3V0ZXJfaW5oZXJpdHMiLCJhcnJheSIsInJlYWN0X3JvdXRlcl9kb21fZXNfTWVtb3J5Um91dGVyIiwicGF0dGVybkNhY2hlIiwiY2FjaGVDb3VudCIsImVzX21hdGNoUGF0aCIsInBhcmVudCIsIl9vcHRpb25zIiwiX29wdGlvbnMkZXhhY3QiLCJleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsInN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsInNlbnNpdGl2ZSIsIl9jb21waWxlUGF0aCIsInBhdHRlcm4iLCJjYWNoZUtleSIsImVuZCIsImNhY2hlIiwiY29tcGlsZWRQYXR0ZXJuIiwicmUiLCJwYXRoX3RvX3JlZ2V4cF9kZWZhdWx0IiwibWF0Y2hQYXRoX2NvbXBpbGVQYXRoIiwiZXhlYyIsInZhbHVlcyIsInJlZHVjZSIsIm1lbW8iLCJSb3V0ZV9leHRlbmRzIiwiUm91dGVfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJvdXRlX2lzRW1wdHlDaGlsZHJlbiIsIlJvdXRlX1JvdXRlIiwiUm91dGUiLCJSb3V0ZV9jbGFzc0NhbGxDaGVjayIsIlJvdXRlX2luaGVyaXRzIiwiY29tcHV0ZWRNYXRjaCIsImNvbXBvbmVudCIsIm5leHRDb250ZXh0IiwiX2NvbnRleHQkcm91dGVyIiwic3RhdGljQ29udGV4dCIsImVzX1JvdXRlIiwicmVhY3Rfcm91dGVyX2RvbV9lc19Sb3V0ZSIsIk5hdkxpbmtfZXh0ZW5kcyIsIk5hdkxpbmtfdHlwZW9mIiwiTmF2TGlua19OYXZMaW5rIiwiYWN0aXZlQ2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJzdHlsZSIsImdldElzQWN0aXZlIiwiYXJpYUN1cnJlbnQiLCJyZXN0IiwiTmF2TGlua19vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImpvaW4iLCJhcmlhLWN1cnJlbnQiLCJlc19OYXZMaW5rIiwiUHJvbXB0X1Byb21wdCIsIlByb21wdCIsIlByb21wdF9jbGFzc0NhbGxDaGVjayIsIlByb21wdF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUHJvbXB0X2luaGVyaXRzIiwiZW5hYmxlIiwibWVzc2FnZSIsInVuYmxvY2siLCJkaXNhYmxlIiwid2hlbiIsInJlYWN0X3JvdXRlcl9kb21fZXNfUHJvbXB0IiwiZ2VuZXJhdGVQYXRoX3BhdHRlcm5DYWNoZSIsImdlbmVyYXRlUGF0aF9jYWNoZUNvdW50IiwiZXNfZ2VuZXJhdGVQYXRoIiwiY29tcGlsZWRHZW5lcmF0b3IiLCJjb21waWxlIiwiZ2VuZXJhdGVQYXRoX2NvbXBpbGVHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJwcmV0dHkiLCJSZWRpcmVjdF9leHRlbmRzIiwiUmVkaXJlY3RfUmVkaXJlY3QiLCJSZWRpcmVjdCIsIlJlZGlyZWN0X2NsYXNzQ2FsbENoZWNrIiwiUmVkaXJlY3RfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZGlyZWN0X2luaGVyaXRzIiwiaXNTdGF0aWMiLCJwZXJmb3JtIiwicHJldlByb3BzIiwicHJldlRvIiwibmV4dFRvIiwiY29tcHV0ZVRvIiwiZnJvbSIsInJlYWN0X3JvdXRlcl9kb21fZXNfUmVkaXJlY3QiLCJTdGF0aWNSb3V0ZXJfZXh0ZW5kcyIsIlN0YXRpY1JvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiU3RhdGljUm91dGVyX2FkZExlYWRpbmdTbGFzaCIsImFkZEJhc2VuYW1lIiwiU3RhdGljUm91dGVyX3N0cmlwQmFzZW5hbWUiLCJiYXNlIiwiU3RhdGljUm91dGVyX2NyZWF0ZVVSTCIsIlN0YXRpY1JvdXRlcl9zdGF0aWNIYW5kbGVyIiwiU3RhdGljUm91dGVyX1N0YXRpY1JvdXRlciIsIlN0YXRpY1JvdXRlciIsIlN0YXRpY1JvdXRlcl9jbGFzc0NhbGxDaGVjayIsImhhbmRsZVB1c2giLCJoYW5kbGVSZXBsYWNlIiwiX3RoaXMkcHJvcHMyIiwiaGFuZGxlTGlzdGVuIiwiaGFuZGxlQmxvY2siLCJTdGF0aWNSb3V0ZXJfaW5oZXJpdHMiLCJTdGF0aWNSb3V0ZXJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1N0YXRpY1JvdXRlciIsIlN3aXRjaF9Td2l0Y2giLCJTd2l0Y2giLCJTd2l0Y2hfY2xhc3NDYWxsQ2hlY2siLCJTd2l0Y2hfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlN3aXRjaF9pbmhlcml0cyIsImNoaWxkIiwiaXNWYWxpZEVsZW1lbnQiLCJfZWxlbWVudCRwcm9wcyIsInBhdGhQcm9wIiwiY2xvbmVFbGVtZW50IiwicmVhY3Rfcm91dGVyX2RvbV9lc19Td2l0Y2giLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX21hdGNoUGF0aCIsIndpdGhSb3V0ZXJfZXh0ZW5kcyIsInJlYWN0X3JvdXRlcl9kb21fZXNfd2l0aFJvdXRlciIsIkMiLCJ3cmFwcGVkQ29tcG9uZW50UmVmIiwicmVtYWluaW5nUHJvcHMiLCJ3aXRoUm91dGVyX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwicm91dGVDb21wb25lbnRQcm9wcyIsImZyZWVTZWxmIiwiX1N5bWJvbCIsIl9mcmVlR2xvYmFsIiwiRnVuY3Rpb24iLCJvYmplY3RQcm90byIsIl9nZXRSYXdUYWdfaGFzT3duUHJvcGVydHkiLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsInN5bVRvU3RyaW5nVGFnIiwiX2dldFJhd1RhZyIsImlzT3duIiwidGFnIiwidW5tYXNrZWQiLCJfb2JqZWN0VG9TdHJpbmdfbmF0aXZlT2JqZWN0VG9TdHJpbmciLCJfb2JqZWN0VG9TdHJpbmciLCJudWxsVGFnIiwidW5kZWZpbmVkVGFnIiwiX2Jhc2VHZXRUYWdfc3ltVG9TdHJpbmdUYWciLCJfYmFzZUdldFRhZyIsIl9nZXRQcm90b3R5cGUiLCJ0cmFuc2Zvcm0iLCJfb3ZlckFyZyIsImdldFByb3RvdHlwZU9mIiwibG9kYXNoX2VzX2lzT2JqZWN0TGlrZSIsIm9iamVjdFRhZyIsImZ1bmNQcm90byIsImlzUGxhaW5PYmplY3Rfb2JqZWN0UHJvdG8iLCJmdW5jVG9TdHJpbmciLCJpc1BsYWluT2JqZWN0X2hhc093blByb3BlcnR5Iiwib2JqZWN0Q3RvclN0cmluZyIsInByb3RvIiwiQ3RvciIsInVzZXJMb2dnZWRJbiIsInVzZXIiLCJ0eXBlIiwiY29uc3RhbnRzIiwiVVNFUl9MT0dHRURfSU4iLCJ1c2VyTG9nZ2VkT3V0IiwiVVNFUl9MT0dHRURfT1VUIiwibG9naW4iLCJjcmVkZW50aWFscyIsImFwaSIsInRoZW4iLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwibG9nb3V0IiwicmVtb3ZlSXRlbSIsInNpZ251cCIsImRhdGEiLCJjb25maXJtIiwidG9rZW4iLCJib29rd29ybUpXVCIsInJlc2V0UGFzc3dvcmRSZXF1ZXN0IiwiZW1haWwiLCJ2YWxpZGF0ZVRva2VuIiwicmVzZXRQYXNzd29yZCIsIk1PVklFU19GRVRDSEVEIiwiTU9WSUVfQ1JFQVRFRCIsIkNMRUFSX0FMTF9NT1ZJRVMiLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJjcmVhdGVTdG9yZV9jcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwiaXNQbGFpbk9iamVjdCIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJhY3Rpb25UeXBlIiwiY29tYmluZVJlZHVjZXJzIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJmaW5hbFJlZHVjZXJLZXlzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsInN1YnN0cmluZyIsInNwbGl0IiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwiaGFzQ2hhbmdlZCIsIl9pIiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImVycm9yTWVzc2FnZSIsImJpbmRBY3Rpb25DcmVhdG9yIiwiYWN0aW9uQ3JlYXRvciIsImJpbmRBY3Rpb25DcmVhdG9ycyIsImFjdGlvbkNyZWF0b3JzIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsImNvbXBvc2UiLCJmdW5jcyIsImFwcGx5TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwiY3JlYXRlU3RvcmUiLCJjaGFpbiIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJtaWRkbGV3YXJlIiwiUkVBQ1RfU1RBVElDUyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsImRlc2NyaXB0b3IiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwicGFyc2UiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsIlJlZ0V4cCIsInJlcyIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJkZWxpbWl0ZXIiLCJlc2NhcGVkIiwib2Zmc2V0IiwicHJlZml4IiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJyZXBlYXQiLCJvcHRpb25hbCIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwiY2hhckNvZGVBdCIsInRvVXBwZXJDYXNlIiwibWF0Y2hlcyIsIm9wdHMiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZWdtZW50IiwiaiIsInRlc3QiLCJhdHRhY2hLZXlzIiwiZmxhZ3MiLCJlbmRzV2l0aERlbGltaXRlciIsImdyb3VwcyIsInJlZ2V4cFRvUmVnZXhwIiwicGFydHMiLCJhcnJheVRvUmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJnIiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJoYXNCYXNlbmFtZSIsInN0cmlwQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJwcm9jZXNzIiwidXRpbHMiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJDb250ZW50LVR5cGUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJoZWFkZXJzIiwiYWRhcHRlciIsImRlZmF1bHRzIiwiWE1MSHR0cFJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJ0aW1lb3V0IiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsInN0YXR1cyIsImNvbW1vbiIsIkFjY2VwdCIsIm1ldGhvZCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwibGVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJfcmVhY3QiLCJ0ZXh0IiwiX3JlYWN0MiIsImRlZmF1bHQiLCJpbnB1dCIsIlN0cmluZyIsImlzQWJzb2x1dGUiLCJzcGxpY2VPbmUiLCJsaXN0IiwiayIsInBvcCIsInRvUGFydHMiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsImhhc1RyYWlsaW5nU2xhc2giLCJsYXN0IiwidXAiLCJwYXJ0IiwidW5zaGlmdCIsIl90eXBlb2YiLCJ2YWx1ZUVxdWFsIiwiZXZlcnkiLCJhVHlwZSIsImFWYWx1ZSIsInZhbHVlT2YiLCJiVmFsdWUiLCJhS2V5cyIsImJLZXlzIiwiZ2xvYmFsIiwicm9vdCIsIl9wb255ZmlsbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidGVzdDEiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwiZXJyIiwic2hvdWxkVXNlTmF0aXZlIiwic3ltYm9scyIsInRvT2JqZWN0IiwibG9jYXRpb25zQXJlRXF1YWwiLCJjcmVhdGVMb2NhdGlvbiIsIl9yZXNvbHZlUGF0aG5hbWUyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl92YWx1ZUVxdWFsMiIsIl9QYXRoVXRpbHMiLCJfd2FybmluZyIsIl93YXJuaW5nMiIsImNhblVzZURPTSIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsImdldENvbmZpcm1hdGlvbiIsInN1cHBvcnRzSGlzdG9yeSIsInVhIiwidXNlckFnZW50Iiwic3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSIsInN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoIiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsIl9heGlvcyIsInVzZXJzIiwiZ2V0SXRlbSIsImxvZ2luZ1VzZXIiLCJwYXNzd29yZCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidXNlclRvU3RvcmUiLCJtb3ZpZSIsImZldGNoQWxsIiwidXNlcklkIiwiYWxsTW92aWVzIiwidXNlcnNNb3ZpZXMiLCJ1c2VyRW1haWwiLCJhZGRNb3ZpZSIsImRhdGFGb3JBZGRNb3ZpZSIsIm5ld01vdmllIiwiaXNVc2VyTW92aWVzRXhpc3QiLCJtb3ZpZXNBbGxVc2VycyIsInVzZXJNb3ZpZXNPYmoiLCJjbGVhckFsbE1vdmllcyIsInNldHRsZSIsImJ1aWxkVVJMIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJidG9hIiwiY29uZmlnIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3QiLCJsb2FkRXZlbnQiLCJ4RG9tYWluIiwiWERvbWFpblJlcXVlc3QiLCJvbnByb2dyZXNzIiwib250aW1lb3V0IiwiYXV0aCIsInVzZXJuYW1lIiwiQXV0aG9yaXphdGlvbiIsIm9wZW4iLCJwYXJhbXNTZXJpYWxpemVyIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib25lcnJvciIsImNvb2tpZXMiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZWFkIiwidG9Mb3dlckNhc2UiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwicHJvbWlzZSIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsImVuaGFuY2VFcnJvciIsImNvZGUiLCJfX0NBTkNFTF9fIiwiQ2FuY2VsIiwiZmV0Y2hNb3ZpZXMiLCJtb3ZpZXMiLCJtb3ZpZXNGZXRjaGVkIiwiYWRkTmV3TW92aWUiLCJtb3ZpZUNyZWF0ZWQiLCJjbGVhckxpc3QiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwiZnJlZUdsb2JhbCIsIl9pbnZhcmlhbnQyIiwiX0xvY2F0aW9uVXRpbHMiLCJfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyIiwiX0RPTVV0aWxzIiwiZ2V0SGlzdG9yeVN0YXRlIiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl93aW5kb3ckbG9jYXRpb24iLCJoYW5kbGVQb3BTdGF0ZSIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJyZXZlcnRQb3AiLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbEtleXMiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImluaXRpYWxMb2NhdGlvbiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsImlzQmxvY2tlZCIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwiZ2V0SGFzaFBhdGgiLCJyZXBsYWNlSGFzaFBhdGgiLCJjYW5Hb1dpdGhvdXRSZWxvYWQiLCJfcHJvcHMkaGFzaFR5cGUiLCJfSGFzaFBhdGhDb2RlcnMkaGFzaFQiLCJpZ25vcmVQYXRoIiwiZW5jb2RlZFBhdGgiLCJwcmV2TG9jYXRpb24iLCJhbGxQYXRocyIsImxhc3RJbmRleE9mIiwicHVzaEhhc2hQYXRoIiwibmV4dFBhdGhzIiwiX3JlYWN0UmVkdXgiLCJfcmVhY3RSb3V0ZXJEb20iLCJfYXV0aCIsIl9zdG9yZTIiLCJSZWFjdERPTSIsIkFwcCIsImdldEVsZW1lbnRCeUlkIiwiZm9yIiwicSIsInUiLCJ2IiwidyIsInoiLCJBIiwiQiIsIkQiLCJoIiwiYWEiLCJFIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkYiLCJHIiwicmVmcyIsInVwZGF0ZXIiLCJIIiwiSSIsImlzUmVhY3RDb21wb25lbnQiLCJKIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJLIiwiY3VycmVudERpc3BhdGNoZXIiLCJMIiwiTSIsIl9fc2VsZiIsIl9fc291cmNlIiwiTiIsIiQkdHlwZW9mIiwiX293bmVyIiwiTyIsIlAiLCJRIiwiUiIsImtleVByZWZpeCIsIlMiLCJWIiwiVCIsIlUiLCJkb25lIiwiPSIsIjoiLCJlc2NhcGUiLCJjYSIsImRhIiwiVyIsImJhIiwiWCIsInRvQXJyYXkiLCJjcmVhdGVSZWYiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIkNvbnN1bWVyIiwiX2NvbnRleHQiLCJmb3J3YXJkUmVmIiwibGF6eSIsIl9jdG9yIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJjb21wYXJlIiwiRnJhZ21lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJjcmVhdGVGYWN0b3J5IiwidW5zdGFibGVfQ29uY3VycmVudE1vZGUiLCJ1bnN0YWJsZV9Qcm9maWxlciIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50T3duZXIiLCJZIiwiWiIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiY29uc29sZSIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJvbkVycm9yIiwia2EiLCJtYSIsIm5hIiwib2EiLCJwYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwicWEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInJhIiwicmVnaXN0cmF0aW9uTmFtZSIsInNhIiwidGEiLCJkZXBlbmRlbmNpZXMiLCJ2YSIsIndhIiwieGEiLCJjdXJyZW50VGFyZ2V0IiwibGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkNhIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkRhIiwic3RhdGVOb2RlIiwiZGlzYWJsZWQiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwicGFyZW50Tm9kZSIsIkphIiwiS2EiLCJMYSIsIk1hIiwicmV0dXJuIiwiTmEiLCJkaXNwYXRjaENvbmZpZyIsIk9hIiwiX3RhcmdldEluc3QiLCJQYSIsIlFhIiwiUmEiLCJTYSIsIlRhIiwiVWEiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJWYSIsIldhIiwiWGEiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiWWEiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImNiIiwiZWIiLCJmYiIsImdiIiwidGV4dENvbnRlbnQiLCJoYiIsImliIiwibmF0aXZlRXZlbnQiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImtiIiwiZXZlbnRQb29sIiwibGIiLCJkZXN0cnVjdG9yIiwiamIiLCJnZXRQb29sZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsIm1iIiwibmIiLCJvYiIsInBiIiwicWIiLCJkb2N1bWVudE1vZGUiLCJyYiIsInNiIiwidGIiLCJ1YiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJ2YiIsIndiIiwia2V5Q29kZSIsInhiIiwiZGV0YWlsIiwieWIiLCJCYiIsImxvY2FsZSIsIndoaWNoIiwiemIiLCJjaGFyIiwiQWIiLCJDYiIsIkRiIiwiRWIiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJOYiIsIk9iIiwiUGIiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImRhdGV0aW1lLWxvY2FsIiwibW9udGgiLCJyYW5nZSIsInRlbCIsInRpbWUiLCJ3ZWVrIiwiUWIiLCJub2RlTmFtZSIsIlJiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50Iiwibm9kZVR5cGUiLCJTYiIsInNldEF0dHJpYnV0ZSIsIlRiIiwiVmIiLCJfdmFsdWVUcmFja2VyIiwic2V0IiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlViIiwiV2IiLCJjaGVja2VkIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiY2MiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJvYyIsInBjIiwicWMiLCJyYyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJ2YyIsIndjIiwieGMiLCJ0YyIsImlzTmFOIiwidWMiLCJzYyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwieWMiLCJ6YyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiQWMiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiQmMiLCJDYyIsIkRjIiwiRWMiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsInRhYkluZGV4IiwiRmMiLCJjaGFuZ2UiLCJHYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJSYyIsIlNjIiwiVGMiLCJVYyIsIlZjIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsIldjIiwidmlldyIsIlhjIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlljIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIlpjIiwiJGMiLCJhZCIsImJkIiwiY2QiLCJkZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsImVkIiwicG9pbnRlcklkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiZmQiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsImdkIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJhbHRlcm5hdGUiLCJoZCIsImlkIiwiamQiLCJrZCIsImVmZmVjdFRhZyIsImxkIiwibmQiLCJzaWJsaW5nIiwibWQiLCJvZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJwZCIsImNsaXBib2FyZERhdGEiLCJxZCIsInJkIiwiY2hhckNvZGUiLCJzZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJ0ZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJ1ZCIsInZkIiwiZGF0YVRyYW5zZmVyIiwid2QiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwieGQiLCJ5ZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiemQiLCJBZCIsIkJkIiwiQ2QiLCJpc0ludGVyYWN0aXZlIiwiRGQiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJFZCIsIkZkIiwiR2QiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIkhkIiwiSWQiLCJKZCIsIktkIiwiTGQiLCJNZCIsIk5kIiwiT2QiLCJQZCIsImJvZHkiLCJRZCIsImZpcnN0Q2hpbGQiLCJSZCIsIm5leHRTaWJsaW5nIiwiVGQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsIlVkIiwiY29udGVudEVkaXRhYmxlIiwiVmQiLCJXZCIsInNlbGVjdCIsIlhkIiwiWWQiLCJaZCIsIiRkIiwiYWUiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiYmUiLCJvblNlbGVjdCIsImVlIiwiZGUiLCJmZSIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZ2UiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImhlIiwiaWUiLCJqZSIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJrZSIsImh0bWwiLCJtYXRobWwiLCJzdmciLCJsZSIsIm1lIiwibmUiLCJvZSIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwicGUiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJxZSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwic2UiLCJ0ZSIsInNldFByb3BlcnR5IiwidWUiLCJtZW51aXRlbSIsImFyZWEiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJ2ZSIsIndlIiwieGUiLCJibHVyIiwiZm9jdXMiLCJ5ZSIsInplIiwiQWUiLCJCZSIsImF1dG9Gb2N1cyIsIkNlIiwiX19odG1sIiwiRGUiLCJFZSIsIkdlIiwiSGUiLCJTZXQiLCJJZSIsIkplIiwiS2UiLCJMZSIsIk1lIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiTmUiLCJPZSIsIlBlIiwiUWUiLCJSZSIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJYZSIsImVsZW1lbnRUeXBlIiwicGVuZGluZ1Byb3BzIiwiZmlyc3RDb250ZXh0RGVwZW5kZW5jeSIsIm1lbW9pemVkU3RhdGUiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkUHJvcHMiLCJsYXN0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiY2hpbGRFeHBpcmF0aW9uVGltZSIsImV4cGlyYXRpb25UaW1lIiwiWWUiLCIkZSIsImFmIiwiYmYiLCJjZiIsImRmIiwiZWYiLCJwZW5kaW5nQ2hpbGRyZW4iLCJpbXBsZW1lbnRhdGlvbiIsImZmIiwiZGlkRXJyb3IiLCJlYXJsaWVzdFBlbmRpbmdUaW1lIiwibGF0ZXN0UGVuZGluZ1RpbWUiLCJnZiIsImhmIiwibGF0ZXN0UGluZ2VkVGltZSIsImVhcmxpZXN0U3VzcGVuZGVkVGltZSIsImxhdGVzdFN1c3BlbmRlZFRpbWUiLCJqZiIsIm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uIiwia2YiLCJsZiIsImJhc2VTdGF0ZSIsImZpcnN0VXBkYXRlIiwibGFzdFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRVcGRhdGUiLCJsYXN0Q2FwdHVyZWRVcGRhdGUiLCJmaXJzdENhcHR1cmVkRWZmZWN0IiwibGFzdENhcHR1cmVkRWZmZWN0IiwibWYiLCJuZiIsInBheWxvYWQiLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwidGYiLCJ1ZiIsInZmIiwid2YiLCJzdGFjayIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJvYnNlcnZlZEJpdHMiLCJGZiIsIkdmIiwiSGYiLCJJZiIsIkpmIiwiZG9jdW1lbnRFbGVtZW50IiwidGFnTmFtZSIsIktmIiwiTGYiLCJNZiIsIk9mIiwiUGYiLCJRZiIsIlZmIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiV2YiLCJYZiIsImNvbnRleHRUeXBlIiwicmVhZENvbnRleHQiLCJaZiIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiJGYiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJhZyIsImJnIiwiX3N0cmluZ1JlZiIsImNnIiwiZGciLCJNYXAiLCJkZWxldGUiLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsInhnIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwieWciLCJwZW5kaW5nQ29udGV4dCIsInpnIiwidGltZWRPdXRBdCIsImZhbGxiYWNrIiwiQWciLCJOZiIsIlplIiwiaHlkcmF0ZSIsImhpZGRlbiIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIkJnIiwiQ2ciLCJHZyIsIkhnIiwiSWciLCJvbmNsaWNrIiwiSmciLCJXZWFrU2V0IiwiS2ciLCJMZyIsIk1nIiwiT2ciLCJkZXN0cm95IiwiUGciLCJRZyIsIlJnIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlNnIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIkZlIiwiZGlzcGxheSIsIk5nIiwidGgiLCJzaCIsImhhcyIsImFkZCIsIlVnIiwiV2Vha01hcCIsIlZnIiwiV2ciLCJYZyIsImNvbXBvbmVudERpZENhdGNoIiwiWWciLCJjb21wb25lbnRTdGFjayIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImVoIiwiZmgiLCJnaCIsImhoIiwiaWgiLCJqaCIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwia2giLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsImxoIiwibWgiLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJuaCIsIm1heER1cmF0aW9uIiwicGluZ0NhY2hlIiwib2giLCJmaW5pc2hlZFdvcmsiLCJwaCIsInFoIiwicmgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJ1bnN0YWJsZV9ub3ciLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsIkxoIiwidGltZW91dEhhbmRsZSIsIk5oIiwiT2giLCJuZXh0U2NoZWR1bGVkUm9vdCIsIlBoIiwiUWgiLCJSaCIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiX29uQ29tcGxldGUiLCJTaCIsImZpcnN0QmF0Y2giLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJyYW5nZUNvdW50IiwiZGIiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiWWYiLCJWaCIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiU2QiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJGYiIsIkdiIiwiSGMiLCJpaSIsIkRnIiwiRWciLCJqaSIsIkljIiwiRmciLCJjZSIsIlRoIiwiVWgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsImFpIiwiX3Jvb3QiLCJfY2FsbGJhY2tzIiwiX25leHQiLCJfaGFzQ2hpbGRyZW4iLCJfZGlkQ29tcGxldGUiLCJfY2hpbGRyZW4iLCJiaSIsIl9kaWRDb21taXQiLCJfb25Db21taXQiLCJjaSIsIl9pbnRlcm5hbFJvb3QiLCJkaSIsImZpIiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiaGFzQXR0cmlidXRlIiwiZWkiLCJnaSIsIiRoIiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJjb21taXQiLCJ1bm1vdW50IiwiY3JlYXRlQmF0Y2giLCJraSIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJXZSIsIm92ZXJyaWRlUHJvcHMiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwibGkiLCJtaSIsInByZXZpb3VzIiwicHJpb3JpdHlMZXZlbCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicGVyZm9ybWFuY2UiLCJfc2NoZWRNb2NrIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwiYXJyIiwiY29uZmlndXJlU3RvcmUiLCJfcmVkdXgiLCJjb21wb3NlRW5oYW5jZXJzIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIiwidGh1bmsiLCJjcmVhdGVSZWR1Y2VyIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsIndpdGhFeHRyYUFyZ3VtZW50IiwiX2NvbnN0YW50cyIsIl90b0NvbnN1bWFibGVBcnJheSIsImlzQXV0aGVudGljYXRlZCIsIl9Ub3BOYXZCYXIyIiwiSG9tZVBhZ2UiLCJfR3Vlc3RSb3V0ZTIiLCJMb2dpblBhZ2UiLCJTaWdudXBQYWdlIiwiX1VzZXJSb3V0ZTIiLCJEYXNoYm9hcmRQYWdlIiwiTmV3TW92aWVQYWdlIiwiY29ubmVjdCIsImludmFyaWFudCIsIm1ha2VFbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsInZhbGlkYXRlRm9ybWF0IiwiYWN0aW9ucyIsIkF4aW9zIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiYXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsInJlYWRGbG9hdExFIiwiaXNTbG93QnVmZmVyIiwiX2lzQnVmZmVyIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwiaW50ZXJjZXB0b3JzIiwiYmFzZVVSTCIsImludGVyY2VwdG9yIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJzaGlmdCIsIm5vcm1hbGl6ZWROYW1lIiwic2VyaWFsaXplZFBhcmFtcyIsInRvSVNPU3RyaW5nIiwicGFyc2VkIiwibGluZSIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJwcm90b2NvbCIsImhvc3QiLCJob3N0bmFtZSIsInBvcnQiLCJyZXF1ZXN0VVJMIiwiY2hhcnMiLCJvdXRwdXQiLCJpZHgiLCJ3cml0ZSIsImV4cGlyZXMiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJ0b0dNVFN0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZSIsImhhbmRsZXJzIiwidXNlIiwiZWplY3QiLCJ0cmFuc2Zvcm1EYXRhIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJyZWFzb24iLCJmbnMiLCJyZWxhdGl2ZVVSTCIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJzdWJtaXQiLCJSZWFjdCIsIl9Mb2dpbkZvcm0yIiwiTG9naW5Gb3JtIiwiZXJyb3JzIiwib25TdWJtaXQiLCJvbkNoYW5nZSIsInZhbGlkYXRlIiwicmVwZWF0X3Bhc3N3b3JkIiwiYmxhbmtfcGFzc3dvcmQiLCJfc3RhdGUiLCJodG1sRm9yIiwicGxhY2Vob2xkZXIiLCJfRXJyb3JNc2cyIiwiX21vdmllcyIsImlzU3RhcnRTZWFyY2giLCJvbkluaXQiLCJzdGFydFNlYXJjaCIsInZhbFRleHQiLCJfY29udGFpbnMyIiwiTmF2TGluayIsIl9TZWFyY2hNb3ZpZXNJbnB1dDIiLCJzY29wZSIsImVsZW0iLCJfYXNzZXJ0U3RyaW5nMiIsIl90b1N0cmluZzIiLCJTZWFyY2hNb3ZpZXNJbnB1dCIsInNlYXJjaFRleHQiLCJjb2xvcnMiLCJlbmFibGVkIiwidmlzaWJsZSIsInN0eWxlcyIsIkZPUkNFX0NPTE9SIiwid3JhcCIsIm5sIiwiY2xvc2UiLCJyZWdleCIsImluY2x1ZGVzIiwiZGVmaW5lIiwiY29kZXMiLCJhbnNpIiwiUmVmbGVjdCIsIltvYmplY3QgT2JqZWN0XSIsImFuc2lSZWdleCIsImhhc0NvbG9yIiwiaGFzQW5zaSIsImxhc3RJbmRleCIsInVuc3R5bGUiLCJub25lIiwic3RyaXBDb2xvciIsImlzV2luZG93cyIsInBsYXRmb3JtIiwiaXNMaW51eCIsIndpbmRvd3MiLCJidWxsZXQiLCJjaGVjayIsImNyb3NzIiwiZWxsaXBzaXMiLCJoZWFydCIsImluZm8iLCJtaWRkb3QiLCJtaW51cyIsInBsdXMiLCJxdWVzdGlvbiIsInF1ZXN0aW9uU21hbGwiLCJwb2ludGVyIiwicG9pbnRlclNtYWxsIiwib3RoZXIiLCJiYWxsb3RDcm9zcyIsInF1ZXN0aW9uRnVsbCIsIl9TaWdudXBGb3JtMiIsIlNpZ251cEZvcm0iLCJ1bm1hdGNoX3Bhc3N3b3JkIiwibG9hZGluZyIsIl9BZGROZXdNb3ZpZUZvcm0yIiwiQWRkTmV3TW92aWVGb3JtIiwiYnVkZ2V0IiwiX2lzSW50MiIsIl9pc0VtcHR5MiIsImFsbG93X2xlYWRpbmdfemVyb2VzIiwiaW50IiwiaW50TGVhZGluZ1plcm9lcyIsIm1pbkNoZWNrUGFzc2VkIiwibWF4Q2hlY2tQYXNzZWQiLCJsdENoZWNrUGFzc2VkIiwibHQiLCJndENoZWNrUGFzc2VkIiwiZ3QiLCJfYXNzZXJ0U3RyaW5nIiwiVXNlclJvdXRlIiwiR3Vlc3RSb3V0ZSIsIlRvcE5hYkJhciIsImNvbnRlbnQiLCJobXIiLCJpbnNlcnRJbnRvIiwibG9jYWxzIiwic3R5bGVzSW5Eb20iLCJpc09sZElFIiwiYXRvYiIsImdldEVsZW1lbnQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJoZWFkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJkb21TdHlsZSIsImFkZFN0eWxlIiwibGlzdFRvU3R5bGVzIiwibmV3U3R5bGVzIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiYXR0cnMiLCJhZGRBdHRycyIsImVsIiwidXBkYXRlIiwic3R5bGVJbmRleCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsInVuZXNjYXBlIiwiYmxvYiIsIm9sZFNyYyIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwibmV3T2JqIiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwiYmFzZVVybCIsImN1cnJlbnREaXIiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwiJDEiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxFQUFB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REEsT0EvQkE2bEUsRUFBQTdsRSxRQUFBLCtEQUFBb29FLEVBQUFDLEdBRUEsSUFXQUMsRUFYQUMsRUFBQUYsRUFDQTVsRSxPQUNBekMsUUFBQSxvQkFBQWxDLEVBQUEwcUUsR0FBd0MsT0FBQUEsSUFDeEN4b0UsUUFBQSxvQkFBQWxDLEVBQUEwcUUsR0FBd0MsT0FBQUEsSUFHeEMsMERBQUE5OUMsS0FBQTY5QyxHQUNBSCxHQVFBRSxFQUZBLElBQUFDLEVBQUF6aEUsUUFBQSxNQUVBeWhFLEVBQ0csSUFBQUEsRUFBQXpoRSxRQUFBLEtBRUhvaEUsRUFBQUssRUFHQUosRUFBQUksRUFBQXZvRSxRQUFBLFlBSUEsT0FBQTRJLEtBQUFDLFVBQUF5L0QsR0FBQSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0MCk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAoL15bc1xcV10qJC8pLnRlc3QoZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHdhcm5pbmcgZm9ybWF0IHNob3VsZCBiZSBhYmxlIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgJyArXG4gICAgICAgICd3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46ICcgKyBmb3JtYXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBfX0RFVl9fID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoX19ERVZfXykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxuXG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkobnVsbCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBpc0J1ZmZlciA9IHJlcXVpcmUoJ2lzLWJ1ZmZlcicpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgJiYgIWlzQXJyYXkob2JqKSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5leHBvcnQgdmFyIHN1YnNjcmlwdGlvblNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgdHJ5U3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB0cnlVbnN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgbm90aWZ5TmVzdGVkU3ViczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNTdWJzY3JpYmVkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59KTtcblxuZXhwb3J0IHZhciBzdG9yZVNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn0pOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBDaGlsZHJlbiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBzdG9yZVNoYXBlLCBzdWJzY3JpcHRpb25TaGFwZSB9IGZyb20gJy4uL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi91dGlscy93YXJuaW5nJztcblxudmFyIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gZmFsc2U7XG5mdW5jdGlvbiB3YXJuQWJvdXRSZWNlaXZpbmdTdG9yZSgpIHtcbiAgaWYgKGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gdHJ1ZTtcblxuICB3YXJuaW5nKCc8UHJvdmlkZXI+IGRvZXMgbm90IHN1cHBvcnQgY2hhbmdpbmcgYHN0b3JlYCBvbiB0aGUgZmx5LiAnICsgJ0l0IGlzIG1vc3QgbGlrZWx5IHRoYXQgeW91IHNlZSB0aGlzIGVycm9yIGJlY2F1c2UgeW91IHVwZGF0ZWQgdG8gJyArICdSZWR1eCAyLnggYW5kIFJlYWN0IFJlZHV4IDIueCB3aGljaCBubyBsb25nZXIgaG90IHJlbG9hZCByZWR1Y2VycyAnICsgJ2F1dG9tYXRpY2FsbHkuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yZWR1eC9yZWxlYXNlcy8nICsgJ3RhZy92Mi4wLjAgZm9yIHRoZSBtaWdyYXRpb24gaW5zdHJ1Y3Rpb25zLicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJvdmlkZXIoKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXg7XG5cbiAgdmFyIHN0b3JlS2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnc3RvcmUnO1xuICB2YXIgc3ViS2V5ID0gYXJndW1lbnRzWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb25LZXkgPSBzdWJLZXkgfHwgc3RvcmVLZXkgKyAnU3Vic2NyaXB0aW9uJztcblxuICB2YXIgUHJvdmlkZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbc3RvcmVLZXldID0gdGhpc1tzdG9yZUtleV0sIF9yZWZbc3Vic2NyaXB0aW9uS2V5XSA9IG51bGwsIF9yZWY7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvdmlkZXIpO1xuXG4gICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgICAgX3RoaXNbc3RvcmVLZXldID0gcHJvcHMuc3RvcmU7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBDaGlsZHJlbi5vbmx5KHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXNbc3RvcmVLZXldICE9PSBuZXh0UHJvcHMuc3RvcmUpIHtcbiAgICAgICAgd2FybkFib3V0UmVjZWl2aW5nU3RvcmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAgIHN0b3JlOiBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRcbiAgfTtcbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdG9yZUtleV0gPSBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgcmV0dXJuIFByb3ZpZGVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVQcm92aWRlcigpOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBDTEVBUkVEID0gbnVsbDtcbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIC8vIHRoZSBjdXJyZW50L25leHQgcGF0dGVybiBpcyBjb3BpZWQgZnJvbSByZWR1eCdzIGNyZWF0ZVN0b3JlIGNvZGUuXG4gIC8vIFRPRE86IHJlZmFjdG9yK2V4cG9zZSB0aGF0IGNvZGUgdG8gYmUgcmV1c2FibGUgaGVyZT9cbiAgdmFyIGN1cnJlbnQgPSBbXTtcbiAgdmFyIG5leHQgPSBbXTtcblxuICByZXR1cm4ge1xuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIG5leHQgPSBDTEVBUkVEO1xuICAgICAgY3VycmVudCA9IENMRUFSRUQ7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50ID0gbmV4dDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxpc3RlbmVyc1tpXSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgbmV4dC5wdXNoKGxpc3RlbmVyKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBjdXJyZW50ID09PSBDTEVBUkVEKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgICBuZXh0LnNwbGljZShuZXh0LmluZGV4T2YobGlzdGVuZXIpLCAxKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yiwgb25TdGF0ZUNoYW5nZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdWJzY3JpcHRpb24pO1xuXG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMub25TdGF0ZUNoYW5nZSA9IG9uU3RhdGVDaGFuZ2U7XG4gICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICB9XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5wYXJlbnRTdWIgPyB0aGlzLnBhcmVudFN1Yi5hZGROZXN0ZWRTdWIodGhpcy5vblN0YXRlQ2hhbmdlKSA6IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMub25TdGF0ZUNoYW5nZSk7XG5cbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudHJ5VW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gYXMgZGVmYXVsdCB9OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IENvbXBvbmVudCwgY3JlYXRlRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgc3RvcmVTaGFwZSwgc3Vic2NyaXB0aW9uU2hhcGUgfSBmcm9tICcuLi91dGlscy9Qcm9wVHlwZXMnO1xuXG52YXIgaG90UmVsb2FkaW5nVmVyc2lvbiA9IDA7XG52YXIgZHVtbXlTdGF0ZSA9IHt9O1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5mdW5jdGlvbiBtYWtlU2VsZWN0b3JTdGF0ZWZ1bChzb3VyY2VTZWxlY3Rvciwgc3RvcmUpIHtcbiAgLy8gd3JhcCB0aGUgc2VsZWN0b3IgaW4gYW4gb2JqZWN0IHRoYXQgdHJhY2tzIGl0cyByZXN1bHRzIGJldHdlZW4gcnVucy5cbiAgdmFyIHNlbGVjdG9yID0ge1xuICAgIHJ1bjogZnVuY3Rpb24gcnVuQ29tcG9uZW50U2VsZWN0b3IocHJvcHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXh0UHJvcHMgPSBzb3VyY2VTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCBwcm9wcyk7XG4gICAgICAgIGlmIChuZXh0UHJvcHMgIT09IHNlbGVjdG9yLnByb3BzIHx8IHNlbGVjdG9yLmVycm9yKSB7XG4gICAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICBzZWxlY3Rvci5wcm9wcyA9IG5leHRQcm9wcztcbiAgICAgICAgICBzZWxlY3Rvci5lcnJvciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHRydWU7XG4gICAgICAgIHNlbGVjdG9yLmVycm9yID0gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cbiAgY29tcHV0ZSBuZXcgcHJvcHMgZnJvbSBzdGF0ZSwgcHJvcHMsIGFuZCBkaXNwYXRjaC4gRm9yIGV4YW1wbGU6XG4gICAgIGV4cG9ydCBkZWZhdWx0IGNvbm5lY3RBZHZhbmNlZCgoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChzdGF0ZSwgcHJvcHMpID0+ICh7XG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxuICAgIH0pKShZb3VyQ29tcG9uZW50KVxuICAgQWNjZXNzIHRvIGRpc3BhdGNoIGlzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IHNvIHNlbGVjdG9yRmFjdG9yaWVzIGNhbiBiaW5kIGFjdGlvbkNyZWF0b3JzXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcbiAgcHJvcHMuIERvIG5vdCB1c2UgY29ubmVjdEFkdmFuY2VkIGRpcmVjdGx5IHdpdGhvdXQgbWVtb2l6aW5nIHJlc3VsdHMgYmV0d2VlbiBjYWxscyB0byB5b3VyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cbiovXG5zZWxlY3RvckZhY3RvcnkpIHtcbiAgdmFyIF9jb250ZXh0VHlwZXMsIF9jaGlsZENvbnRleHRUeXBlcztcblxuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICBfcmVmJGdldERpc3BsYXlOYW1lID0gX3JlZi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZiRnZXREaXNwbGF5TmFtZSA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gJ0Nvbm5lY3RBZHZhbmNlZCgnICsgbmFtZSArICcpJztcbiAgfSA6IF9yZWYkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmJG1ldGhvZE5hbWUgPSBfcmVmLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZiRtZXRob2ROYW1lID09PSB1bmRlZmluZWQgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYkbWV0aG9kTmFtZSxcbiAgICAgIF9yZWYkcmVuZGVyQ291bnRQcm9wID0gX3JlZi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmJHJlbmRlckNvdW50UHJvcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogX3JlZiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmJHNob3VsZEhhbmRsZVN0YXQgPSBfcmVmLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYkc2hvdWxkSGFuZGxlU3RhdCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYkc2hvdWxkSGFuZGxlU3RhdCxcbiAgICAgIF9yZWYkc3RvcmVLZXkgPSBfcmVmLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmJHN0b3JlS2V5ID09PSB1bmRlZmluZWQgPyAnc3RvcmUnIDogX3JlZiRzdG9yZUtleSxcbiAgICAgIF9yZWYkd2l0aFJlZiA9IF9yZWYud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmJHdpdGhSZWYgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiR3aXRoUmVmLFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWydnZXREaXNwbGF5TmFtZScsICdtZXRob2ROYW1lJywgJ3JlbmRlckNvdW50UHJvcCcsICdzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMnLCAnc3RvcmVLZXknLCAnd2l0aFJlZiddKTtcblxuICB2YXIgc3Vic2NyaXB0aW9uS2V5ID0gc3RvcmVLZXkgKyAnU3Vic2NyaXB0aW9uJztcbiAgdmFyIHZlcnNpb24gPSBob3RSZWxvYWRpbmdWZXJzaW9uKys7XG5cbiAgdmFyIGNvbnRleHRUeXBlcyA9IChfY29udGV4dFR5cGVzID0ge30sIF9jb250ZXh0VHlwZXNbc3RvcmVLZXldID0gc3RvcmVTaGFwZSwgX2NvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jb250ZXh0VHlwZXMpO1xuICB2YXIgY2hpbGRDb250ZXh0VHlwZXMgPSAoX2NoaWxkQ29udGV4dFR5cGVzID0ge30sIF9jaGlsZENvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jaGlsZENvbnRleHRUeXBlcyk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaW52YXJpYW50KHR5cGVvZiBXcmFwcGVkQ29tcG9uZW50ID09ICdmdW5jdGlvbicsICdZb3UgbXVzdCBwYXNzIGEgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSAnICsgKCdjb25uZWN0LiBJbnN0ZWFkIHJlY2VpdmVkICcgKyBKU09OLnN0cmluZ2lmeShXcmFwcGVkQ29tcG9uZW50KSkpO1xuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG5cbiAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZSh3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG5cbiAgICB2YXIgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25uZWN0T3B0aW9ucywge1xuICAgICAgZ2V0RGlzcGxheU5hbWU6IGdldERpc3BsYXlOYW1lLFxuICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIHJlbmRlckNvdW50UHJvcDogcmVuZGVyQ291bnRQcm9wLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzdG9yZUtleTogc3RvcmVLZXksXG4gICAgICB3aXRoUmVmOiB3aXRoUmVmLFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIENvbm5lY3QgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgX2luaGVyaXRzKENvbm5lY3QsIF9Db21wb25lbnQpO1xuXG4gICAgICBmdW5jdGlvbiBDb25uZWN0KHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25uZWN0KTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgICAgICBfdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7fTtcbiAgICAgICAgX3RoaXMucmVuZGVyQ291bnQgPSAwO1xuICAgICAgICBfdGhpcy5zdG9yZSA9IHByb3BzW3N0b3JlS2V5XSB8fCBjb250ZXh0W3N0b3JlS2V5XTtcbiAgICAgICAgX3RoaXMucHJvcHNNb2RlID0gQm9vbGVhbihwcm9wc1tzdG9yZUtleV0pO1xuICAgICAgICBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UgPSBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UuYmluZChfdGhpcyk7XG5cbiAgICAgICAgaW52YXJpYW50KF90aGlzLnN0b3JlLCAnQ291bGQgbm90IGZpbmQgXCInICsgc3RvcmVLZXkgKyAnXCIgaW4gZWl0aGVyIHRoZSBjb250ZXh0IG9yIHByb3BzIG9mICcgKyAoJ1wiJyArIGRpc3BsYXlOYW1lICsgJ1wiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCAnKSArICgnb3IgZXhwbGljaXRseSBwYXNzIFwiJyArIHN0b3JlS2V5ICsgJ1wiIGFzIGEgcHJvcCB0byBcIicgKyBkaXNwbGF5TmFtZSArICdcIi4nKSk7XG5cbiAgICAgICAgX3RoaXMuaW5pdFNlbGVjdG9yKCk7XG4gICAgICAgIF90aGlzLmluaXRTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgfVxuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICAgIHZhciBfcmVmMjtcblxuICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCByZWNlaXZlZCBzdG9yZSBmcm9tIHByb3BzLCBpdHMgc3Vic2NyaXB0aW9uIHNob3VsZCBiZSB0cmFuc3BhcmVudFxuICAgICAgICAvLyB0byBhbnkgZGVzY2VuZGFudHMgcmVjZWl2aW5nIHN0b3JlK3N1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQ7IGl0IHBhc3NlcyBhbG9uZ1xuICAgICAgICAvLyBzdWJzY3JpcHRpb24gcGFzc2VkIHRvIGl0LiBPdGhlcndpc2UsIGl0IHNoYWRvd3MgdGhlIHBhcmVudCBzdWJzY3JpcHRpb24sIHdoaWNoIGFsbG93c1xuICAgICAgICAvLyBDb25uZWN0IHRvIGNvbnRyb2wgb3JkZXJpbmcgb2Ygbm90aWZpY2F0aW9ucyB0byBmbG93IHRvcC1kb3duLlxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5wcm9wc01vZGUgPyBudWxsIDogdGhpcy5zdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiBfcmVmMiA9IHt9LCBfcmVmMltzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uIHx8IHRoaXMuY29udGV4dFtzdWJzY3JpcHRpb25LZXldLCBfcmVmMjtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47XG5cbiAgICAgICAgLy8gY29tcG9uZW50V2lsbE1vdW50IGZpcmVzIGR1cmluZyBzZXJ2ZXIgc2lkZSByZW5kZXJpbmcsIGJ1dCBjb21wb25lbnREaWRNb3VudCBhbmRcbiAgICAgICAgLy8gY29tcG9uZW50V2lsbFVubW91bnQgZG8gbm90LiBCZWNhdXNlIG9mIHRoaXMsIHRyeVN1YnNjcmliZSBoYXBwZW5zIGR1cmluZyAuLi5kaWRNb3VudC5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB1bnN1YnNjcmlwdGlvbiB3b3VsZCBuZXZlciB0YWtlIHBsYWNlIGR1cmluZyBTU1IsIGNhdXNpbmcgYSBtZW1vcnkgbGVhay5cbiAgICAgICAgLy8gVG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIGEgY2hpbGQgY29tcG9uZW50IG1heSBoYXZlIHRyaWdnZXJlZCBhIHN0YXRlIGNoYW5nZSBieVxuICAgICAgICAvLyBkaXNwYXRjaGluZyBhbiBhY3Rpb24gaW4gaXRzIGNvbXBvbmVudFdpbGxNb3VudCwgd2UgaGF2ZSB0byByZS1ydW4gdGhlIHNlbGVjdCBhbmQgbWF5YmVcbiAgICAgICAgLy8gcmUtcmVuZGVyLlxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKG5leHRQcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikgdGhpcy5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMgPSBub29wO1xuICAgICAgICB0aGlzLnN0b3JlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4gPSBub29wO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuZ2V0V3JhcHBlZEluc3RhbmNlID0gZnVuY3Rpb24gZ2V0V3JhcHBlZEluc3RhbmNlKCkge1xuICAgICAgICBpbnZhcmlhbnQod2l0aFJlZiwgJ1RvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgeW91IG5lZWQgdG8gc3BlY2lmeSAnICsgKCd7IHdpdGhSZWY6IHRydWUgfSBpbiB0aGUgb3B0aW9ucyBhcmd1bWVudCBvZiB0aGUgJyArIG1ldGhvZE5hbWUgKyAnKCkgY2FsbC4nKSk7XG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZWRJbnN0YW5jZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLnNldFdyYXBwZWRJbnN0YW5jZSA9IGZ1bmN0aW9uIHNldFdyYXBwZWRJbnN0YW5jZShyZWYpIHtcbiAgICAgICAgdGhpcy53cmFwcGVkSW5zdGFuY2UgPSByZWY7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pbml0U2VsZWN0b3IgPSBmdW5jdGlvbiBpbml0U2VsZWN0b3IoKSB7XG4gICAgICAgIHZhciBzb3VyY2VTZWxlY3RvciA9IHNlbGVjdG9yRmFjdG9yeSh0aGlzLnN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IG1ha2VTZWxlY3RvclN0YXRlZnVsKHNvdXJjZVNlbGVjdG9yLCB0aGlzLnN0b3JlKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pbml0U3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gaW5pdFN1YnNjcmlwdGlvbigpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjtcblxuICAgICAgICAvLyBwYXJlbnRTdWIncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cbiAgICAgICAgdmFyIHBhcmVudFN1YiA9ICh0aGlzLnByb3BzTW9kZSA/IHRoaXMucHJvcHMgOiB0aGlzLmNvbnRleHQpW3N1YnNjcmlwdGlvbktleV07XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih0aGlzLnN0b3JlLCBwYXJlbnRTdWIsIHRoaXMub25TdGF0ZUNoYW5nZS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyAgdW5tb3VudGVkIGluXG4gICAgICAgIC8vIHRoZSBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLCB3aGVyZSBgdGhpcy5zdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBBblxuICAgICAgICAvLyBleHRyYSBudWxsIGNoZWNrIGV2ZXJ5IGNoYW5nZSBjYW4gYmUgYXZvaWRlZCBieSBjb3B5aW5nIHRoZSBtZXRob2Qgb250byBgdGhpc2AgYW5kIHRoZW5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGl0IHdpdGggYSBuby1vcCBvbiB1bm1vdW50LiBUaGlzIGNhbiBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzXG4gICAgICAgIC8vIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVycyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlXG4gICAgICAgIC8vIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicyA9IHRoaXMuc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZCh0aGlzLnN1YnNjcmlwdGlvbik7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5vblN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gb25TdGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkge1xuICAgICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdGhpcy5ub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGU7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZShkdW1teVN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUubm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICAvLyBgY29tcG9uZW50RGlkVXBkYXRlYCBpcyBjb25kaXRpb25hbGx5IGltcGxlbWVudGVkIHdoZW4gYG9uU3RhdGVDaGFuZ2VgIGRldGVybWluZXMgaXRcbiAgICAgICAgLy8gbmVlZHMgdG8gbm90aWZ5IG5lc3RlZCBzdWJzLiBPbmNlIGNhbGxlZCwgaXQgdW5pbXBsZW1lbnRzIGl0c2VsZiB1bnRpbCBmdXJ0aGVyIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZXMgb2NjdXIuIERvaW5nIGl0IHRoaXMgd2F5IHZzIGhhdmluZyBhIHBlcm1hbmVudCBgY29tcG9uZW50RGlkVXBkYXRlYCB0aGF0IGRvZXNcbiAgICAgICAgLy8gYSBib29sZWFuIGNoZWNrIGV2ZXJ5IHRpbWUgYXZvaWRzIGFuIGV4dHJhIG1ldGhvZCBjYWxsIG1vc3Qgb2YgdGhlIHRpbWUsIHJlc3VsdGluZ1xuICAgICAgICAvLyBpbiBzb21lIHBlcmYgYm9vc3QuXG4gICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5zdWJzY3JpcHRpb24pICYmIHRoaXMuc3Vic2NyaXB0aW9uLmlzU3Vic2NyaWJlZCgpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuYWRkRXh0cmFQcm9wcyA9IGZ1bmN0aW9uIGFkZEV4dHJhUHJvcHMocHJvcHMpIHtcbiAgICAgICAgaWYgKCF3aXRoUmVmICYmICFyZW5kZXJDb3VudFByb3AgJiYgISh0aGlzLnByb3BzTW9kZSAmJiB0aGlzLnN1YnNjcmlwdGlvbikpIHJldHVybiBwcm9wcztcbiAgICAgICAgLy8gbWFrZSBhIHNoYWxsb3cgY29weSBzbyB0aGF0IGZpZWxkcyBhZGRlZCBkb24ndCBsZWFrIHRvIHRoZSBvcmlnaW5hbCBzZWxlY3Rvci5cbiAgICAgICAgLy8gdGhpcyBpcyBlc3BlY2lhbGx5IGltcG9ydGFudCBmb3IgJ3JlZicgc2luY2UgdGhhdCdzIGEgcmVmZXJlbmNlIGJhY2sgdG8gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpbnN0YW5jZS4gYSBzaW5nbGV0b24gbWVtb2l6ZWQgc2VsZWN0b3Igd291bGQgdGhlbiBiZSBob2xkaW5nIGEgcmVmZXJlbmNlIHRvIHRoZVxuICAgICAgICAvLyBpbnN0YW5jZSwgcHJldmVudGluZyB0aGUgaW5zdGFuY2UgZnJvbSBiZWluZyBnYXJiYWdlIGNvbGxlY3RlZCwgYW5kIHRoYXQgd291bGQgYmUgYmFkXG4gICAgICAgIHZhciB3aXRoRXh0cmFzID0gX2V4dGVuZHMoe30sIHByb3BzKTtcbiAgICAgICAgaWYgKHdpdGhSZWYpIHdpdGhFeHRyYXMucmVmID0gdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2U7XG4gICAgICAgIGlmIChyZW5kZXJDb3VudFByb3ApIHdpdGhFeHRyYXNbcmVuZGVyQ291bnRQcm9wXSA9IHRoaXMucmVuZGVyQ291bnQrKztcbiAgICAgICAgaWYgKHRoaXMucHJvcHNNb2RlICYmIHRoaXMuc3Vic2NyaXB0aW9uKSB3aXRoRXh0cmFzW3N1YnNjcmlwdGlvbktleV0gPSB0aGlzLnN1YnNjcmlwdGlvbjtcbiAgICAgICAgcmV0dXJuIHdpdGhFeHRyYXM7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3I7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChzZWxlY3Rvci5lcnJvcikge1xuICAgICAgICAgIHRocm93IHNlbGVjdG9yLmVycm9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIHRoaXMuYWRkRXh0cmFQcm9wcyhzZWxlY3Rvci5wcm9wcykpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQ29ubmVjdDtcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICBDb25uZWN0LmNoaWxkQ29udGV4dFR5cGVzID0gY2hpbGRDb250ZXh0VHlwZXM7XG4gICAgQ29ubmVjdC5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG4gICAgQ29ubmVjdC5wcm9wVHlwZXMgPSBjb250ZXh0VHlwZXM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIC8vIFdlIGFyZSBob3QgcmVsb2FkaW5nIVxuICAgICAgICBpZiAodGhpcy52ZXJzaW9uICE9PSB2ZXJzaW9uKSB7XG4gICAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgICB0aGlzLmluaXRTZWxlY3RvcigpO1xuXG4gICAgICAgICAgLy8gSWYgYW55IGNvbm5lY3RlZCBkZXNjZW5kYW50cyBkb24ndCBob3QgcmVsb2FkIChhbmQgcmVzdWJzY3JpYmUgaW4gdGhlIHByb2Nlc3MpLCB0aGVpclxuICAgICAgICAgIC8vIGxpc3RlbmVycyB3aWxsIGJlIGxvc3Qgd2hlbiB3ZSB1bnN1YnNjcmliZS4gVW5mb3J0dW5hdGVseSwgYnkgY29weWluZyBvdmVyIGFsbFxuICAgICAgICAgIC8vIGxpc3RlbmVycywgdGhpcyBkb2VzIG1lYW4gdGhhdCB0aGUgb2xkIHZlcnNpb25zIG9mIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3aWxsIHN0aWxsIGJlXG4gICAgICAgICAgLy8gbm90aWZpZWQgb2Ygc3RhdGUgY2hhbmdlczsgaG93ZXZlciwgdGhlaXIgb25TdGF0ZUNoYW5nZSBmdW5jdGlvbiBpcyBhIG5vLW9wIHNvIHRoaXNcbiAgICAgICAgICAvLyBpc24ndCBhIGh1Z2UgZGVhbC5cbiAgICAgICAgICB2YXIgb2xkTGlzdGVuZXJzID0gW107XG5cbiAgICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIG9sZExpc3RlbmVycyA9IHRoaXMuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5nZXQoKTtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuaW5pdFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICAgICAgb2xkTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwidmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093bi5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuICAgIGNvbnN0YW50U2VsZWN0b3IuZGVwZW5kc09uT3duUHJvcHMgPSBmYWxzZTtcbiAgICByZXR1cm4gY29uc3RhbnRTZWxlY3RvcjtcbiAgfTtcbn1cblxuLy8gZGVwZW5kc09uT3duUHJvcHMgaXMgdXNlZCBieSBjcmVhdGVNYXBUb1Byb3BzUHJveHkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcGFzcyBwcm9wcyBhcyBhcmdzXG4vLyB0byB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyB3cmFwcGVkLiBJdCBpcyBhbHNvIHVzZWQgYnkgbWFrZVB1cmVQcm9wc1NlbGVjdG9yIHRvIGRldGVybWluZVxuLy8gd2hldGhlciBtYXBUb1Byb3BzIG5lZWRzIHRvIGJlIGludm9rZWQgd2hlbiBwcm9wcyBoYXZlIGNoYW5nZWQuXG4vLyBcbi8vIEEgbGVuZ3RoIG9mIG9uZSBzaWduYWxzIHRoYXQgbWFwVG9Qcm9wcyBkb2VzIG5vdCBkZXBlbmQgb24gcHJvcHMgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbi8vIEEgbGVuZ3RoIG9mIHplcm8gaXMgYXNzdW1lZCB0byBtZWFuIG1hcFRvUHJvcHMgaXMgZ2V0dGluZyBhcmdzIHZpYSBhcmd1bWVudHMgb3IgLi4uYXJncyBhbmRcbi8vIHRoZXJlZm9yZSBub3QgcmVwb3J0aW5nIGl0cyBsZW5ndGggYWNjdXJhdGVseS4uXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59XG5cbi8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vIFxuLy8gICogRGV0ZWN0cyB3aGV0aGVyIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIGNhbGxlZCBkZXBlbmRzIG9uIHByb3BzLCB3aGljaFxuLy8gICAgaXMgdXNlZCBieSBzZWxlY3RvckZhY3RvcnkgdG8gZGVjaWRlIGlmIGl0IHNob3VsZCByZWludm9rZSBvbiBwcm9wcyBjaGFuZ2VzLlxuLy8gICAgXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCBoYW5kbGVzIG1hcFRvUHJvcHMgaWYgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uLCBhbmQgdHJlYXRzIHRoYXRcbi8vICAgIG5ldyBmdW5jdGlvbiBhcyB0aGUgdHJ1ZSBtYXBUb1Byb3BzIGZvciBzdWJzZXF1ZW50IGNhbGxzLlxuLy8gICAgXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy8gICAgXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZTtcblxuICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gpO1xuICAgIH07XG5cbiAgICAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBtYXBUb1Byb3BzO1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKTtcbiAgICAgIHZhciBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBwcm9wcztcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcyk7XG4gICAgICAgIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChwcm9wcywgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpO1xuXG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwRGlzcGF0Y2hUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4geyBkaXNwYXRjaDogZGlzcGF0Y2ggfTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBEaXNwYXRjaFRvUHJvcHMgJiYgdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ29iamVjdCcgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMobWFwRGlzcGF0Y2hUb1Byb3BzLCBkaXNwYXRjaCk7XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbihtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZ107IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duUHJvcHMsIHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgICBwdXJlID0gX3JlZi5wdXJlLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZi5hcmVNZXJnZWRQcm9wc0VxdWFsO1xuXG4gICAgdmFyIGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICB2YXIgbWVyZ2VkUHJvcHMgPSB2b2lkIDA7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24obWVyZ2VQcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1lcmdlUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTsiLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCB2ZXJpZnlTdWJzZWxlY3RvcnMgZnJvbSAnLi92ZXJpZnlTdWJzZWxlY3RvcnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICByZXR1cm4gbWVyZ2VQcm9wcyhtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSwgbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyksIG93blByb3BzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuXG4gIHZhciBoYXNSdW5BdExlYXN0T25jZSA9IGZhbHNlO1xuICB2YXIgc3RhdGUgPSB2b2lkIDA7XG4gIHZhciBvd25Qcm9wcyA9IHZvaWQgMDtcbiAgdmFyIHN0YXRlUHJvcHMgPSB2b2lkIDA7XG4gIHZhciBkaXNwYXRjaFByb3BzID0gdm9pZCAwO1xuICB2YXIgbWVyZ2VkUHJvcHMgPSB2b2lkIDA7XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmlyc3RDYWxsKGZpcnN0U3RhdGUsIGZpcnN0T3duUHJvcHMpIHtcbiAgICBzdGF0ZSA9IGZpcnN0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBmaXJzdE93blByb3BzO1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWU7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG5cbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcblxuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3U3RhdGUoKSB7XG4gICAgdmFyIG5leHRTdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlUHJvcHNDaGFuZ2VkID0gIWFyZVN0YXRlUHJvcHNFcXVhbChuZXh0U3RhdGVQcm9wcywgc3RhdGVQcm9wcyk7XG4gICAgc3RhdGVQcm9wcyA9IG5leHRTdGF0ZVByb3BzO1xuXG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgdmFyIHByb3BzQ2hhbmdlZCA9ICFhcmVPd25Qcm9wc0VxdWFsKG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwobmV4dFN0YXRlLCBzdGF0ZSk7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHM7XG5cbiAgICBpZiAocHJvcHNDaGFuZ2VkICYmIHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKTtcbiAgICBpZiAocHJvcHNDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHMoKTtcbiAgICBpZiAoc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3U3RhdGUoKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHJldHVybiBoYXNSdW5BdExlYXN0T25jZSA/IGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgOiBoYW5kbGVGaXJzdENhbGwobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpO1xuICB9O1xufVxuXG4vLyBUT0RPOiBBZGQgbW9yZSBjb21tZW50c1xuXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbJ2luaXRNYXBTdGF0ZVRvUHJvcHMnLCAnaW5pdE1hcERpc3BhdGNoVG9Qcm9wcycsICdpbml0TWVyZ2VQcm9wcyddKTtcblxuICB2YXIgbWFwU3RhdGVUb1Byb3BzID0gaW5pdE1hcFN0YXRlVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1lcmdlUHJvcHMgPSBpbml0TWVyZ2VQcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2ZXJpZnlTdWJzZWxlY3RvcnMobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIG9wdGlvbnMuZGlzcGxheU5hbWUpO1xuICB9XG5cbiAgdmFyIHNlbGVjdG9yRmFjdG9yeSA9IG9wdGlvbnMucHVyZSA/IHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IDogaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgb3B0aW9ucyk7XG59IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4uL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbmltcG9ydCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwU3RhdGVUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyBmcm9tICcuL21lcmdlUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi9zZWxlY3RvckZhY3RvcnknO1xuXG4vKlxuICBjb25uZWN0IGlzIGEgZmFjYWRlIG92ZXIgY29ubmVjdEFkdmFuY2VkLiBJdCB0dXJucyBpdHMgYXJncyBpbnRvIGEgY29tcGF0aWJsZVxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxuXG4gICAgKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpID0+IG5leHRGaW5hbFByb3BzXG4gIFxuICBjb25uZWN0IHBhc3NlcyBpdHMgYXJncyB0byBjb25uZWN0QWR2YW5jZWQgYXMgb3B0aW9ucywgd2hpY2ggd2lsbCBpbiB0dXJuIHBhc3MgdGhlbSB0b1xuICBzZWxlY3RvckZhY3RvcnkgZWFjaCB0aW1lIGEgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2UgaXMgaW5zdGFudGlhdGVkIG9yIGhvdCByZWxvYWRlZC5cblxuICBzZWxlY3RvckZhY3RvcnkgcmV0dXJucyBhIGZpbmFsIHByb3BzIHNlbGVjdG9yIGZyb20gaXRzIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgbWVyZ2VQcm9wcyxcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cblxuICBUaGUgcmVzdWx0aW5nIGZpbmFsIHByb3BzIHNlbGVjdG9yIGlzIGNhbGxlZCBieSB0aGUgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2Ugd2hlbmV2ZXJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxuICovXG5cbmZ1bmN0aW9uIG1hdGNoKGFyZywgZmFjdG9yaWVzLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSBmYWN0b3JpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFjdG9yaWVzW2ldKGFyZyk7XG4gICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgb2YgdHlwZSAnICsgdHlwZW9mIGFyZyArICcgZm9yICcgKyBuYW1lICsgJyBhcmd1bWVudCB3aGVuIGNvbm5lY3RpbmcgY29tcG9uZW50ICcgKyBvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lICsgJy4nKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cblxuLy8gY3JlYXRlQ29ubmVjdCB3aXRoIGRlZmF1bHQgYXJncyBidWlsZHMgdGhlICdvZmZpY2lhbCcgY29ubmVjdCBiZWhhdmlvci4gQ2FsbGluZyBpdCB3aXRoXG4vLyBkaWZmZXJlbnQgb3B0aW9ucyBvcGVucyB1cCBzb21lIHRlc3RpbmcgYW5kIGV4dGVuc2liaWxpdHkgc2NlbmFyaW9zXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdCgpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgX3JlZiRjb25uZWN0SE9DID0gX3JlZi5jb25uZWN0SE9DLFxuICAgICAgY29ubmVjdEhPQyA9IF9yZWYkY29ubmVjdEhPQyA9PT0gdW5kZWZpbmVkID8gY29ubmVjdEFkdmFuY2VkIDogX3JlZiRjb25uZWN0SE9DLFxuICAgICAgX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID0gX3JlZi5tYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YsXG4gICAgICBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPSBfcmVmLm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyxcbiAgICAgIF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9IF9yZWYubWVyZ2VQcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1lcmdlUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIDogX3JlZiRtZXJnZVByb3BzRmFjdG9yLFxuICAgICAgX3JlZiRzZWxlY3RvckZhY3RvcnkgPSBfcmVmLnNlbGVjdG9yRmFjdG9yeSxcbiAgICAgIHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYkc2VsZWN0b3JGYWN0b3J5ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IDogX3JlZiRzZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMpIHtcbiAgICB2YXIgX3JlZjIgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9LFxuICAgICAgICBfcmVmMiRwdXJlID0gX3JlZjIucHVyZSxcbiAgICAgICAgcHVyZSA9IF9yZWYyJHB1cmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmMiRwdXJlLFxuICAgICAgICBfcmVmMiRhcmVTdGF0ZXNFcXVhbCA9IF9yZWYyLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYyJGFyZVN0YXRlc0VxdWFsID09PSB1bmRlZmluZWQgPyBzdHJpY3RFcXVhbCA6IF9yZWYyJGFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBfcmVmMiRhcmVPd25Qcm9wc0VxdWEgPSBfcmVmMi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZjIkYXJlT3duUHJvcHNFcXVhID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVPd25Qcm9wc0VxdWEsXG4gICAgICAgIF9yZWYyJGFyZVN0YXRlUHJvcHNFcSA9IF9yZWYyLmFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZjIkYXJlU3RhdGVQcm9wc0VxID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVTdGF0ZVByb3BzRXEsXG4gICAgICAgIF9yZWYyJGFyZU1lcmdlZFByb3BzRSA9IF9yZWYyLmFyZU1lcmdlZFByb3BzRXF1YWwsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmMiRhcmVNZXJnZWRQcm9wc0UgPT09IHVuZGVmaW5lZCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYyJGFyZU1lcmdlZFByb3BzRSxcbiAgICAgICAgZXh0cmFPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbJ3B1cmUnLCAnYXJlU3RhdGVzRXF1YWwnLCAnYXJlT3duUHJvcHNFcXVhbCcsICdhcmVTdGF0ZVByb3BzRXF1YWwnLCAnYXJlTWVyZ2VkUHJvcHNFcXVhbCddKTtcblxuICAgIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gbWF0Y2gobWFwU3RhdGVUb1Byb3BzLCBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsICdtYXBTdGF0ZVRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hdGNoKG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNZXJnZVByb3BzID0gbWF0Y2gobWVyZ2VQcm9wcywgbWVyZ2VQcm9wc0ZhY3RvcmllcywgJ21lcmdlUHJvcHMnKTtcblxuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gJ0Nvbm5lY3QoJyArIG5hbWUgKyAnKSc7XG4gICAgICB9LFxuXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcblxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG5cbiAgICB9LCBleHRyYU9wdGlvbnMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29ubmVjdCgpOyIsImltcG9ydCBQcm92aWRlciwgeyBjcmVhdGVQcm92aWRlciB9IGZyb20gJy4vY29tcG9uZW50cy9Qcm92aWRlcic7XG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IGNvbm5lY3QgZnJvbSAnLi9jb25uZWN0L2Nvbm5lY3QnO1xuXG5leHBvcnQgeyBQcm92aWRlciwgY3JlYXRlUHJvdmlkZXIsIGNvbm5lY3RBZHZhbmNlZCwgY29ubmVjdCB9OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1hdGNoOiBfdGhpcy5jb21wdXRlTWF0Y2goX3RoaXMucHJvcHMuaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IF9leHRlbmRzKHt9LCB0aGlzLmNvbnRleHQucm91dGVyLCB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5oaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXB1dGVNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBcIi9cIixcbiAgICAgIHVybDogXCIvXCIsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgaXNFeGFjdDogcGF0aG5hbWUgPT09IFwiL1wiXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgaGlzdG9yeSA9IF9wcm9wcy5oaXN0b3J5O1xuXG5cbiAgICBpbnZhcmlhbnQoY2hpbGRyZW4gPT0gbnVsbCB8fCBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDEsIFwiQSA8Um91dGVyPiBtYXkgaGF2ZSBvbmx5IG9uZSBjaGlsZCBlbGVtZW50XCIpO1xuXG4gICAgLy8gRG8gdGhpcyBoZXJlIHNvIHdlIGNhbiBzZXRTdGF0ZSB3aGVuIGEgPFJlZGlyZWN0PiBjaGFuZ2VzIHRoZVxuICAgIC8vIGxvY2F0aW9uIGluIGNvbXBvbmVudFdpbGxNb3VudC4gVGhpcyBoYXBwZW5zIGUuZy4gd2hlbiBkb2luZ1xuICAgIC8vIHNlcnZlciByZW5kZXJpbmcgdXNpbmcgYSA8U3RhdGljUm91dGVyPi5cbiAgICB0aGlzLnVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgbWF0Y2g6IF90aGlzMi5jb21wdXRlTWF0Y2goaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgd2FybmluZyh0aGlzLnByb3BzLmhpc3RvcnkgPT09IG5leHRQcm9wcy5oaXN0b3J5LCBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIik7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMudW5saXN0ZW4oKTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgcmV0dXJuIGNoaWxkcmVuID8gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbikgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuUm91dGVyLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuUm91dGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSb3V0ZXIgZnJvbSAncmVhY3Qtcm91dGVyL2VzL1JvdXRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3JlYXRlSGlzdG9yeSBmcm9tICdoaXN0b3J5L2NyZWF0ZUJyb3dzZXJIaXN0b3J5JztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9Sb3V0ZXInO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCcm93c2VyUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgJzxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCAnICsgJ3VzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLicpO1xuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gQnJvd3NlclJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgQnJvd3NlclJvdXRlcjsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3JlYXRlSGlzdG9yeSBmcm9tICdoaXN0b3J5L2NyZWF0ZUhhc2hIaXN0b3J5JztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9Sb3V0ZXInO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGFzaFJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksICc8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgJyArICd1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC4nKTtcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoWydoYXNoYmFuZycsICdub3NsYXNoJywgJ3NsYXNoJ10pLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgSGFzaFJvdXRlcjsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbnZhciBpc01vZGlmaWVkRXZlbnQgPSBmdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxudmFyIExpbmsgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTGluaywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGluaygpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpbmspO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DbGljaykgX3RoaXMucHJvcHMub25DbGljayhldmVudCk7XG5cbiAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICBldmVudC5idXR0b24gPT09IDAgJiYgLy8gaWdub3JlIHJpZ2h0IGNsaWNrc1xuICAgICAgIV90aGlzLnByb3BzLnRhcmdldCAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICB2YXIgaGlzdG9yeSA9IF90aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG4gICAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICAgIHJlcGxhY2UgPSBfdGhpcyRwcm9wcy5yZXBsYWNlLFxuICAgICAgICAgICAgICB0byA9IF90aGlzJHByb3BzLnRvO1xuXG5cbiAgICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIExpbmsucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcmVwbGFjZSA9IF9wcm9wcy5yZXBsYWNlLFxuICAgICAgICB0byA9IF9wcm9wcy50byxcbiAgICAgICAgaW5uZXJSZWYgPSBfcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydyZXBsYWNlJywgJ3RvJywgJ2lubmVyUmVmJ10pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgJ1lvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+Jyk7XG5cbiAgICB2YXIgaHJlZiA9IHRoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeS5jcmVhdGVIcmVmKHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB7IHBhdGhuYW1lOiB0byB9IDogdG8pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2EnLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgb25DbGljazogdGhpcy5oYW5kbGVDbGljaywgaHJlZjogaHJlZiwgcmVmOiBpbm5lclJlZiB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIExpbms7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkxpbmsucHJvcFR5cGVzID0ge1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkLFxuICBpbm5lclJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmNdKVxufTtcbkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICByZXBsYWNlOiBmYWxzZVxufTtcbkxpbmsuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICByZXBsYWNlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgY3JlYXRlSHJlZjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBMaW5rOyIsImV4cG9ydCB2YXIgYWRkTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBoYXNCYXNlbmFtZSA9IGZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBwcmVmaXggKyAnKFxcXFwvfFxcXFw/fCN8JCknLCAnaScpLnRlc3QocGF0aCk7XG59O1xuXG5leHBvcnQgdmFyIHN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBUcmFpbGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgcGFyc2VQYXRoID0gZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcblxuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59O1xuXG5leHBvcnQgdmFyIGNyZWF0ZVBhdGggPSBmdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG5cblxuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcblxuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6ICc/JyArIHNlYXJjaDtcblxuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiAnIycgKyBoYXNoO1xuXG4gIHJldHVybiBwYXRoO1xufTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHsgcGFyc2VQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuXG5leHBvcnQgdmFyIGNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbiA9IHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcblxuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn07XG5cbmV4cG9ydCB2YXIgbG9jYXRpb25zQXJlRXF1YWwgPSBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn07IiwiaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5cbnZhciBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICB2YXIgc2V0UHJvbXB0ID0gZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICB3YXJuaW5nKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKTtcblxuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjb25maXJtVHJhbnNpdGlvblRvID0gZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpO1xuXG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgdmFyIGFwcGVuZExpc3RlbmVyID0gZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIG5vdGlmeUxpc3RlbmVycyA9IGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyOyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgeyBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuXG52YXIgY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG52YXIgY3JlYXRlTWVtb3J5SGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBnZXRVc2VyQ29uZmlybWF0aW9uID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IHByb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHVuZGVmaW5lZCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IHByb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHVuZGVmaW5lZCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcblxuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBjYW5HbyA9IGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH07XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU1lbW9yeUhpc3Rvcnk7IiwiZXhwb3J0IHZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5leHBvcnQgdmFyIGFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5hZGRFdmVudExpc3RlbmVyID8gbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbmV4cG9ydCB2YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxuZXhwb3J0IHZhciBnZXRDb25maXJtYXRpb24gPSBmdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTtcbn07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c0hpc3RvcnkgPSBmdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlID0gZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuZXhwb3J0IHZhciBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1NsYXNoLCBzdHJpcFRyYWlsaW5nU2xhc2gsIGhhc0Jhc2VuYW1lLCBzdHJpcEJhc2VuYW1lLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuaW1wb3J0IHsgY2FuVXNlRE9NLCBhZGRFdmVudExpc3RlbmVyLCByZW1vdmVFdmVudExpc3RlbmVyLCBnZXRDb25maXJtYXRpb24sIHN1cHBvcnRzSGlzdG9yeSwgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSwgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCB9IGZyb20gJy4vRE9NVXRpbHMnO1xuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgZ2V0SGlzdG9yeVN0YXRlID0gZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG52YXIgY3JlYXRlQnJvd3Nlckhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICBpbnZhcmlhbnQoY2FuVXNlRE9NLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcblxuICB2YXIgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IHByb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuXG5cbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcblxuICAgIHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wU3RhdGUgPSBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG5cbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG5cbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCcm93c2VySGlzdG9yeTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIHN0cmlwTGVhZGluZ1NsYXNoLCBzdHJpcFRyYWlsaW5nU2xhc2gsIGhhc0Jhc2VuYW1lLCBzdHJpcEJhc2VuYW1lLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuaW1wb3J0IHsgY2FuVXNlRE9NLCBhZGRFdmVudExpc3RlbmVyLCByZW1vdmVFdmVudExpc3RlbmVyLCBnZXRDb25maXJtYXRpb24sIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoIH0gZnJvbSAnLi9ET01VdGlscyc7XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG52YXIgZ2V0SGFzaFBhdGggPSBmdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn07XG5cbnZhciBwdXNoSGFzaFBhdGggPSBmdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufTtcblxudmFyIHJlcGxhY2VIYXNoUGF0aCA9IGZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHZhciBoYXNoSW5kZXggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJyk7XG5cbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhyZWYuc2xpY2UoMCwgaGFzaEluZGV4ID49IDAgPyBoYXNoSW5kZXggOiAwKSArICcjJyArIHBhdGgpO1xufTtcblxudmFyIGNyZWF0ZUhhc2hIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgaW52YXJpYW50KGNhblVzZURPTSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuXG4gIHZhciBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdW5kZWZpbmVkID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG5cbiAgICB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcblxuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuXG4gICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKTtcblxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuXG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKTtcblxuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUhhc2hIaXN0b3J5OyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVtb3J5Um91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKTtcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5NZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBNZW1vcnlSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBNZW1vcnlSb3V0ZXIgZnJvbSAncmVhY3Qtcm91dGVyL2VzL01lbW9yeVJvdXRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IE1lbW9yeVJvdXRlcjsiLCJpbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gXCJwYXRoLXRvLXJlZ2V4cFwiO1xuXG52YXIgcGF0dGVybkNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG52YXIgY29tcGlsZVBhdGggPSBmdW5jdGlvbiBjb21waWxlUGF0aChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBjYWNoZSA9IHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gfHwgKHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKGNhY2hlW3BhdHRlcm5dKSByZXR1cm4gY2FjaGVbcGF0dGVybl07XG5cbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlID0gcGF0aFRvUmVnZXhwKHBhdHRlcm4sIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgY29tcGlsZWRQYXR0ZXJuID0geyByZTogcmUsIGtleXM6IGtleXMgfTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkUGF0dGVybjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gY29tcGlsZWRQYXR0ZXJuO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGggcGF0dGVybi5cbiAqL1xudmFyIG1hdGNoUGF0aCA9IGZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBwYXJlbnQgPSBhcmd1bWVudHNbMl07XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSBvcHRpb25zID0geyBwYXRoOiBvcHRpb25zIH07XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcblxuXG4gIGlmIChwYXRoID09IG51bGwpIHJldHVybiBwYXJlbnQ7XG5cbiAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoKHBhdGgsIHsgZW5kOiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0pLFxuICAgICAgcmUgPSBfY29tcGlsZVBhdGgucmUsXG4gICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgdmFyIG1hdGNoID0gcmUuZXhlYyhwYXRobmFtZSk7XG5cbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG5cbiAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuXG4gIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLCAvLyB0aGUgcGF0aCBwYXR0ZXJuIHVzZWQgdG8gbWF0Y2hcbiAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLCAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICBpc0V4YWN0OiBpc0V4YWN0LCAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCB7fSlcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoXCI7XG5cbnZhciBpc0VtcHR5Q2hpbGRyZW4gPSBmdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG52YXIgUm91dGUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbWF0Y2g6IF90aGlzLmNvbXB1dGVNYXRjaChfdGhpcy5wcm9wcywgX3RoaXMuY29udGV4dC5yb3V0ZXIpXG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBSb3V0ZS5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IF9leHRlbmRzKHt9LCB0aGlzLmNvbnRleHQucm91dGVyLCB7XG4gICAgICAgIHJvdXRlOiB7XG4gICAgICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMubG9jYXRpb24gfHwgdGhpcy5jb250ZXh0LnJvdXRlci5yb3V0ZS5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaDogdGhpcy5zdGF0ZS5tYXRjaFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXB1dGVNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVNYXRjaChfcmVmLCByb3V0ZXIpIHtcbiAgICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgICBwYXRoID0gX3JlZi5wYXRoLFxuICAgICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgICBzZW5zaXRpdmUgPSBfcmVmLnNlbnNpdGl2ZTtcblxuICAgIGlmIChjb21wdXRlZE1hdGNoKSByZXR1cm4gY29tcHV0ZWRNYXRjaDsgLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG5cbiAgICBpbnZhcmlhbnQocm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG9yIHdpdGhSb3V0ZXIoKSBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICB2YXIgcm91dGUgPSByb3V0ZXIucm91dGU7XG5cbiAgICB2YXIgcGF0aG5hbWUgPSAobG9jYXRpb24gfHwgcm91dGUubG9jYXRpb24pLnBhdGhuYW1lO1xuXG4gICAgcmV0dXJuIG1hdGNoUGF0aChwYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBzdHJpY3Q6IHN0cmljdCwgZXhhY3Q6IGV4YWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9LCByb3V0ZS5tYXRjaCk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWRcIik7XG5cbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5yZW5kZXIgJiYgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkXCIpO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIG5leHRDb250ZXh0KSB7XG4gICAgd2FybmluZyghKG5leHRQcm9wcy5sb2NhdGlvbiAmJiAhdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB3YXJuaW5nKCEoIW5leHRQcm9wcy5sb2NhdGlvbiAmJiB0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBtYXRjaDogdGhpcy5jb21wdXRlTWF0Y2gobmV4dFByb3BzLCBuZXh0Q29udGV4dC5yb3V0ZXIpXG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgbWF0Y2ggPSB0aGlzLnN0YXRlLm1hdGNoO1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudCxcbiAgICAgICAgcmVuZGVyID0gX3Byb3BzLnJlbmRlcjtcbiAgICB2YXIgX2NvbnRleHQkcm91dGVyID0gdGhpcy5jb250ZXh0LnJvdXRlcixcbiAgICAgICAgaGlzdG9yeSA9IF9jb250ZXh0JHJvdXRlci5oaXN0b3J5LFxuICAgICAgICByb3V0ZSA9IF9jb250ZXh0JHJvdXRlci5yb3V0ZSxcbiAgICAgICAgc3RhdGljQ29udGV4dCA9IF9jb250ZXh0JHJvdXRlci5zdGF0aWNDb250ZXh0O1xuXG4gICAgdmFyIGxvY2F0aW9uID0gdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbjtcbiAgICB2YXIgcHJvcHMgPSB7IG1hdGNoOiBtYXRjaCwgbG9jYXRpb246IGxvY2F0aW9uLCBoaXN0b3J5OiBoaXN0b3J5LCBzdGF0aWNDb250ZXh0OiBzdGF0aWNDb250ZXh0IH07XG5cbiAgICBpZiAoY29tcG9uZW50KSByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIDogbnVsbDtcblxuICAgIGlmIChyZW5kZXIpIHJldHVybiBtYXRjaCA/IHJlbmRlcihwcm9wcykgOiBudWxsO1xuXG4gICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gY2hpbGRyZW4ocHJvcHMpO1xuXG4gICAgaWYgKGNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pKSByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJvdXRlLnByb3BUeXBlcyA9IHtcbiAgY29tcHV0ZWRNYXRjaDogUHJvcFR5cGVzLm9iamVjdCwgLy8gcHJpdmF0ZSwgZnJvbSA8U3dpdGNoPlxuICBwYXRoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5Sb3V0ZS5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgcm91dGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pXG59O1xuUm91dGUuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUm91dGUgZnJvbSAncmVhY3Qtcm91dGVyL2VzL1JvdXRlJztcblxuZXhwb3J0IGRlZmF1bHQgUm91dGU7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJvdXRlIGZyb20gJy4vUm91dGUnO1xuaW1wb3J0IExpbmsgZnJvbSAnLi9MaW5rJztcblxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xudmFyIE5hdkxpbmsgPSBmdW5jdGlvbiBOYXZMaW5rKF9yZWYpIHtcbiAgdmFyIHRvID0gX3JlZi50byxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZi5hY3RpdmVDbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIGdldElzQWN0aXZlID0gX3JlZi5pc0FjdGl2ZSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZi5hcmlhQ3VycmVudCxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWyd0bycsICdleGFjdCcsICdzdHJpY3QnLCAnbG9jYXRpb24nLCAnYWN0aXZlQ2xhc3NOYW1lJywgJ2NsYXNzTmFtZScsICdhY3RpdmVTdHlsZScsICdzdHlsZScsICdpc0FjdGl2ZScsICdhcmlhQ3VycmVudCddKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwge1xuICAgIHBhdGg6ICh0eXBlb2YgdG8gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHRvKSkgPT09ICdvYmplY3QnID8gdG8ucGF0aG5hbWUgOiB0byxcbiAgICBleGFjdDogZXhhY3QsXG4gICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgIGNoaWxkcmVuOiBmdW5jdGlvbiBjaGlsZHJlbihfcmVmMikge1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3JlZjIubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2ggPSBfcmVmMi5tYXRjaDtcblxuICAgICAgdmFyIGlzQWN0aXZlID0gISEoZ2V0SXNBY3RpdmUgPyBnZXRJc0FjdGl2ZShtYXRjaCwgbG9jYXRpb24pIDogbWF0Y2gpO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBfZXh0ZW5kcyh7XG4gICAgICAgIHRvOiB0byxcbiAgICAgICAgY2xhc3NOYW1lOiBpc0FjdGl2ZSA/IFtjbGFzc05hbWUsIGFjdGl2ZUNsYXNzTmFtZV0uZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0pLmpvaW4oJyAnKSA6IGNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGU6IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlLCBhY3RpdmVTdHlsZSkgOiBzdHlsZSxcbiAgICAgICAgJ2FyaWEtY3VycmVudCc6IGlzQWN0aXZlICYmIGFyaWFDdXJyZW50XG4gICAgICB9LCByZXN0KSk7XG4gICAgfVxuICB9KTtcbn07XG5cbk5hdkxpbmsucHJvcFR5cGVzID0ge1xuICB0bzogTGluay5wcm9wVHlwZXMudG8sXG4gIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgYXJpYUN1cnJlbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3BhZ2UnLCAnc3RlcCcsICdsb2NhdGlvbicsICd0cnVlJ10pXG59O1xuXG5OYXZMaW5rLmRlZmF1bHRQcm9wcyA9IHtcbiAgYWN0aXZlQ2xhc3NOYW1lOiAnYWN0aXZlJyxcbiAgYXJpYUN1cnJlbnQ6ICd0cnVlJ1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTmF2TGluazsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwcm9tcHRpbmcgdGhlIHVzZXIgYmVmb3JlIG5hdmlnYXRpbmcgYXdheVxuICogZnJvbSBhIHNjcmVlbiB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbnZhciBQcm9tcHQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUHJvbXB0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQcm9tcHQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb21wdCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFByb21wdC5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gZW5hYmxlKG1lc3NhZ2UpIHtcbiAgICBpZiAodGhpcy51bmJsb2NrKSB0aGlzLnVuYmxvY2soKTtcblxuICAgIHRoaXMudW5ibG9jayA9IHRoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeS5ibG9jayhtZXNzYWdlKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgIGlmICh0aGlzLnVuYmxvY2spIHtcbiAgICAgIHRoaXMudW5ibG9jaygpO1xuICAgICAgdGhpcy51bmJsb2NrID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgIGlmICh0aGlzLnByb3BzLndoZW4pIHRoaXMuZW5hYmxlKHRoaXMucHJvcHMubWVzc2FnZSk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLndoZW4pIHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy53aGVuIHx8IHRoaXMucHJvcHMubWVzc2FnZSAhPT0gbmV4dFByb3BzLm1lc3NhZ2UpIHRoaXMuZW5hYmxlKG5leHRQcm9wcy5tZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgfVxuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmRpc2FibGUoKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUHJvbXB0O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Qcm9tcHQucHJvcFR5cGVzID0ge1xuICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgbWVzc2FnZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKS5pc1JlcXVpcmVkXG59O1xuUHJvbXB0LmRlZmF1bHRQcm9wcyA9IHtcbiAgd2hlbjogdHJ1ZVxufTtcblByb21wdC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgYmxvY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUHJvbXB0OyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUHJvbXB0IGZyb20gJ3JlYWN0LXJvdXRlci9lcy9Qcm9tcHQnO1xuXG5leHBvcnQgZGVmYXVsdCBQcm9tcHQ7IiwiaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tIFwicGF0aC10by1yZWdleHBcIjtcblxudmFyIHBhdHRlcm5DYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxudmFyIGNvbXBpbGVHZW5lcmF0b3IgPSBmdW5jdGlvbiBjb21waWxlR2VuZXJhdG9yKHBhdHRlcm4pIHtcbiAgdmFyIGNhY2hlS2V5ID0gcGF0dGVybjtcbiAgdmFyIGNhY2hlID0gcGF0dGVybkNhY2hlW2NhY2hlS2V5XSB8fCAocGF0dGVybkNhY2hlW2NhY2hlS2V5XSA9IHt9KTtcblxuICBpZiAoY2FjaGVbcGF0dGVybl0pIHJldHVybiBjYWNoZVtwYXR0ZXJuXTtcblxuICB2YXIgY29tcGlsZWRHZW5lcmF0b3IgPSBwYXRoVG9SZWdleHAuY29tcGlsZShwYXR0ZXJuKTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkR2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBjb21waWxlZEdlbmVyYXRvcjtcbn07XG5cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0dGVybiBhbmQgcGFyYW1ldGVycy5cbiAqL1xudmFyIGdlbmVyYXRlUGF0aCA9IGZ1bmN0aW9uIGdlbmVyYXRlUGF0aCgpIHtcbiAgdmFyIHBhdHRlcm4gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFwiL1wiO1xuICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICBpZiAocGF0dGVybiA9PT0gXCIvXCIpIHtcbiAgICByZXR1cm4gcGF0dGVybjtcbiAgfVxuICB2YXIgZ2VuZXJhdG9yID0gY29tcGlsZUdlbmVyYXRvcihwYXR0ZXJuKTtcbiAgcmV0dXJuIGdlbmVyYXRvcihwYXJhbXMsIHsgcHJldHR5OiB0cnVlIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2VuZXJhdGVQYXRoOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsIH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBnZW5lcmF0ZVBhdGggZnJvbSBcIi4vZ2VuZXJhdGVQYXRoXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHVwZGF0aW5nIHRoZSBsb2NhdGlvbiBwcm9ncmFtbWF0aWNhbGx5XG4gKiB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbnZhciBSZWRpcmVjdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSZWRpcmVjdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVkaXJlY3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlZGlyZWN0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmlzU3RhdGljID0gZnVuY3Rpb24gaXNTdGF0aWMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5yb3V0ZXIgJiYgdGhpcy5jb250ZXh0LnJvdXRlci5zdGF0aWNDb250ZXh0O1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgaWYgKHRoaXMuaXNTdGF0aWMoKSkgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLmlzU3RhdGljKCkpIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIHByZXZUbyA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG4gICAgdmFyIG5leHRUbyA9IGNyZWF0ZUxvY2F0aW9uKHRoaXMucHJvcHMudG8pO1xuXG4gICAgaWYgKGxvY2F0aW9uc0FyZUVxdWFsKHByZXZUbywgbmV4dFRvKSkge1xuICAgICAgd2FybmluZyhmYWxzZSwgXCJZb3UgdHJpZWQgdG8gcmVkaXJlY3QgdG8gdGhlIHNhbWUgcm91dGUgeW91J3JlIGN1cnJlbnRseSBvbjogXCIgKyAoXCJcXFwiXCIgKyBuZXh0VG8ucGF0aG5hbWUgKyBuZXh0VG8uc2VhcmNoICsgXCJcXFwiXCIpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcHV0ZVRvID0gZnVuY3Rpb24gY29tcHV0ZVRvKF9yZWYpIHtcbiAgICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgICAgdG8gPSBfcmVmLnRvO1xuXG4gICAgaWYgKGNvbXB1dGVkTWF0Y2gpIHtcbiAgICAgIGlmICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgICAgIHBhdGhuYW1lOiBnZW5lcmF0ZVBhdGgodG8ucGF0aG5hbWUsIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG87XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnBlcmZvcm0gPSBmdW5jdGlvbiBwZXJmb3JtKCkge1xuICAgIHZhciBoaXN0b3J5ID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgIHZhciBwdXNoID0gdGhpcy5wcm9wcy5wdXNoO1xuXG4gICAgdmFyIHRvID0gdGhpcy5jb21wdXRlVG8odGhpcy5wcm9wcyk7XG5cbiAgICBpZiAocHVzaCkge1xuICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICB9XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUmVkaXJlY3Q7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgY29tcHV0ZWRNYXRjaDogUHJvcFR5cGVzLm9iamVjdCwgLy8gcHJpdmF0ZSwgZnJvbSA8U3dpdGNoPlxuICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG59O1xuUmVkaXJlY3QuZGVmYXVsdFByb3BzID0ge1xuICBwdXNoOiBmYWxzZVxufTtcblJlZGlyZWN0LmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJlZGlyZWN0OyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUmVkaXJlY3QgZnJvbSAncmVhY3Qtcm91dGVyL2VzL1JlZGlyZWN0JztcblxuZXhwb3J0IGRlZmF1bHQgUmVkaXJlY3Q7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBjcmVhdGVQYXRoIH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBSb3V0ZXIgZnJvbSBcIi4vUm91dGVyXCI7XG5cbnZhciBhZGRMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiID8gcGF0aCA6IFwiL1wiICsgcGF0aDtcbn07XG5cbnZhciBhZGRCYXNlbmFtZSA9IGZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfSk7XG59O1xuXG52YXIgc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG5cbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfSk7XG59O1xuXG52YXIgY3JlYXRlVVJMID0gZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufTtcblxudmFyIHN0YXRpY0hhbmRsZXIgPSBmdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+XCIsIG1ldGhvZE5hbWUpO1xuICB9O1xufTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG5cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG52YXIgU3RhdGljUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhdGljUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5jcmVhdGVIcmVmID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nU2xhc2goX3RoaXMucHJvcHMuYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpO1xuICAgIH0sIF90aGlzLmhhbmRsZVB1c2ggPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzLmNvbnRleHQ7XG5cbiAgICAgIGNvbnRleHQuYWN0aW9uID0gXCJQVVNIXCI7XG4gICAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0O1xuXG4gICAgICBjb250ZXh0LmFjdGlvbiA9IFwiUkVQTEFDRVwiO1xuICAgICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gICAgfSwgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfSwgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IHtcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5jb250ZXh0XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpO1xuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBiYXNlbmFtZSA9IF9wcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgY29udGV4dCA9IF9wcm9wcy5jb250ZXh0LFxuICAgICAgICBsb2NhdGlvbiA9IF9wcm9wcy5sb2NhdGlvbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IHRoaXMuY3JlYXRlSHJlZixcbiAgICAgIGFjdGlvbjogXCJQT1BcIixcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoXCJnb1wiKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcihcImdvQmFja1wiKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcihcImdvRm9yd2FyZFwiKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBoaXN0b3J5OiBoaXN0b3J5IH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5TdGF0aWNSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG59O1xuU3RhdGljUm91dGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgYmFzZW5hbWU6IFwiXCIsXG4gIGxvY2F0aW9uOiBcIi9cIlxufTtcblN0YXRpY1JvdXRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU3RhdGljUm91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgU3RhdGljUm91dGVyIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9TdGF0aWNSb3V0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBTdGF0aWNSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gXCIuL21hdGNoUGF0aFwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN3aXRjaCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB3YXJuaW5nKCEoIW5leHRQcm9wcy5sb2NhdGlvbiAmJiB0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcm91dGUgPSB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuXG4gICAgdmFyIG1hdGNoID0gdm9pZCAwLFxuICAgICAgICBjaGlsZCA9IHZvaWQgMDtcbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgICAgdmFyIF9lbGVtZW50JHByb3BzID0gZWxlbWVudC5wcm9wcyxcbiAgICAgICAgICAgIHBhdGhQcm9wID0gX2VsZW1lbnQkcHJvcHMucGF0aCxcbiAgICAgICAgICAgIGV4YWN0ID0gX2VsZW1lbnQkcHJvcHMuZXhhY3QsXG4gICAgICAgICAgICBzdHJpY3QgPSBfZWxlbWVudCRwcm9wcy5zdHJpY3QsXG4gICAgICAgICAgICBzZW5zaXRpdmUgPSBfZWxlbWVudCRwcm9wcy5zZW5zaXRpdmUsXG4gICAgICAgICAgICBmcm9tID0gX2VsZW1lbnQkcHJvcHMuZnJvbTtcblxuICAgICAgICB2YXIgcGF0aCA9IHBhdGhQcm9wIHx8IGZyb207XG5cbiAgICAgICAgY2hpbGQgPSBlbGVtZW50O1xuICAgICAgICBtYXRjaCA9IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBleGFjdDogZXhhY3QsIHN0cmljdDogc3RyaWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9LCByb3V0ZS5tYXRjaCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHsgbG9jYXRpb246IGxvY2F0aW9uLCBjb21wdXRlZE1hdGNoOiBtYXRjaCB9KSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU3dpdGNoLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvdXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgU3dpdGNoIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9Td2l0Y2gnO1xuXG5leHBvcnQgZGVmYXVsdCBTd2l0Y2g7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBtYXRjaFBhdGggZnJvbSAncmVhY3Qtcm91dGVyL2VzL21hdGNoUGF0aCc7XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSBcImhvaXN0LW5vbi1yZWFjdC1zdGF0aWNzXCI7XG5pbXBvcnQgUm91dGUgZnJvbSBcIi4vUm91dGVcIjtcblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xudmFyIHdpdGhSb3V0ZXIgPSBmdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgQyA9IGZ1bmN0aW9uIEMocHJvcHMpIHtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudFJlZiA9IHByb3BzLndyYXBwZWRDb21wb25lbnRSZWYsXG4gICAgICAgIHJlbWFpbmluZ1Byb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7XG4gICAgICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4ocm91dGVDb21wb25lbnRQcm9wcykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZW1haW5pbmdQcm9wcywgcm91dGVDb21wb25lbnRQcm9wcywge1xuICAgICAgICAgIHJlZjogd3JhcHBlZENvbXBvbmVudFJlZlxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG4gIEMuV3JhcHBlZENvbXBvbmVudCA9IENvbXBvbmVudDtcbiAgQy5wcm9wVHlwZXMgPSB7XG4gICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLmZ1bmNcbiAgfTtcblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgd2l0aFJvdXRlciBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvd2l0aFJvdXRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXI7IiwiaW1wb3J0IF9Ccm93c2VyUm91dGVyIGZyb20gJy4vQnJvd3NlclJvdXRlcic7XG5leHBvcnQgeyBfQnJvd3NlclJvdXRlciBhcyBCcm93c2VyUm91dGVyIH07XG5pbXBvcnQgX0hhc2hSb3V0ZXIgZnJvbSAnLi9IYXNoUm91dGVyJztcbmV4cG9ydCB7IF9IYXNoUm91dGVyIGFzIEhhc2hSb3V0ZXIgfTtcbmltcG9ydCBfTGluayBmcm9tICcuL0xpbmsnO1xuZXhwb3J0IHsgX0xpbmsgYXMgTGluayB9O1xuaW1wb3J0IF9NZW1vcnlSb3V0ZXIgZnJvbSAnLi9NZW1vcnlSb3V0ZXInO1xuZXhwb3J0IHsgX01lbW9yeVJvdXRlciBhcyBNZW1vcnlSb3V0ZXIgfTtcbmltcG9ydCBfTmF2TGluayBmcm9tICcuL05hdkxpbmsnO1xuZXhwb3J0IHsgX05hdkxpbmsgYXMgTmF2TGluayB9O1xuaW1wb3J0IF9Qcm9tcHQgZnJvbSAnLi9Qcm9tcHQnO1xuZXhwb3J0IHsgX1Byb21wdCBhcyBQcm9tcHQgfTtcbmltcG9ydCBfUmVkaXJlY3QgZnJvbSAnLi9SZWRpcmVjdCc7XG5leHBvcnQgeyBfUmVkaXJlY3QgYXMgUmVkaXJlY3QgfTtcbmltcG9ydCBfUm91dGUgZnJvbSAnLi9Sb3V0ZSc7XG5leHBvcnQgeyBfUm91dGUgYXMgUm91dGUgfTtcbmltcG9ydCBfUm91dGVyIGZyb20gJy4vUm91dGVyJztcbmV4cG9ydCB7IF9Sb3V0ZXIgYXMgUm91dGVyIH07XG5pbXBvcnQgX1N0YXRpY1JvdXRlciBmcm9tICcuL1N0YXRpY1JvdXRlcic7XG5leHBvcnQgeyBfU3RhdGljUm91dGVyIGFzIFN0YXRpY1JvdXRlciB9O1xuaW1wb3J0IF9Td2l0Y2ggZnJvbSAnLi9Td2l0Y2gnO1xuZXhwb3J0IHsgX1N3aXRjaCBhcyBTd2l0Y2ggfTtcbmltcG9ydCBfbWF0Y2hQYXRoIGZyb20gJy4vbWF0Y2hQYXRoJztcbmV4cG9ydCB7IF9tYXRjaFBhdGggYXMgbWF0Y2hQYXRoIH07XG5pbXBvcnQgX3dpdGhSb3V0ZXIgZnJvbSAnLi93aXRoUm91dGVyJztcbmV4cG9ydCB7IF93aXRoUm91dGVyIGFzIHdpdGhSb3V0ZXIgfTsiLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5leHBvcnQgZGVmYXVsdCByb290O1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5leHBvcnQgZGVmYXVsdCBTeW1ib2w7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0UmF3VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG9iamVjdFRvU3RyaW5nO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGdldFJhd1RhZyBmcm9tICcuL19nZXRSYXdUYWcuanMnO1xuaW1wb3J0IG9iamVjdFRvU3RyaW5nIGZyb20gJy4vX29iamVjdFRvU3RyaW5nLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXRUYWc7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb3ZlckFyZztcbiIsImltcG9ydCBvdmVyQXJnIGZyb20gJy4vX292ZXJBcmcuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0UHJvdG90eXBlO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0TGlrZTtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGdldFByb3RvdHlwZSBmcm9tICcuL19nZXRQcm90b3R5cGUuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbnZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjguMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNQbGFpbk9iamVjdDtcbiIsIlxuaW1wb3J0IGNvbnN0YW50cyBmcm9tICcuLi9jb25zdGFudHMvY29uc3RhbnRzJ1xuaW1wb3J0IGFwaSBmcm9tIFwiLi4vYXBpXCI7XG5cbmV4cG9ydCBjb25zdCB1c2VyTG9nZ2VkSW4gPSB1c2VyID0+ICh7XG4gIHR5cGU6IGNvbnN0YW50cy5VU0VSX0xPR0dFRF9JTixcbiAgdXNlclxufSk7XG5cbmV4cG9ydCBjb25zdCB1c2VyTG9nZ2VkT3V0ID0gKCkgPT4gKHtcbiAgdHlwZTogY29uc3RhbnRzLlVTRVJfTE9HR0VEX09VVFxufSk7XG5cbmV4cG9ydCBjb25zdCBsb2dpbiA9IGNyZWRlbnRpYWxzID0+IGRpc3BhdGNoID0+XG4gIGFwaS51c2VyLmxvZ2luKGNyZWRlbnRpYWxzKS50aGVuKHVzZXIgPT4ge1xuXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZXInLCBKU09OLnN0cmluZ2lmeSh1c2VyKSk7XG4gICAgZGlzcGF0Y2godXNlckxvZ2dlZEluKHVzZXIpKTtcbiAgfSk7XG5cbmV4cG9ydCBjb25zdCBsb2dvdXQgPSAoKSA9PiBkaXNwYXRjaCA9PiB7XG4gIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd1c2VyJyk7XG4gIGRpc3BhdGNoKHVzZXJMb2dnZWRPdXQoKSk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2lnbnVwID0gZGF0YSA9PiBkaXNwYXRjaCA9PlxuICBhcGkudXNlci5zaWdudXAoZGF0YSkudGhlbih1c2VyID0+IHtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlcicsIEpTT04uc3RyaW5naWZ5KHVzZXIpKTtcbiAgICBkaXNwYXRjaCh1c2VyTG9nZ2VkSW4odXNlcikpO1xuICB9KTtcblxuZXhwb3J0IGNvbnN0IGNvbmZpcm0gPSB0b2tlbiA9PiBkaXNwYXRjaCA9PlxuICBhcGkudXNlci5jb25maXJtKHRva2VuKS50aGVuKHVzZXIgPT4ge1xuICAgIGxvY2FsU3RvcmFnZS5ib29rd29ybUpXVCA9IHVzZXIudG9rZW47XG4gICAgZGlzcGF0Y2godXNlckxvZ2dlZEluKHVzZXIpKTtcbiAgfSk7XG5cbmV4cG9ydCBjb25zdCByZXNldFBhc3N3b3JkUmVxdWVzdCA9ICh7IGVtYWlsIH0pID0+ICgpID0+XG4gIGFwaS51c2VyLnJlc2V0UGFzc3dvcmRSZXF1ZXN0KGVtYWlsKTtcblxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlVG9rZW4gPSB0b2tlbiA9PiAoKSA9PiBhcGkudXNlci52YWxpZGF0ZVRva2VuKHRva2VuKTtcblxuZXhwb3J0IGNvbnN0IHJlc2V0UGFzc3dvcmQgPSBkYXRhID0+ICgpID0+IGFwaS51c2VyLnJlc2V0UGFzc3dvcmQoZGF0YSk7XG4iLCJjb25zdCBjb25zdGFudHMgPSB7XG5cdE1PVklFU19GRVRDSEVEOiAnTU9WSUVTX0ZFVENIRUQnLFxuXHRNT1ZJRV9DUkVBVEVEOiAnTU9WSUVfQ1JFQVRFRCcsXG5cdENMRUFSX0FMTF9NT1ZJRVM6ICdDTEVBUl9BTExfTU9WSUVTJyxcblxuXHRVU0VSX0xPR0dFRF9JTjogJ1VTRVJfTE9HR0VEX0lOJyxcblx0VVNFUl9MT0dHRURfT1VUOiAnVVNFUl9MT0dHRURfT1VUJ1xuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbnN0YW50czsiLCJpbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICdsb2Rhc2gtZXMvaXNQbGFpbk9iamVjdCc7XG5pbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbmV4cG9ydCB2YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6ICdAQHJlZHV4L0lOSVQnXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICAgKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAgICpcbiAgICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICAgKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gICAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICAgKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gICAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gICAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gICAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAgICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gICAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAgICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICAgKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICAgKlxuICAgKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICAgKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gICAqL1xufTtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcblxuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjtcbiAgICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGVzLklOSVQgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHsgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfVxuXG4gIC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGVzLklOSVQgfSk7XG5cbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn0iLCJpbXBvcnQgeyBBY3Rpb25UeXBlcyB9IGZyb20gJy4vY3JlYXRlU3RvcmUnO1xuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnbG9kYXNoLWVzL2lzUGxhaW5PYmplY3QnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi91dGlscy93YXJuaW5nJztcblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25OYW1lID0gYWN0aW9uVHlwZSAmJiAnXCInICsgYWN0aW9uVHlwZS50b1N0cmluZygpICsgJ1wiJyB8fCAnYW4gYWN0aW9uJztcblxuICByZXR1cm4gJ0dpdmVuIGFjdGlvbiAnICsgYWN0aW9uTmFtZSArICcsIHJlZHVjZXIgXCInICsga2V5ICsgJ1wiIHJldHVybmVkIHVuZGVmaW5lZC4gJyArICdUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuICcgKyAnSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuJztcbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuICdUaGUgJyArIGFyZ3VtZW50TmFtZSArICcgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcIicgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArICdcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyAnICsgKCdrZXlzOiBcIicgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArICdcIicpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcblxuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuICdVbmV4cGVjdGVkICcgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArICcgJyArICgnXCInICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyAnXCIgZm91bmQgaW4gJyArIGFyZ3VtZW50TmFtZSArICcuICcpICsgJ0V4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogJyArICgnXCInICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyAnXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7IHR5cGU6IEFjdGlvblR5cGVzLklOSVQgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlciBcIicgKyBrZXkgKyAnXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gJyArICdJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgJyArICdleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5ICcgKyAnbm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvblxcJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCAnICsgJ3lvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuJyk7XG4gICAgfVxuXG4gICAgdmFyIHR5cGUgPSAnQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTl8nICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwgeyB0eXBlOiB0eXBlIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiAnICsgKCdEb25cXCd0IHRyeSB0byBoYW5kbGUgJyArIEFjdGlvblR5cGVzLklOSVQgKyAnIG9yIG90aGVyIGFjdGlvbnMgaW4gXCJyZWR1eC8qXCIgJykgKyAnbmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgJyArICdjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCAnICsgJ2luIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSAnICsgJ2FjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLicpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoJ05vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcIicgKyBrZXkgKyAnXCInKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHZvaWQgMDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yID0gdm9pZCAwO1xuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKCkge1xuICAgIHZhciBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50c1sxXTtcblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufSIsImZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCAnICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzKSArICcuICcgKyAnRGlkIHlvdSB3cml0ZSBcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXCIgaW5zdGVhZCBvZiBcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cIj8nKTtcbiAgfVxuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWN0aW9uQ3JlYXRvcnMpO1xuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufSIsIi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn0iLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKTtcbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBzdG9yZS5kaXNwYXRjaDtcbiAgICAgIHZhciBjaGFpbiA9IFtdO1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaChhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodW5kZWZpbmVkLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuXG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0b3JlLCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59IiwiaW1wb3J0IGNyZWF0ZVN0b3JlIGZyb20gJy4vY3JlYXRlU3RvcmUnO1xuaW1wb3J0IGNvbWJpbmVSZWR1Y2VycyBmcm9tICcuL2NvbWJpbmVSZWR1Y2Vycyc7XG5pbXBvcnQgYmluZEFjdGlvbkNyZWF0b3JzIGZyb20gJy4vYmluZEFjdGlvbkNyZWF0b3JzJztcbmltcG9ydCBhcHBseU1pZGRsZXdhcmUgZnJvbSAnLi9hcHBseU1pZGRsZXdhcmUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJy4vdXRpbHMvd2FybmluZyc7XG5cbi8qXG4qIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuKi9cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXFwncHJvZHVjdGlvblxcJy4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIERlZmluZVBsdWdpbiBmb3Igd2VicGFjayAoaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMDAzMDAzMSkgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBjcmVhdGVTdG9yZSwgY29tYmluZVJlZHVjZXJzLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSB9OyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7IC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghUkVBQ1RfU1RBVElDU1trZXldICYmICFLTk9XTl9TVEFUSUNTW2tleV0gJiYgKCFibGFja2xpc3QgfHwgIWJsYWNrbGlzdFtrZXldKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICB0cnkgeyAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBhZGRMZWFkaW5nU2xhc2ggPSBleHBvcnRzLmFkZExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59O1xuXG52YXIgc3RyaXBMZWFkaW5nU2xhc2ggPSBleHBvcnRzLnN0cmlwTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn07XG5cbnZhciBoYXNCYXNlbmFtZSA9IGV4cG9ydHMuaGFzQmFzZW5hbWUgPSBmdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcHJlZml4ICsgJyhcXFxcL3xcXFxcP3wjfCQpJywgJ2knKS50ZXN0KHBhdGgpO1xufTtcblxudmFyIHN0cmlwQmFzZW5hbWUgPSBleHBvcnRzLnN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn07XG5cbnZhciBzdHJpcFRyYWlsaW5nU2xhc2ggPSBleHBvcnRzLnN0cmlwVHJhaWxpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59O1xuXG52YXIgcGFyc2VQYXRoID0gZXhwb3J0cy5wYXJzZVBhdGggPSBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbnZhciBjcmVhdGVQYXRoID0gZXhwb3J0cy5jcmVhdGVQYXRoID0gZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuXG5cbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG5cbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiAnPycgKyBzZWFyY2g7XG5cbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogJyMnICsgaGFzaDtcblxuICByZXR1cm4gcGF0aDtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5jb25zdCBFcnJvck1zZyA9ICh7IHRleHQgfSkgPT4gKFxuXHQ8c3BhbiBjbGFzc05hbWU9XCJlcnJvci10ZXh0IGZvbnQtd2VpZ2h0LWJvbGQgdGV4dC1kYW5nZXJcIj57IHRleHQgfTwvc3Bhbj5cbilcblxuZXhwb3J0IGRlZmF1bHQgRXJyb3JNc2c7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYXNzZXJ0U3RyaW5nO1xuZnVuY3Rpb24gYXNzZXJ0U3RyaW5nKGlucHV0KSB7XG4gIHZhciBpc1N0cmluZyA9IHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgfHwgaW5wdXQgaW5zdGFuY2VvZiBTdHJpbmc7XG5cbiAgaWYgKCFpc1N0cmluZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoaXMgbGlicmFyeSAodmFsaWRhdG9yLmpzKSB2YWxpZGF0ZXMgc3RyaW5ncyBvbmx5Jyk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8pIHtcbiAgdmFyIGZyb20gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gdG8gJiYgdG8uc3BsaXQoJy8nKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IGZyb20gJiYgZnJvbS5zcGxpdCgnLycpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSB2b2lkIDA7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkge1xuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuICB9aWYgKG11c3RFbmRBYnMgJiYgZnJvbVBhcnRzWzBdICE9PSAnJyAmJiAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKSkgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lOyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYVR5cGUgPSB0eXBlb2YgYSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYSk7XG4gIHZhciBiVHlwZSA9IHR5cGVvZiBiID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihiKTtcblxuICBpZiAoYVR5cGUgIT09IGJUeXBlKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGFUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSBhLnZhbHVlT2YoKTtcbiAgICB2YXIgYlZhbHVlID0gYi52YWx1ZU9mKCk7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYik7XG5cbiAgICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBhS2V5cy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7IiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5sb2NhdGlvbnNBcmVFcXVhbCA9IGV4cG9ydHMuY3JlYXRlTG9jYXRpb24gPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVzb2x2ZVBhdGhuYW1lID0gcmVxdWlyZSgncmVzb2x2ZS1wYXRobmFtZScpO1xuXG52YXIgX3Jlc29sdmVQYXRobmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXNvbHZlUGF0aG5hbWUpO1xuXG52YXIgX3ZhbHVlRXF1YWwgPSByZXF1aXJlKCd2YWx1ZS1lcXVhbCcpO1xuXG52YXIgX3ZhbHVlRXF1YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsdWVFcXVhbCk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNyZWF0ZUxvY2F0aW9uID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb24gPSB2b2lkIDA7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSAoMCwgX1BhdGhVdGlscy5wYXJzZVBhdGgpKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuXG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICgwLCBfcmVzb2x2ZVBhdGhuYW1lMi5kZWZhdWx0KShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufTtcblxudmFyIGxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5sb2NhdGlvbnNBcmVFcXVhbCA9IGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiAoMCwgX3ZhbHVlRXF1YWwyLmRlZmF1bHQpKGEuc3RhdGUsIGIuc3RhdGUpO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSBmdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgdmFyIHNldFByb21wdCA9IGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJyk7XG5cbiAgICBwcm9tcHQgPSBuZXh0UHJvbXB0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgY29uZmlybVRyYW5zaXRpb25UbyA9IGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKTtcblxuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIHZhciBhcHBlbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBub3RpZnlMaXN0ZW5lcnMgPSBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgY2FuVXNlRE9NID0gZXhwb3J0cy5jYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG52YXIgYWRkRXZlbnRMaXN0ZW5lciA9IGV4cG9ydHMuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLmFkZEV2ZW50TGlzdGVuZXIgPyBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxudmFyIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSBleHBvcnRzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyID8gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbnZhciBnZXRDb25maXJtYXRpb24gPSBleHBvcnRzLmdldENvbmZpcm1hdGlvbiA9IGZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICByZXR1cm4gY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpO1xufTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG52YXIgc3VwcG9ydHNIaXN0b3J5ID0gZXhwb3J0cy5zdXBwb3J0c0hpc3RvcnkgPSBmdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xudmFyIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBleHBvcnRzLnN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG52YXIgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBleHBvcnRzLnN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoID0gZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG52YXIgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGV4cG9ydHMuaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn07IiwiaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHVzZXI6IHtcbiAgICBsb2dpbjogY3JlZGVudGlhbHMgPT4ge1xuICAgICAgLy8gc2VuZCBhamF4IGZvciBnZXQgdXNlciBpbmZvIHdoaWNoIHdhcyBsb2dlZFxuICAgICAgLy8gYXhpb3MucG9zdChcIi9hcGkvYXV0aFwiLCB7IGNyZWRlbnRpYWxzIH0pLnRoZW4ocmVzID0+IHJlcy5kYXRhLnVzZXIpLFxuICAgICAgXG4gICAgICAvLyBzaW11bGF0ZSBzZXJ2ZXIgc2lkZSB3b3JrIGZvciBnZXR0aW5nIGxvZ2VkIHVzZXIgaW5mbyh1c2UgbG9jYWxTdG9yYWdlKVxuICAgICAgY29uc3QgdXNlcnMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VycycpKTtcbiAgICAgIGxldCBsb2dpbmdVc2VyID0gbnVsbDtcbiAgICAgIGZvcihsZXQgaT0wO2k8dXNlcnMubGVuZ3RoO2krKykge1xuICAgICAgICBpZiAoIGNyZWRlbnRpYWxzLmVtYWlsID09IHVzZXJzW2ldLmVtYWlsICYmIGNyZWRlbnRpYWxzLnBhc3N3b3JkID09IHVzZXJzW2ldLnBhc3N3b3JkICl7XG4gICAgICAgICAgbG9naW5nVXNlciA9IHVzZXJzW2ldO1xuICAgICAgICB9IFxuICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShsb2dpbmdVc2VyKTtcbiAgICAgICAgICAgIH0sIDUwMClcblxuICAgICAgICAgIH0pXG4gICAgfSxcbiAgICBzaWdudXA6IHVzZXIgPT4ge1xuXG4gICAgICAvL3N0b3JlIG5ldyB1c2VyIGluIGxvY2FsU3RvcmFnZVxuICAgICAgbGV0IHVzZXJUb1N0b3JlICA9IHVzZXI7XG4gICAgICBkZWxldGUgdXNlclRvU3RvcmVbJ3JlcGVhdF9wYXNzd29yZCddO1xuICAgICAgXG4gICAgICBsZXQgdXNlcnMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VycycpKTtcbiAgICAgIHVzZXJzLnB1c2godXNlclRvU3RvcmUpXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInVzZXJzXCIsIEpTT04uc3RyaW5naWZ5KHVzZXJzKSk7XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKT0+IHtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh1c2VyVG9TdG9yZSk7XG4gICAgICAgICAgfSwgNTAwKVxuICAgICAgfSlcblx0ICAvLyBzZW5kIHJlcXVlc3QgdG8gc2VydmVyIHRvIHN0b3JlIG5ldyB1c2VyXG4gICAgICAvLyBheGlvcy5wb3N0KFwiL2FwaS91c2Vyc1wiLCB7IHVzZXIgfSkudGhlbihyZXMgPT4gcmVzLmRhdGEudXNlcilcbiAgICB9XG4gIH0sXG4gIG1vdmllOiB7XG4gIFx0Ly8gZmV0Y2hBbGw6ICgpID0+IGF4aW9zLmdldChcIi9hcGkvYm9va3NcIikudGhlbihyZXMgPT4gcmVzLmRhdGEuYm9va3MpLFxuICAgIGZldGNoQWxsOiB1c2VySWQgPT4ge1xuICAgICAgXG4gICAgICAvL2ZldGNoZWQgYWxsIG1vdmllcyBvbmUgdXNlciB3aXRoIHVzZXJJZCh1c2VyRW1haWwpIGZyb20gbG9jYWxTdG9yYWdlXG4gICAgICBsZXQgYWxsTW92aWVzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbW92aWVzJykpO1xuICAgICAgbGV0IHVzZXJzTW92aWVzID0gW107XG4gICAgICAvLyBjb25zb2xlLmxvZygnbW92aWVzUycsIG1vdmllcyk7XG4gICAgICBmb3IobGV0IGk9MDtpPGFsbE1vdmllcy5sZW5ndGg7aSsrKSB7XG4gICAgICAgIGlmKCBhbGxNb3ZpZXNbaV0udXNlckVtYWlsID09IHVzZXJJZCApIHtcbiAgICAgICAgICB1c2Vyc01vdmllcyA9IGFsbE1vdmllc1tpXS51c2Vyc01vdmllcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpPT4ge1xuICAgICAgICAgIHJldHVybiByZXNvbHZlKHVzZXJzTW92aWVzKTtcbiAgICAgICAgfSwgNTAwKVxuICAgICAgfSlcbiAgICB9XG4gIFx0LFxuICAgIGFkZE1vdmllOiBkYXRhRm9yQWRkTW92aWUgPT4ge1xuICAgICAgbGV0IG5ld01vdmllID0gZGF0YUZvckFkZE1vdmllO1xuICAgICAgbGV0IGlzVXNlck1vdmllc0V4aXN0ID0gZmFsc2U7XG4gICAgICBcbiAgICAgIGxldCBtb3ZpZXNBbGxVc2VycyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ21vdmllcycpKTsvL2FycmF5XG4gICAgICBsZXQgdXNlcklkID0gZGF0YUZvckFkZE1vdmllLnVzZXJFbWFpbDtcblxuICAgICAgLy8gZmluZCBpbiBsb2NhbFN0b3JhZ2UgbW92aWUgbGlzdCBieSB1c2VyRW1haWwgYW5kIHN0b3JlIHRoZXJlIG5ldyBtb3ZpZSBkYXRhXG4gICAgICBmb3IobGV0IGkgPSAwOyBpPG1vdmllc0FsbFVzZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICggbW92aWVzQWxsVXNlcnNbaV0udXNlckVtYWlsID09IHVzZXJJZCApIHtcbiAgICAgICAgICBkZWxldGUgbmV3TW92aWUudXNlckVtYWlsO1xuICAgICAgICAgIG1vdmllc0FsbFVzZXJzW2ldLnVzZXJzTW92aWVzLnB1c2goIG5ld01vdmllICk7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJtb3ZpZXNcIiwgSlNPTi5zdHJpbmdpZnkobW92aWVzQWxsVXNlcnMpKTtcbiAgICAgICAgICBpc1VzZXJNb3ZpZXNFeGlzdCA9ICFpc1VzZXJNb3ZpZXNFeGlzdDtcbiAgICAgICAgfSBcbiAgICAgIH1cbiAgICAgIC8vIGNyZWF0ZSBtb3ZpZSdzIGxpc3QgZm9yIG5ldyB1c2VyXG4gICAgICBpZiAoICFpc1VzZXJNb3ZpZXNFeGlzdCApIHtcbiAgICAgICAgZGVsZXRlIG5ld01vdmllLnVzZXJFbWFpbDtcbiAgICAgICAgbGV0IHVzZXJNb3ZpZXNPYmogPSB7XG4gICAgICAgICAgdXNlckVtYWlsOiB1c2VySWQsIFxuICAgICAgICAgIHVzZXJzTW92aWVzOiBbbmV3TW92aWVdXG4gICAgICAgIH1cbiAgICAgICAgbW92aWVzQWxsVXNlcnMucHVzaCggdXNlck1vdmllc09iaiApO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIm1vdmllc1wiLCBKU09OLnN0cmluZ2lmeSggbW92aWVzQWxsVXNlcnMgKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCk9PiB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUobmV3TW92aWUpO1xuICAgICAgICB9LCA1MDApXG4gICAgICB9KVxuICAgICAgLy8gYXhpb3MucG9zdChcIi9hcGkvYWRkL21vdmllXCIsIHsgbmV3TW92aWUgfSkudGhlbihyZXMgPT4gcmVzLmRhdGEubmV3TW92aWUpXG5cbiAgICB9LFxuICAgIGNsZWFyQWxsTW92aWVzOiB1c2VySWQgPT4ge1xuICAgICAgbGV0IG1vdmllc0FsbFVzZXJzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbW92aWVzJykpOy8vYXJyYXlcbiAgICAgIC8vIGNsZWFyIGxpc3Qgb2YgbW92aWVzIGluIGxvY2FsU3RvcmFnZVxuICAgICAgZm9yKGxldCBpID0gMDsgaTxtb3ZpZXNBbGxVc2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIG1vdmllc0FsbFVzZXJzW2ldLnVzZXJFbWFpbCA9PSB1c2VySWQgKSB7XG4gICAgICAgICAgbW92aWVzQWxsVXNlcnNbaV0udXNlcnNNb3ZpZXMubGVuZ3RoID0gMDtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIm1vdmllc1wiLCBKU09OLnN0cmluZ2lmeShtb3ZpZXNBbGxVc2VycykpO1xuICAgICAgICB9IFxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKT0+IHtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShbXSk7XG4gICAgICAgIH0sIDUwMClcbiAgICAgIH0pXG4gICAgICAvLyBheGlvcy5wb3N0KFwiL2FwaS9jbGVhci9tb3ZpZXNcIiwgeyB1c2VySWQgfSkudGhlbihyZXMgPT4gcmVzLmRhdGEuc3RhdHVzKVxuICAgIH1cblxuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcbnZhciBidG9hID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5idG9hICYmIHdpbmRvdy5idG9hLmJpbmQod2luZG93KSkgfHwgcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J0b2EnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB2YXIgbG9hZEV2ZW50ID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG4gICAgdmFyIHhEb21haW4gPSBmYWxzZTtcblxuICAgIC8vIEZvciBJRSA4LzkgQ09SUyBzdXBwb3J0XG4gICAgLy8gT25seSBzdXBwb3J0cyBQT1NUIGFuZCBHRVQgY2FsbHMgYW5kIGRvZXNuJ3QgcmV0dXJucyB0aGUgcmVzcG9uc2UgaGVhZGVycy5cbiAgICAvLyBET04nVCBkbyB0aGlzIGZvciB0ZXN0aW5nIGIvYyBYTUxIdHRwUmVxdWVzdCBpcyBtb2NrZWQsIG5vdCBYRG9tYWluUmVxdWVzdC5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB3aW5kb3cuWERvbWFpblJlcXVlc3QgJiYgISgnd2l0aENyZWRlbnRpYWxzJyBpbiByZXF1ZXN0KSAmJlxuICAgICAgICAhaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSB7XG4gICAgICByZXF1ZXN0ID0gbmV3IHdpbmRvdy5YRG9tYWluUmVxdWVzdCgpO1xuICAgICAgbG9hZEV2ZW50ID0gJ29ubG9hZCc7XG4gICAgICB4RG9tYWluID0gdHJ1ZTtcbiAgICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uIGhhbmRsZVByb2dyZXNzKCkge307XG4gICAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7fTtcbiAgICB9XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0W2xvYWRFdmVudF0gPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQgJiYgIXhEb21haW4pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIC8vIElFIHNlbmRzIDEyMjMgaW5zdGVhZCBvZiAyMDQgKGh0dHBzOi8vZ2l0aHViLmNvbS9temFicmlza2llL2F4aW9zL2lzc3Vlcy8yMDEpXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAyMDQgOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAnTm8gQ29udGVudCcgOiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIHZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcblxuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiaW1wb3J0IGNvbnN0YW50cyBmcm9tICcuLi9jb25zdGFudHMvY29uc3RhbnRzJ1xuaW1wb3J0IGFwaSBmcm9tIFwiLi4vYXBpXCI7XG5cbi8vIGRhdGEuZW50aXRpZXMuYm9va3NcbmNvbnN0IG1vdmllc0ZldGNoZWQgPSBtb3ZpZXMgPT4gKHtcbiAgdHlwZTogY29uc3RhbnRzLk1PVklFU19GRVRDSEVELFxuICBtb3ZpZXNcbn0pO1xuXG5jb25zdCBtb3ZpZUNyZWF0ZWQgPSBtb3ZpZSA9PiAoe1xuICB0eXBlOiBjb25zdGFudHMuTU9WSUVfQ1JFQVRFRCxcbiAgbW92aWVcbn0pO1xuXG5cbmNvbnN0IGNsZWFyQWxsTW92aWVzID0gbW92aWUgPT4gKHtcbiAgdHlwZTogY29uc3RhbnRzLkNMRUFSX0FMTF9NT1ZJRVMsXG4gIG1vdmllXG59KTtcblxuZXhwb3J0IGNvbnN0IGZldGNoTW92aWVzID0gdXNlcklkID0+IGRpc3BhdGNoID0+IHtcblxuICAgIGFwaS5tb3ZpZVxuICAgICAgLmZldGNoQWxsKCB1c2VySWQgKVxuICAgICAgLnRoZW4obW92aWVzID0+IHtcbiAgICAgICAgZGlzcGF0Y2gobW92aWVzRmV0Y2hlZChtb3ZpZXMpKVxuICAgICAgICB9IFxuICAgICAgKVxuICB9XG4gIDtcblxuXG5leHBvcnQgY29uc3QgYWRkTmV3TW92aWUgPSBkYXRhID0+IGRpc3BhdGNoID0+XG4gIGFwaS5tb3ZpZVxuICAgIC5hZGRNb3ZpZShkYXRhKVxuICAgIC50aGVuKG1vdmllID0+IGRpc3BhdGNoKG1vdmllQ3JlYXRlZChtb3ZpZSkpKTtcblxuZXhwb3J0IGNvbnN0IGNsZWFyTGlzdCA9IHVzZXJJZCA9PiBkaXNwYXRjaCA9PlxuICBhcGkubW92aWVcbiAgICAuY2xlYXJBbGxNb3ZpZXModXNlcklkKVxuICAgIC50aGVuKG1vdmllID0+IGRpc3BhdGNoKGNsZWFyQWxsTW92aWVzKG1vdmllKSkpO1xuXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuZXhwb3J0IGRlZmF1bHQgZnJlZUdsb2JhbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9Mb2NhdGlvblV0aWxzID0gcmVxdWlyZSgnLi9Mb2NhdGlvblV0aWxzJyk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IHJlcXVpcmUoJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcik7XG5cbnZhciBfRE9NVXRpbHMgPSByZXF1aXJlKCcuL0RPTVV0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBnZXRIaXN0b3J5U3RhdGUgPSBmdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cbnZhciBjcmVhdGVCcm93c2VySGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShfRE9NVXRpbHMuY2FuVXNlRE9NLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSAoMCwgX0RPTVV0aWxzLnN1cHBvcnRzSGlzdG9yeSkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gISgwLCBfRE9NVXRpbHMuc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSkoKTtcblxuICB2YXIgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IHByb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBfRE9NVXRpbHMuZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gKDAsIF9QYXRoVXRpbHMuc3RyaXBUcmFpbGluZ1NsYXNoKSgoMCwgX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2gpKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuXG5cbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcblxuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoIWJhc2VuYW1lIHx8ICgwLCBfUGF0aFV0aWxzLmhhc0Jhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gKDAsIF9QYXRoVXRpbHMuc3RyaXBCYXNlbmFtZSkocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGtleSk7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcFN0YXRlID0gZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmICgoMCwgX0RPTVV0aWxzLmlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQpKGV2ZW50KSkgcmV0dXJuO1xuXG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG5cbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgKDAsIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKSh3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgICgwLCBfRE9NVXRpbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcikod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgKDAsIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKSh3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVCcm93c2VySGlzdG9yeTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gcmVxdWlyZSgnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcicpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKTtcblxudmFyIF9ET01VdGlscyA9IHJlcXVpcmUoJy4vRE9NVXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArICgwLCBfUGF0aFV0aWxzLnN0cmlwTGVhZGluZ1NsYXNoKShwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogX1BhdGhVdGlscy5zdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBfUGF0aFV0aWxzLmFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbnZhciBnZXRIYXNoUGF0aCA9IGZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufTtcblxudmFyIHB1c2hIYXNoUGF0aCA9IGZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHJldHVybiB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59O1xuXG52YXIgcmVwbGFjZUhhc2hQYXRoID0gZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoJyMnKTtcblxuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh3aW5kb3cubG9jYXRpb24uaHJlZi5zbGljZSgwLCBoYXNoSW5kZXggPj0gMCA/IGhhc2hJbmRleCA6IDApICsgJyMnICsgcGF0aCk7XG59O1xuXG52YXIgY3JlYXRlSGFzaEhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoX0RPTVV0aWxzLmNhblVzZURPTSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSAoMCwgX0RPTVV0aWxzLnN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKSgpO1xuXG4gIHZhciBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gX0RPTVV0aWxzLmdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IHByb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHVuZGVmaW5lZCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyAoMCwgX1BhdGhVdGlscy5zdHJpcFRyYWlsaW5nU2xhc2gpKCgwLCBfUGF0aFV0aWxzLmFkZExlYWRpbmdTbGFzaCkocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG5cbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCFiYXNlbmFtZSB8fCAoMCwgX1BhdGhVdGlscy5oYXNCYXNlbmFtZSkocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9ICgwLCBfUGF0aFV0aWxzLnN0cmlwQmFzZW5hbWUpKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9ICgwLCBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyLmRlZmF1bHQpKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiAoMCwgX0xvY2F0aW9uVXRpbHMubG9jYXRpb25zQXJlRXF1YWwpKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkodG9Mb2NhdGlvbikpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShmcm9tTG9jYXRpb24pKTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFsoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShpbml0aWFsTG9jYXRpb24pXTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbikpO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwYXRoID0gKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG5cbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKCgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuXG4gICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKTtcblxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwYXRoID0gKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKCgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGhpc3RvcnkubG9jYXRpb24pKTtcblxuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuXG4gICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJyk7XG5cbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgICgwLCBfRE9NVXRpbHMuYWRkRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgKDAsIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKSh3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVIYXNoSGlzdG9yeTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIsIFJvdXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuaW1wb3J0IGNvbmZpZ3VyZVN0b3JlIGZyb20gJy4vc3RvcmUnO1xuXG5pbXBvcnQgQXBwIGZyb20gXCIuL0FwcFwiO1xuXG5pbXBvcnQgeyB1c2VyTG9nZ2VkSW4gfSBmcm9tIFwiLi9hY3Rpb25zL2F1dGhcIjtcblxuXG5pbXBvcnQgJy4vc2Nzcy9BcHAuc2Nzcyc7IFxuIFxuY29uc3Qgc3RvcmUgPSBjb25maWd1cmVTdG9yZSgpO1xuXG4vLyBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndXNlcnMnKTtcbi8vIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdtb3ZpZXMnKTtcblxuLy8gY3JlYXRlIGRhdGEgYmFzZSBpbiBsb2NhbFN0b3JhZ2VcbmlmICggIWxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VycycpICkgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ1c2Vyc1wiLCBKU09OLnN0cmluZ2lmeShbXSkpOy8vIGFsbCByZWdpc3RlcmVkIHVzZXJcbmlmICggIWxvY2FsU3RvcmFnZS5nZXRJdGVtKCdtb3ZpZXMnKSApIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwibW92aWVzXCIsIEpTT04uc3RyaW5naWZ5KFtdKSk7Ly8gYWxsIG1vdmllcyBieSBlYWNoIHVzZXJcblxuLy8gaWYgbG9jYWxTdG9yYWdlIGNvbnRhaW5zIGxvZ2VkIHVzZXIgdGhlbiBzdG9yZSB0aGlzIHVzZXIgaW50byByZWR1eCBzdG9yZSBub3cgISEhIWl0IHdvcmtzIG9ubHkgaG9tZSBwYWdlISEhIVxuLy8gQHRvZG8gZml4IEdFVCBlcnJvciBvbiBvdGhlciBwYWdlc1xuaWYgKCBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInVzZXJcIikgKSB7Ly8gZ2V0IGxvZ2dlZCB1c2VyIGZyb20gbG9jYWxTdG9yYWdlXG4gIGNvbnN0IHVzZXIgPSBKU09OLnBhcnNlKCBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInVzZXJcIikgKTtcbiAgc3RvcmUuZGlzcGF0Y2godXNlckxvZ2dlZEluKHVzZXIpKTtcbn1cblxuUmVhY3RET00ucmVuZGVyKFxuICA8QnJvd3NlclJvdXRlcj5cbiAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICAgIDxSb3V0ZSBjb21wb25lbnQ9e0FwcH0gLz5cbiAgICA8L1Byb3ZpZGVyPlxuICA8L0Jyb3dzZXJSb3V0ZXI+LFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIilcbik7XG5cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNy4wXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgaz1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLHk9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsej1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxBPW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxCPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsQz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gYWEoYSxiLGUsYyxkLGcsaCxmKXtpZighYSl7YT12b2lkIDA7aWYodm9pZCAwPT09YilhPUVycm9yKFwiTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7ZWxzZXt2YXIgbD1bZSxjLGQsZyxoLGZdLG09MDthPUVycm9yKGIucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBsW20rK119KSk7YS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwifWEuZnJhbWVzVG9Qb3A9MTt0aHJvdyBhO319XG5mdW5jdGlvbiBEKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZT1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0wO2M8YjtjKyspZSs9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7YWEoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixlKX12YXIgRT17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRj17fTtcbmZ1bmN0aW9uIEcoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Rjt0aGlzLnVwZGF0ZXI9ZXx8RX1HLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0cucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9EKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Ry5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gSCgpe31ILnByb3RvdHlwZT1HLnByb3RvdHlwZTtmdW5jdGlvbiBJKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUY7dGhpcy51cGRhdGVyPWV8fEV9dmFyIEo9SS5wcm90b3R5cGU9bmV3IEg7XG5KLmNvbnN0cnVjdG9yPUk7ayhKLEcucHJvdG90eXBlKTtKLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBLPXtjdXJyZW50Om51bGwsY3VycmVudERpc3BhdGNoZXI6bnVsbH0sTD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LE09e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE4oYSxiLGUpe3ZhciBjPXZvaWQgMCxkPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUwuY2FsbChiLGMpJiYhTS5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zm9yKHZhciBsPUFycmF5KGYpLG09MDttPGY7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1sfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2NdJiYoZFtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6Sy5jdXJyZW50fX1cbmZ1bmN0aW9uIGJhKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZyxRPVtdO2Z1bmN0aW9uIFIoYSxiLGUsYyl7aWYoUS5sZW5ndGgpe3ZhciBkPVEucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1lO2QuY29udGV4dD1jO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzplLGNvbnRleHQ6Yyxjb3VudDowfX1cbmZ1bmN0aW9uIFMoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5RLmxlbmd0aCYmUS5wdXNoKGEpfVxuZnVuY3Rpb24gVChhLGIsZSxjKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gZShjLGEsXCJcIj09PWI/XCIuXCIrVShhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaD0wO2g8YS5sZW5ndGg7aCsrKXtkPWFbaF07dmFyIGY9YitVKGQsaCk7Zys9VChkLGYsZSxjKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUMmJmFbQ118fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaD1cbjA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1UoZCxoKyspLGcrPVQoZCxmLGUsYyk7ZWxzZVwib2JqZWN0XCI9PT1kJiYoZT1cIlwiK2EsRChcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PWU/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZSxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVihhLGIsZSl7cmV0dXJuIG51bGw9PWE/MDpUKGEsXCJcIixiLGUpfWZ1bmN0aW9uIFUoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIGNhKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGRhKGEsYixlKXt2YXIgYz1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1coYSxjLGUsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTyhhKSYmKGE9YmEoYSxkKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKStlKSksYy5wdXNoKGEpKX1mdW5jdGlvbiBXKGEsYixlLGMsZCl7dmFyIGc9XCJcIjtudWxsIT1lJiYoZz0oXCJcIitlKS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpO2I9UihiLGcsYyxkKTtWKGEsZGEsYik7UyhiKX1cbnZhciBYPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBjPVtdO1coYSxjLG51bGwsYixlKTtyZXR1cm4gY30sZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVIobnVsbCxudWxsLGIsZSk7VihhLGNhLGIpO1MoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBWKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VyhhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe08oYSk/dm9pZCAwOkQoXCIxNDNcIik7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkcsUHVyZUNvbXBvbmVudDpJLGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLFxuX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9LGZvcndhcmRSZWY6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnkscmVuZGVyOmF9fSxsYXp5OmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpCLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fSxtZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOkEsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fSxGcmFnbWVudDpyLFN0cmljdE1vZGU6dCxTdXNwZW5zZTp6LGNyZWF0ZUVsZW1lbnQ6TixjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGUpe251bGw9PT1hfHx2b2lkIDA9PT1hP0QoXCIyNjdcIixhKTp2b2lkIDA7dmFyIGM9dm9pZCAwLGQ9ayh7fSxhLnByb3BzKSxnPWEua2V5LGg9YS5yZWYsZj1hLl9vd25lcjtcbmlmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZixmPUsuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpO3ZhciBsPXZvaWQgMDthLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMmJihsPWEudHlwZS5kZWZhdWx0UHJvcHMpO2ZvcihjIGluIGIpTC5jYWxsKGIsYykmJiFNLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1sP2xbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxjKXtsPUFycmF5KGMpO2Zvcih2YXIgbT0wO208YzttKyspbFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWx9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9Ti5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50Ok8sdmVyc2lvbjpcIjE2LjcuMFwiLFxudW5zdGFibGVfQ29uY3VycmVudE1vZGU6eCx1bnN0YWJsZV9Qcm9maWxlcjp1LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnRPd25lcjpLLGFzc2lnbjprfX0sWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0fHxaO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi43LjBcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxiYT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIGNhKGEsYixjLGQsZSxmLGcsaCl7aWYoIWEpe2E9dm9pZCAwO2lmKHZvaWQgMD09PWIpYT1FcnJvcihcIk1pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2Vsc2V7dmFyIGs9W2MsZCxlLGYsZyxoXSxsPTA7YT1FcnJvcihiLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4ga1tsKytdfSkpO2EubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIn1hLmZyYW1lc1RvUG9wPTE7dGhyb3cgYTt9fVxuZnVuY3Rpb24gdChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGM9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGQ9MDtkPGI7ZCsrKWMrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2NhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsYyl9YWE/dm9pZCAwOnQoXCIyMjdcIik7ZnVuY3Rpb24gZGEoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19XG52YXIgZWE9ITEsZmE9bnVsbCxoYT0hMSxpYT1udWxsLGphPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2VhPSEwO2ZhPWF9fTtmdW5jdGlvbiBrYShhLGIsYyxkLGUsZixnLGgsayl7ZWE9ITE7ZmE9bnVsbDtkYS5hcHBseShqYSxhcmd1bWVudHMpfWZ1bmN0aW9uIGxhKGEsYixjLGQsZSxmLGcsaCxrKXtrYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoZWEpe2lmKGVhKXt2YXIgbD1mYTtlYT0hMTtmYT1udWxsfWVsc2UgdChcIjE5OFwiKSxsPXZvaWQgMDtoYXx8KGhhPSEwLGlhPWwpfX12YXIgbWE9bnVsbCxuYT17fTtcbmZ1bmN0aW9uIG9hKCl7aWYobWEpZm9yKHZhciBhIGluIG5hKXt2YXIgYj1uYVthXSxjPW1hLmluZGV4T2YoYSk7LTE8Yz92b2lkIDA6dChcIjk2XCIsYSk7aWYoIXBhW2NdKXtiLmV4dHJhY3RFdmVudHM/dm9pZCAwOnQoXCI5N1wiLGEpO3BhW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7cWEuaGFzT3duUHJvcGVydHkoaCk/dChcIjk5XCIsaCk6dm9pZCAwO3FhW2hdPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnJhKGtbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyhyYShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2U/dm9pZCAwOnQoXCI5OFwiLGQsYSl9fX19XG5mdW5jdGlvbiByYShhLGIsYyl7c2FbYV0/dChcIjEwMFwiLGEpOnZvaWQgMDtzYVthXT1iO3RhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIHBhPVtdLHFhPXt9LHNhPXt9LHRhPXt9LHVhPW51bGwsdmE9bnVsbCx3YT1udWxsO2Z1bmN0aW9uIHhhKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD13YShjKTtsYShkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfWZ1bmN0aW9uIHlhKGEsYil7bnVsbD09Yj90KFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1cbmZ1bmN0aW9uIHphKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBBYT1udWxsO2Z1bmN0aW9uIEJhKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKyl4YShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZ4YShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19XG52YXIgQ2E9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6ZnVuY3Rpb24oYSl7bWE/dChcIjEwMVwiKTp2b2lkIDA7bWE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7b2EoKX0saW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOmZ1bmN0aW9uKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO25hLmhhc093blByb3BlcnR5KGMpJiZuYVtjXT09PWR8fChuYVtjXT90KFwiMTAyXCIsYyk6dm9pZCAwLG5hW2NdPWQsYj0hMCl9YiYmb2EoKX19O1xuZnVuY3Rpb24gRGEoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD11YShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz90KFwiMjMxXCIsYix0eXBlb2YgYyk6dm9pZCAwO1xucmV0dXJuIGN9ZnVuY3Rpb24gRWEoYSl7bnVsbCE9PWEmJihBYT15YShBYSxhKSk7YT1BYTtBYT1udWxsO2lmKGEmJih6YShhLEJhKSxBYT90KFwiOTVcIik6dm9pZCAwLGhhKSl0aHJvdyBhPWlhLGhhPSExLGlhPW51bGwsYTt9dmFyIEZhPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLEdhPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrRmEsSGE9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitGYTtmdW5jdGlvbiBJYShhKXtpZihhW0dhXSlyZXR1cm4gYVtHYV07Zm9yKDshYVtHYV07KWlmKGEucGFyZW50Tm9kZSlhPWEucGFyZW50Tm9kZTtlbHNlIHJldHVybiBudWxsO2E9YVtHYV07cmV0dXJuIDU9PT1hLnRhZ3x8Nj09PWEudGFnP2E6bnVsbH1mdW5jdGlvbiBKYShhKXthPWFbR2FdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZz9udWxsOmF9XG5mdW5jdGlvbiBLYShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dChcIjMzXCIpfWZ1bmN0aW9uIExhKGEpe3JldHVybiBhW0hhXXx8bnVsbH1mdW5jdGlvbiBNYShhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfWZ1bmN0aW9uIE5hKGEsYixjKXtpZihiPURhKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eWEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eWEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9XG5mdW5jdGlvbiBPYShhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPU1hKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylOYShjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKU5hKGNbYl0sXCJidWJibGVkXCIsYSl9fWZ1bmN0aW9uIFBhKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPURhKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz15YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz15YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gUWEoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZQYShhLl90YXJnZXRJbnN0LG51bGwsYSl9XG5mdW5jdGlvbiBSYShhKXt6YShhLE9hKX12YXIgU2E9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8IXdpbmRvdy5kb2N1bWVudHx8IXdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtmdW5jdGlvbiBUYShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBVYT17YW5pbWF0aW9uZW5kOlRhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlRhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6VGEoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6VGEoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxWYT17fSxXYT17fTtcblNhJiYoV2E9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgVWEuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgVWEuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgVWEuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgVWEudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBYYShhKXtpZihWYVthXSlyZXR1cm4gVmFbYV07aWYoIVVhW2FdKXJldHVybiBhO3ZhciBiPVVhW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFdhKXJldHVybiBWYVthXT1iW2NdO3JldHVybiBhfVxudmFyIFlhPVhhKFwiYW5pbWF0aW9uZW5kXCIpLFphPVhhKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLCRhPVhhKFwiYW5pbWF0aW9uc3RhcnRcIiksYWI9WGEoXCJ0cmFuc2l0aW9uZW5kXCIpLGJiPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxjYj1udWxsLGViPW51bGwsZmI9bnVsbDtcbmZ1bmN0aW9uIGdiKCl7aWYoZmIpcmV0dXJuIGZiO3ZhciBhLGI9ZWIsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4gY2I/Y2IudmFsdWU6Y2IudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gZmI9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBoYigpe3JldHVybiEwfWZ1bmN0aW9uIGliKCl7cmV0dXJuITF9XG5mdW5jdGlvbiB6KGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9oYjppYjt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWliO3JldHVybiB0aGlzfVxubih6LnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWhiKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWhiKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PWhifSxpc1BlcnNpc3RlbnQ6aWIsZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLFxuYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDt0aGlzLm5hdGl2ZUV2ZW50PXRoaXMuX3RhcmdldEluc3Q9dGhpcy5kaXNwYXRjaENvbmZpZz1udWxsO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9aWI7dGhpcy5fZGlzcGF0Y2hJbnN0YW5jZXM9dGhpcy5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbH19KTt6LkludGVyZmFjZT17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbnouZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO24oZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPW4oe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7amIoYyk7cmV0dXJuIGN9O2piKHopO2Z1bmN0aW9uIGtiKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfWZ1bmN0aW9uIGxiKGEpe2EgaW5zdGFuY2VvZiB0aGlzP3ZvaWQgMDp0KFwiMjc5XCIpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1cbmZ1bmN0aW9uIGpiKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPWtiO2EucmVsZWFzZT1sYn12YXIgbWI9ei5leHRlbmQoe2RhdGE6bnVsbH0pLG5iPXouZXh0ZW5kKHtkYXRhOm51bGx9KSxvYj1bOSwxMywyNywzMl0scGI9U2EmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LHFiPW51bGw7U2EmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKHFiPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgcmI9U2EmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFxYixzYj1TYSYmKCFwYnx8cWImJjg8cWImJjExPj1xYiksdGI9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksdWI9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0sdmI9ITE7XG5mdW5jdGlvbiB3YihhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PW9iLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24geGIoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgeWI9ITE7ZnVuY3Rpb24gemIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHhiKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDt2Yj0hMDtyZXR1cm4gdGI7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09dGImJnZiP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIEFiKGEsYil7aWYoeWIpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IXBiJiZ3YihhLGIpPyhhPWdiKCksZmI9ZWI9Y2I9bnVsbCx5Yj0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gc2ImJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIEJiPXtldmVudFR5cGVzOnViLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZihwYiliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjplPXViLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjplPXViLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6ZT11Yi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgeWI/d2IoYSxjKSYmKGU9dWIuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT11Yi5jb21wb3NpdGlvblN0YXJ0KTtlPyhzYiYmXCJrb1wiIT09Yy5sb2NhbGUmJih5Ynx8ZSE9PXViLmNvbXBvc2l0aW9uU3RhcnQ/ZT09PXViLmNvbXBvc2l0aW9uRW5kJiZ5YiYmKGY9Z2IoKSk6KGNiPWQsZWI9XCJ2YWx1ZVwiaW4gY2I/Y2IudmFsdWU6Y2IudGV4dENvbnRlbnQseWI9XG4hMCkpLGU9bWIuZ2V0UG9vbGVkKGUsYixjLGQpLGY/ZS5kYXRhPWY6KGY9eGIoYyksbnVsbCE9PWYmJihlLmRhdGE9ZikpLFJhKGUpLGY9ZSk6Zj1udWxsOyhhPXJiP3piKGEsYyk6QWIoYSxjKSk/KGI9bmIuZ2V0UG9vbGVkKHViLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxSYShiKSk6Yj1udWxsO3JldHVybiBudWxsPT09Zj9iOm51bGw9PT1iP2Y6W2YsYl19fSxDYj1udWxsLERiPW51bGwsRWI9bnVsbDtmdW5jdGlvbiBIYihhKXtpZihhPXZhKGEpKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgQ2I/dChcIjI4MFwiKTp2b2lkIDA7dmFyIGI9dWEoYS5zdGF0ZU5vZGUpO0NiKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19ZnVuY3Rpb24gSWIoYSl7RGI/RWI/RWIucHVzaChhKTpFYj1bYV06RGI9YX1mdW5jdGlvbiBKYigpe2lmKERiKXt2YXIgYT1EYixiPUViO0ViPURiPW51bGw7SGIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUhiKGJbYV0pfX1cbmZ1bmN0aW9uIEtiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gTGIoYSxiLGMpe3JldHVybiBhKGIsYyl9ZnVuY3Rpb24gTWIoKXt9dmFyIE5iPSExO2Z1bmN0aW9uIE9iKGEsYil7aWYoTmIpcmV0dXJuIGEoYik7TmI9ITA7dHJ5e3JldHVybiBLYihhLGIpfWZpbmFsbHl7aWYoTmI9ITEsbnVsbCE9PURifHxudWxsIT09RWIpTWIoKSxKYigpfX12YXIgUGI9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gUWIoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFQYlthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9XG5mdW5jdGlvbiBSYihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9ZnVuY3Rpb24gU2IoYSl7aWYoIVNhKXJldHVybiExO2E9XCJvblwiK2E7dmFyIGI9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifWZ1bmN0aW9uIFRiKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYihhKXt2YXIgYj1UYihhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmIoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVViKGEpKX1mdW5jdGlvbiBXYihhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGIoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1cbnZhciBYYj1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCxZYj0vXiguKilbXFxcXFxcL10vLEQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixaYj1EP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLCRiPUQ/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixhYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxiYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxjYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxkYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxlYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGZjPUQ/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxnYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixoYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTpcbjYwMTEzLGljPUQ/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsamM9RD9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixrYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gbGMoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPWtjJiZhW2tjXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gbWMoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBmYzpyZXR1cm5cIkNvbmN1cnJlbnRNb2RlXCI7Y2FzZSBhYzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSAkYjpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgY2M6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgYmM6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBoYzpyZXR1cm5cIlN1c3BlbnNlXCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGVjOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgZGM6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBnYzp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtyZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1xuXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgaWM6cmV0dXJuIG1jKGEudHlwZSk7Y2FzZSBqYzppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIG1jKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIG5jKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMzpjYXNlIDQ6Y2FzZSA2OmNhc2UgNzpjYXNlIDEwOmNhc2UgOTp2YXIgYz1cIlwiO2JyZWFrIGE7ZGVmYXVsdDp2YXIgZD1hLl9kZWJ1Z093bmVyLGU9YS5fZGVidWdTb3VyY2UsZj1tYyhhLnR5cGUpO2M9bnVsbDtkJiYoYz1tYyhkLnR5cGUpKTtkPWY7Zj1cIlwiO2U/Zj1cIiAoYXQgXCIrZS5maWxlTmFtZS5yZXBsYWNlKFliLFwiXCIpK1wiOlwiK2UubGluZU51bWJlcitcIilcIjpjJiYoZj1cIiAoY3JlYXRlZCBieSBcIitjK1wiKVwiKTtjPVwiXFxuICAgIGluIFwiKyhkfHxcIlVua25vd25cIikrZn1iKz1jO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIgb2M9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLHBjPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkscWM9e30scmM9e307XG5mdW5jdGlvbiBzYyhhKXtpZihwYy5jYWxsKHJjLGEpKXJldHVybiEwO2lmKHBjLmNhbGwocWMsYSkpcmV0dXJuITE7aWYob2MudGVzdChhKSlyZXR1cm4gcmNbYV09ITA7cWNbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gdGMoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiB1YyhhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHx0YyhhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEUoYSxiLGMsZCxlKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1ifXZhciBGPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBFKGEsMCwhMSxhLG51bGwpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0ZbYl09bmV3IEUoYiwxLCExLGFbMV0sbnVsbCl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBFKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBFKGEsMiwhMSxhLG51bGwpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBFKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRShhLDMsITAsYSxudWxsKX0pO1xuW1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBFKGEsNCwhMSxhLG51bGwpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEUoYSw2LCExLGEsbnVsbCl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEUoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO3ZhciB2Yz0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHdjKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHZjLFxud2MpO0ZbYl09bmV3IEUoYiwxLCExLGEsbnVsbCl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpocmVmIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHZjLHdjKTtGW2JdPW5ldyBFKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHZjLHdjKTtGW2JdPW5ldyBFKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIpfSk7Ri50YWJJbmRleD1uZXcgRShcInRhYkluZGV4XCIsMSwhMSxcInRhYmluZGV4XCIsbnVsbCk7XG5mdW5jdGlvbiB4YyhhLGIsYyxkKXt2YXIgZT1GLmhhc093blByb3BlcnR5KGIpP0ZbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fCh1YyhiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/c2MoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIHljKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiB6YyhhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbih7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9XG5mdW5jdGlvbiBBYyhhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz15YyhudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIEJjKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmeGMoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIENjKGEsYil7QmMoYSxiKTt2YXIgYz15YyhiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9EYyhhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZEYyhhLGIudHlwZSx5YyhiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIEVjKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIERjKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgRmM9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gR2MoYSxiLGMpe2E9ei5nZXRQb29sZWQoRmMuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtJYihjKTtSYShhKTtyZXR1cm4gYX12YXIgSmM9bnVsbCxLYz1udWxsO2Z1bmN0aW9uIExjKGEpe0VhKGEpfVxuZnVuY3Rpb24gTWMoYSl7dmFyIGI9S2EoYSk7aWYoV2IoYikpcmV0dXJuIGF9ZnVuY3Rpb24gTmMoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgT2M9ITE7U2EmJihPYz1TYihcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtmdW5jdGlvbiBQYygpe0pjJiYoSmMuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsUWMpLEtjPUpjPW51bGwpfWZ1bmN0aW9uIFFjKGEpe1widmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZNYyhLYykmJihhPUdjKEtjLGEsUmIoYSkpLE9iKExjLGEpKX1mdW5jdGlvbiBSYyhhLGIsYyl7XCJmb2N1c1wiPT09YT8oUGMoKSxKYz1iLEtjPWMsSmMuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsUWMpKTpcImJsdXJcIj09PWEmJlBjKCl9ZnVuY3Rpb24gU2MoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gTWMoS2MpfVxuZnVuY3Rpb24gVGMoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBNYyhiKX1mdW5jdGlvbiBVYyhhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBNYyhiKX1cbnZhciBWYz17ZXZlbnRUeXBlczpGYyxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOk9jLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9LYShiKTp3aW5kb3csZj12b2lkIDAsZz12b2lkIDAsaD1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJzZWxlY3RcIj09PWh8fFwiaW5wdXRcIj09PWgmJlwiZmlsZVwiPT09ZS50eXBlP2Y9TmM6UWIoZSk/T2M/Zj1VYzooZj1TYyxnPVJjKTooaD1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09aC50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZj1UYyk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gR2MoZixjLGQpO2cmJmcoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZEYyhlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxXYz16LmV4dGVuZCh7dmlldzpudWxsLGRldGFpbDpudWxsfSksWGM9e0FsdDpcImFsdEtleVwiLFxuQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gWWMoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1YY1thXSk/ISFiW2FdOiExfWZ1bmN0aW9uIFpjKCl7cmV0dXJuIFljfVxudmFyICRjPTAsYWQ9MCxiZD0hMSxjZD0hMSxkZD1XYy5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6WmMsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFg7dmFyIGI9JGM7JGM9YS5zY3JlZW5YO3JldHVybiBiZD9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWC1iOjA6KGJkPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO1xudmFyIGI9YWQ7YWQ9YS5zY3JlZW5ZO3JldHVybiBjZD9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWS1iOjA6KGNkPSEwLDApfX0pLGVkPWRkLmV4dGVuZCh7cG9pbnRlcklkOm51bGwsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbCxwcmVzc3VyZTpudWxsLHRhbmdlbnRpYWxQcmVzc3VyZTpudWxsLHRpbHRYOm51bGwsdGlsdFk6bnVsbCx0d2lzdDpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSxmZD17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLFxuZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0sZ2Q9e2V2ZW50VHlwZXM6ZmQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxmPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihlJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWYmJiFlKXJldHVybiBudWxsO2U9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7Zj8oZj1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/SWEoYik6bnVsbCk6Zj1udWxsO2lmKGY9PT1iKXJldHVybiBudWxsO3ZhciBnPXZvaWQgMCxoPXZvaWQgMCxrPXZvaWQgMCxsPXZvaWQgMDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09YSlnPWRkLGg9ZmQubW91c2VMZWF2ZSxrPWZkLm1vdXNlRW50ZXIsbD1cIm1vdXNlXCI7XG5lbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlnPWVkLGg9ZmQucG9pbnRlckxlYXZlLGs9ZmQucG9pbnRlckVudGVyLGw9XCJwb2ludGVyXCI7dmFyIG09bnVsbD09Zj9lOkthKGYpO2U9bnVsbD09Yj9lOkthKGIpO2E9Zy5nZXRQb29sZWQoaCxmLGMsZCk7YS50eXBlPWwrXCJsZWF2ZVwiO2EudGFyZ2V0PW07YS5yZWxhdGVkVGFyZ2V0PWU7Yz1nLmdldFBvb2xlZChrLGIsYyxkKTtjLnR5cGU9bCtcImVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9bTtkPWI7aWYoZiYmZClhOntiPWY7ZT1kO2w9MDtmb3IoZz1iO2c7Zz1NYShnKSlsKys7Zz0wO2ZvcihrPWU7aztrPU1hKGspKWcrKztmb3IoOzA8bC1nOyliPU1hKGIpLGwtLTtmb3IoOzA8Zy1sOyllPU1hKGUpLGctLTtmb3IoO2wtLTspe2lmKGI9PT1lfHxiPT09ZS5hbHRlcm5hdGUpYnJlYWsgYTtiPU1hKGIpO2U9TWEoZSl9Yj1udWxsfWVsc2UgYj1udWxsO2U9Yjtmb3IoYj1bXTtmJiZmIT09ZTspe2w9XG5mLmFsdGVybmF0ZTtpZihudWxsIT09bCYmbD09PWUpYnJlYWs7Yi5wdXNoKGYpO2Y9TWEoZil9Zm9yKGY9W107ZCYmZCE9PWU7KXtsPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1sJiZsPT09ZSlicmVhaztmLnB1c2goZCk7ZD1NYShkKX1mb3IoZD0wO2Q8Yi5sZW5ndGg7ZCsrKVBhKGJbZF0sXCJidWJibGVkXCIsYSk7Zm9yKGQ9Zi5sZW5ndGg7MDxkLS07KVBhKGZbZF0sXCJjYXB0dXJlZFwiLGMpO3JldHVyblthLGNdfX0saGQ9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiBpZChhLGIpe3JldHVybiBhPT09Yj8wIT09YXx8MCE9PWJ8fDEvYT09PTEvYjphIT09YSYmYiE9PWJ9XG5mdW5jdGlvbiBqZChhLGIpe2lmKGlkKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighaGQuY2FsbChiLGNbZF0pfHwhaWQoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBrZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXtpZigwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxO2Zvcig7Yi5yZXR1cm47KWlmKGI9Yi5yZXR1cm4sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiBsZChhKXsyIT09a2QoYSk/dChcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBtZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj1rZChhKSwzPT09Yj90KFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuLGY9ZT9lLmFsdGVybmF0ZTpudWxsO2lmKCFlfHwhZilicmVhaztpZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKHZhciBnPWUuY2hpbGQ7Zzspe2lmKGc9PT1jKXJldHVybiBsZChlKSxhO2lmKGc9PT1kKXJldHVybiBsZChlKSxiO2c9Zy5zaWJsaW5nfXQoXCIxODhcIil9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zz0hMTtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9Zz9cbnZvaWQgMDp0KFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/dChcIjE5MFwiKTp2b2lkIDB9MyE9PWMudGFnP3QoXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gbmQoYSl7YT1tZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbnZhciBvZD16LmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSkscGQ9ei5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxxZD1XYy5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIHJkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHNkPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSx0ZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sdWQ9V2MuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXNkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPXJkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT90ZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6WmMsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/cmQoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/cmQoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSx2ZD1kZC5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksd2Q9V2MuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6WmN9KSx4ZD16LmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx5ZD1kZC5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHpkPVtbXCJhYm9ydFwiLFwiYWJvcnRcIl0sW1lhLFwiYW5pbWF0aW9uRW5kXCJdLFtaYSxcImFuaW1hdGlvbkl0ZXJhdGlvblwiXSxbJGEsXCJhbmltYXRpb25TdGFydFwiXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCJdLFtcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiXSxbXCJkcmFnXCIsXCJkcmFnXCJdLFtcImRyYWdlbnRlclwiLFwiZHJhZ0VudGVyXCJdLFtcImRyYWdleGl0XCIsXCJkcmFnRXhpdFwiXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiXSxbXCJkcmFnb3ZlclwiLFwiZHJhZ092ZXJcIl0sW1wiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCJdLFtcImVtcHRpZWRcIixcImVtcHRpZWRcIl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIl0sXG5bXCJlbmRlZFwiLFwiZW5kZWRcIl0sW1wiZXJyb3JcIixcImVycm9yXCJdLFtcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJsb2FkXCIsXCJsb2FkXCJdLFtcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIl0sW1wibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCJdLFtcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCJdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCJdLFtcIm1vdXNlb3V0XCIsXCJtb3VzZU91dFwiXSxbXCJtb3VzZW92ZXJcIixcIm1vdXNlT3ZlclwiXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCJdLFtcInBvaW50ZXJtb3ZlXCIsXCJwb2ludGVyTW92ZVwiXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCJdLFtcInBvaW50ZXJvdmVyXCIsXCJwb2ludGVyT3ZlclwiXSxbXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIl0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiXSxbXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCJdLFxuW1wic3VzcGVuZFwiLFwic3VzcGVuZFwiXSxbXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCJdLFtcInRvZ2dsZVwiLFwidG9nZ2xlXCJdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCJdLFthYixcInRyYW5zaXRpb25FbmRcIl0sW1wid2FpdGluZ1wiLFwid2FpdGluZ1wiXSxbXCJ3aGVlbFwiLFwid2hlZWxcIl1dLEFkPXt9LEJkPXt9O2Z1bmN0aW9uIENkKGEsYil7dmFyIGM9YVswXTthPWFbMV07dmFyIGQ9XCJvblwiKyhhWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSk7Yj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZCxjYXB0dXJlZDpkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2NdLGlzSW50ZXJhY3RpdmU6Yn07QWRbYV09YjtCZFtjXT1ifVxuW1tcImJsdXJcIixcImJsdXJcIl0sW1wiY2FuY2VsXCIsXCJjYW5jZWxcIl0sW1wiY2xpY2tcIixcImNsaWNrXCJdLFtcImNsb3NlXCIsXCJjbG9zZVwiXSxbXCJjb250ZXh0bWVudVwiLFwiY29udGV4dE1lbnVcIl0sW1wiY29weVwiLFwiY29weVwiXSxbXCJjdXRcIixcImN1dFwiXSxbXCJhdXhjbGlja1wiLFwiYXV4Q2xpY2tcIl0sW1wiZGJsY2xpY2tcIixcImRvdWJsZUNsaWNrXCJdLFtcImRyYWdlbmRcIixcImRyYWdFbmRcIl0sW1wiZHJhZ3N0YXJ0XCIsXCJkcmFnU3RhcnRcIl0sW1wiZHJvcFwiLFwiZHJvcFwiXSxbXCJmb2N1c1wiLFwiZm9jdXNcIl0sW1wiaW5wdXRcIixcImlucHV0XCJdLFtcImludmFsaWRcIixcImludmFsaWRcIl0sW1wia2V5ZG93blwiLFwia2V5RG93blwiXSxbXCJrZXlwcmVzc1wiLFwia2V5UHJlc3NcIl0sW1wia2V5dXBcIixcImtleVVwXCJdLFtcIm1vdXNlZG93blwiLFwibW91c2VEb3duXCJdLFtcIm1vdXNldXBcIixcIm1vdXNlVXBcIl0sW1wicGFzdGVcIixcInBhc3RlXCJdLFtcInBhdXNlXCIsXCJwYXVzZVwiXSxbXCJwbGF5XCIsXCJwbGF5XCJdLFtcInBvaW50ZXJjYW5jZWxcIixcInBvaW50ZXJDYW5jZWxcIl0sXG5bXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIl0sW1wicG9pbnRlcnVwXCIsXCJwb2ludGVyVXBcIl0sW1wicmF0ZWNoYW5nZVwiLFwicmF0ZUNoYW5nZVwiXSxbXCJyZXNldFwiLFwicmVzZXRcIl0sW1wic2Vla2VkXCIsXCJzZWVrZWRcIl0sW1wic3VibWl0XCIsXCJzdWJtaXRcIl0sW1widG91Y2hjYW5jZWxcIixcInRvdWNoQ2FuY2VsXCJdLFtcInRvdWNoZW5kXCIsXCJ0b3VjaEVuZFwiXSxbXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaFN0YXJ0XCJdLFtcInZvbHVtZWNoYW5nZVwiLFwidm9sdW1lQ2hhbmdlXCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NkKGEsITApfSk7emQuZm9yRWFjaChmdW5jdGlvbihhKXtDZChhLCExKX0pO1xudmFyIERkPXtldmVudFR5cGVzOkFkLGlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZTpmdW5jdGlvbihhKXthPUJkW2FdO3JldHVybiB2b2lkIDAhPT1hJiYhMD09PWEuaXNJbnRlcmFjdGl2ZX0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1CZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PXJkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT11ZDticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9cWQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1kZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPVxudmQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT13ZDticmVhaztjYXNlIFlhOmNhc2UgWmE6Y2FzZSAkYTphPW9kO2JyZWFrO2Nhc2UgYWI6YT14ZDticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1XYzticmVhaztjYXNlIFwid2hlZWxcIjphPXlkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9cGQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1lZDticmVhaztkZWZhdWx0OmE9en1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1JhKGIpO3JldHVybiBifX0sRWQ9RGQuaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlLFxuRmQ9W107ZnVuY3Rpb24gR2QoYSl7dmFyIGI9YS50YXJnZXRJbnN0LGM9Yjtkb3tpZighYyl7YS5hbmNlc3RvcnMucHVzaChjKTticmVha312YXIgZDtmb3IoZD1jO2QucmV0dXJuOylkPWQucmV0dXJuO2Q9MyE9PWQudGFnP251bGw6ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZighZClicmVhazthLmFuY2VzdG9ycy5wdXNoKGMpO2M9SWEoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9UmIoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTtmb3IodmFyIGY9YS5uYXRpdmVFdmVudCxnPW51bGwsaD0wO2g8cGEubGVuZ3RoO2grKyl7dmFyIGs9cGFbaF07ayYmKGs9ay5leHRyYWN0RXZlbnRzKGQsYixmLGUpKSYmKGc9eWEoZyxrKSl9RWEoZyl9fXZhciBIZD0hMDtcbmZ1bmN0aW9uIEgoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oRWQoYSk/SWQ6SmQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCExKX1mdW5jdGlvbiBLZChhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPShFZChhKT9JZDpKZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITApfWZ1bmN0aW9uIElkKGEsYil7TGIoSmQsYSxiKX1cbmZ1bmN0aW9uIEpkKGEsYil7aWYoSGQpe3ZhciBjPVJiKGIpO2M9SWEoYyk7bnVsbD09PWN8fFwibnVtYmVyXCIhPT10eXBlb2YgYy50YWd8fDI9PT1rZChjKXx8KGM9bnVsbCk7aWYoRmQubGVuZ3RoKXt2YXIgZD1GZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXtPYihHZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPkZkLmxlbmd0aCYmRmQucHVzaChhKX19fXZhciBMZD17fSxNZD0wLE5kPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtcbmZ1bmN0aW9uIE9kKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLE5kKXx8KGFbTmRdPU1kKyssTGRbYVtOZF1dPXt9KTtyZXR1cm4gTGRbYVtOZF1dfWZ1bmN0aW9uIFBkKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiBRZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBSZChhLGIpe3ZhciBjPVFkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPVFkKGMpfX1mdW5jdGlvbiBTZChhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP1NkKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIFRkKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVBkKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7YT1iLmNvbnRlbnREb2N1bWVudC5kZWZhdWx0Vmlld31jYXRjaChjKXticmVha31iPVBkKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIFVkKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgVmQ9U2EmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxXZD17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sWGQ9bnVsbCxZZD1udWxsLFpkPW51bGwsJGQ9ITE7XG5mdW5jdGlvbiBhZShhLGIpe3ZhciBjPWIud2luZG93PT09Yj9iLmRvY3VtZW50Ojk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50O2lmKCRkfHxudWxsPT1YZHx8WGQhPT1QZChjKSlyZXR1cm4gbnVsbDtjPVhkO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJlVkKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTooYz0oYy5vd25lckRvY3VtZW50JiZjLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk7cmV0dXJuIFpkJiZqZChaZCxjKT9udWxsOihaZD1jLGE9ei5nZXRQb29sZWQoV2Quc2VsZWN0LFlkLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9WGQsUmEoYSksYSl9XG52YXIgYmU9e2V2ZW50VHlwZXM6V2QsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9T2QoZSk7Zj10YS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKyl7dmFyIGg9ZltnXTtpZighZS5oYXNPd25Qcm9wZXJ0eShoKXx8IWVbaF0pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP0thKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoUWIoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpWGQ9ZSxZZD1iLFpkPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpaZD1ZZD1YZD1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjokZD0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6cmV0dXJuICRkPSExLGFlKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFZkKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gYWUoYyxkKX1yZXR1cm4gbnVsbH19O0NhLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7dWE9TGE7dmE9SmE7d2E9S2E7Q2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpEZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46Z2QsQ2hhbmdlRXZlbnRQbHVnaW46VmMsU2VsZWN0RXZlbnRQbHVnaW46YmUsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpCYn0pO2Z1bmN0aW9uIGRlKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifVxuZnVuY3Rpb24gZWUoYSxiKXthPW4oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kZShiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9ZnVuY3Rpb24gZmUoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK3ljKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnZShhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dChcIjkxXCIpOnZvaWQgMDtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoZShhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP3QoXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDp0KFwiOTNcIiksYj1iWzBdKSxjPWIpLG51bGw9PWMmJihjPVwiXCIpKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTp5YyhjKX19XG5mdW5jdGlvbiBpZShhLGIpe3ZhciBjPXljKGIudmFsdWUpLGQ9eWMoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqZShhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIga2U9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gbGUoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBtZShhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/bGUoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbmU9dm9pZCAwLG9lPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PWtlLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle25lPW5lfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO25lLmlubmVySFRNTD1cIjxzdmc+XCIrYitcIjwvc3ZnPlwiO2ZvcihiPW5lLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIHBlKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcWU9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scmU9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHFlKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JlLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cWVbYl09cWVbYV19KX0pO2Z1bmN0aW9uIHNlKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxxZS5oYXNPd25Qcm9wZXJ0eShhKSYmcWVbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gdGUoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9c2UoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgdWU9bih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHZlKGEsYil7YiYmKHVlW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD90KFwiMTM3XCIsYSxcIlwiKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP3QoXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6dChcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/dChcIjYyXCIsXCJcIik6dm9pZCAwKX1cbmZ1bmN0aW9uIHdlKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1cbmZ1bmN0aW9uIHhlKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPU9kKGEpO2I9dGFbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBlPWJbZF07aWYoIWMuaGFzT3duUHJvcGVydHkoZSl8fCFjW2VdKXtzd2l0Y2goZSl7Y2FzZSBcInNjcm9sbFwiOktkKFwic2Nyb2xsXCIsYSk7YnJlYWs7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpLZChcImZvY3VzXCIsYSk7S2QoXCJibHVyXCIsYSk7Yy5ibHVyPSEwO2MuZm9jdXM9ITA7YnJlYWs7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbG9zZVwiOlNiKGUpJiZLZChlLGEpO2JyZWFrO2Nhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJyZXNldFwiOmJyZWFrO2RlZmF1bHQ6LTE9PT1iYi5pbmRleE9mKGUpJiZIKGUsYSl9Y1tlXT0hMH19fWZ1bmN0aW9uIHllKCl7fXZhciB6ZT1udWxsLEFlPW51bGw7XG5mdW5jdGlvbiBCZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9ZnVuY3Rpb24gQ2UoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBEZT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxFZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7XG5mdW5jdGlvbiBGZShhLGIsYyxkLGUpe2FbSGFdPWU7XCJpbnB1dFwiPT09YyYmXCJyYWRpb1wiPT09ZS50eXBlJiZudWxsIT1lLm5hbWUmJkJjKGEsZSk7d2UoYyxkKTtkPXdlKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz0yKXt2YXIgZz1iW2ZdLGg9YltmKzFdO1wic3R5bGVcIj09PWc/dGUoYSxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29lKGEsaCk6XCJjaGlsZHJlblwiPT09Zz9wZShhLGgpOnhjKGEsZyxoLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpDYyhhLGUpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmllKGEsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWUubXVsdGlwbGUsYz1lLnZhbHVlLG51bGwhPWM/ZmUoYSwhIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPWUuZGVmYXVsdFZhbHVlP2ZlKGEsISFlLm11bHRpcGxlLGUuZGVmYXVsdFZhbHVlLFxuITApOmZlKGEsISFlLm11bHRpcGxlLGUubXVsdGlwbGU/W106XCJcIiwhMSkpfX1mdW5jdGlvbiBHZShhKXtmb3IoYT1hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIEhlKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1uZXcgU2V0O3ZhciBJZT1bXSxKZT0tMTtmdW5jdGlvbiBJKGEpezA+SmV8fChhLmN1cnJlbnQ9SWVbSmVdLEllW0plXT1udWxsLEplLS0pfWZ1bmN0aW9uIEooYSxiKXtKZSsrO0llW0plXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIEtlPXt9LEs9e2N1cnJlbnQ6S2V9LEw9e2N1cnJlbnQ6ITF9LExlPUtlO1xuZnVuY3Rpb24gTWUoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBLZTt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBNKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gTmUoYSl7SShMLGEpO0koSyxhKX1mdW5jdGlvbiBPZShhKXtJKEwsYSk7SShLLGEpfVxuZnVuY3Rpb24gUGUoYSxiLGMpe0suY3VycmVudCE9PUtlP3QoXCIxNjhcIik6dm9pZCAwO0ooSyxiLGEpO0ooTCxjLGEpfWZ1bmN0aW9uIFFlKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZCllIGluIGE/dm9pZCAwOnQoXCIxMDhcIixtYyhiKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIG4oe30sYyxkKX1mdW5jdGlvbiBSZShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEtlO0xlPUsuY3VycmVudDtKKEssYixhKTtKKEwsTC5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gU2UoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2Q/dm9pZCAwOnQoXCIxNjlcIik7Yz8oYj1RZShhLGIsTGUpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YixJKEwsYSksSShLLGEpLEooSyxiLGEpKTpJKEwsYSk7SihMLGMsYSl9dmFyIFRlPW51bGwsVWU9bnVsbDtmdW5jdGlvbiBWZShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dHJ5e3JldHVybiBhKGIpfWNhdGNoKGMpe319fVxuZnVuY3Rpb24gV2UoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7VGU9VmUoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO1VlPVZlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBYZShhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBOKGEsYixjLGQpe3JldHVybiBuZXcgWGUoYSxiLGMsZCl9XG5mdW5jdGlvbiBZZShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIFplKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBZZShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Z2MpcmV0dXJuIDExO2lmKGE9PT1pYylyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiAkZShhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPU4oYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy5lZmZlY3RUYWc9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7Yy5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2MuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT1hLmZpcnN0Q29udGV4dERlcGVuZGVuY3k7Yy5zaWJsaW5nPWEuc2libGluZztcbmMuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIGFmKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlZZShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBhYzpyZXR1cm4gYmYoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBmYzpyZXR1cm4gY2YoYyxlfDMsZixiKTtjYXNlIGJjOnJldHVybiBjZihjLGV8MixmLGIpO2Nhc2UgY2M6cmV0dXJuIGE9TigxMixjLGIsZXw0KSxhLmVsZW1lbnRUeXBlPWNjLGEudHlwZT1jYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGhjOnJldHVybiBhPU4oMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9aGMsYS50eXBlPWhjLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBkYzpnPTEwO2JyZWFrIGE7Y2FzZSBlYzpnPTk7YnJlYWsgYTtjYXNlIGdjOmc9MTE7YnJlYWsgYTtjYXNlIGljOmc9XG4xNDticmVhayBhO2Nhc2UgamM6Zz0xNjtkPW51bGw7YnJlYWsgYX10KFwiMTMwXCIsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpfWI9TihnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIGJmKGEsYixjLGQpe2E9Tig3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gY2YoYSxiLGMsZCl7YT1OKDgsYSxkLGIpO2I9MD09PShiJjEpP2JjOmZjO2EuZWxlbWVudFR5cGU9YjthLnR5cGU9YjthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gZGYoYSxiLGMpe2E9Tig2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBlZihhLGIsYyl7Yj1OKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifWZ1bmN0aW9uIGZmKGEsYil7YS5kaWRFcnJvcj0hMTt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7MD09PWM/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWU9YjpjPGI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWI6YS5sYXRlc3RQZW5kaW5nVGltZT5iJiYoYS5sYXRlc3RQZW5kaW5nVGltZT1iKTtnZihiLGEpfVxuZnVuY3Rpb24gaGYoYSxiKXthLmRpZEVycm9yPSExO2EubGF0ZXN0UGluZ2VkVGltZT49YiYmKGEubGF0ZXN0UGluZ2VkVGltZT0wKTt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWUsZD1hLmxhdGVzdFBlbmRpbmdUaW1lO2M9PT1iP2EuZWFybGllc3RQZW5kaW5nVGltZT1kPT09Yj9hLmxhdGVzdFBlbmRpbmdUaW1lPTA6ZDpkPT09YiYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yyk7Yz1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtkPWEubGF0ZXN0U3VzcGVuZGVkVGltZTswPT09Yz9hLmVhcmxpZXN0U3VzcGVuZGVkVGltZT1hLmxhdGVzdFN1c3BlbmRlZFRpbWU9YjpjPGI/YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9YjpkPmImJihhLmxhdGVzdFN1c3BlbmRlZFRpbWU9Yik7Z2YoYixhKX1mdW5jdGlvbiBqZihhLGIpe3ZhciBjPWEuZWFybGllc3RQZW5kaW5nVGltZTthPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lO2M+YiYmKGI9Yyk7YT5iJiYoYj1hKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGdmKGEsYil7dmFyIGM9Yi5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsZD1iLmxhdGVzdFN1c3BlbmRlZFRpbWUsZT1iLmVhcmxpZXN0UGVuZGluZ1RpbWUsZj1iLmxhdGVzdFBpbmdlZFRpbWU7ZT0wIT09ZT9lOmY7MD09PWUmJigwPT09YXx8ZDxhKSYmKGU9ZCk7YT1lOzAhPT1hJiZjPmEmJihhPWMpO2IubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249ZTtiLmV4cGlyYXRpb25UaW1lPWF9dmFyIGtmPSExO2Z1bmN0aW9uIGxmKGEpe3JldHVybntiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1cbmZ1bmN0aW9uIG1mKGEpe3JldHVybntiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RVcGRhdGU6YS5maXJzdFVwZGF0ZSxsYXN0VXBkYXRlOmEubGFzdFVwZGF0ZSxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiBuZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YSx0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGwsbmV4dEVmZmVjdDpudWxsfX1mdW5jdGlvbiBvZihhLGIpe251bGw9PT1hLmxhc3RVcGRhdGU/YS5maXJzdFVwZGF0ZT1hLmxhc3RVcGRhdGU9YjooYS5sYXN0VXBkYXRlLm5leHQ9YixhLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBwZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKG51bGw9PT1jKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO3ZhciBlPW51bGw7bnVsbD09PWQmJihkPWEudXBkYXRlUXVldWU9bGYoYS5tZW1vaXplZFN0YXRlKSl9ZWxzZSBkPWEudXBkYXRlUXVldWUsZT1jLnVwZGF0ZVF1ZXVlLG51bGw9PT1kP251bGw9PT1lPyhkPWEudXBkYXRlUXVldWU9bGYoYS5tZW1vaXplZFN0YXRlKSxlPWMudXBkYXRlUXVldWU9bGYoYy5tZW1vaXplZFN0YXRlKSk6ZD1hLnVwZGF0ZVF1ZXVlPW1mKGUpOm51bGw9PT1lJiYoZT1jLnVwZGF0ZVF1ZXVlPW1mKGQpKTtudWxsPT09ZXx8ZD09PWU/b2YoZCxiKTpudWxsPT09ZC5sYXN0VXBkYXRlfHxudWxsPT09ZS5sYXN0VXBkYXRlPyhvZihkLGIpLG9mKGUsYikpOihvZihkLGIpLGUubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIHFmKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZTtjPW51bGw9PT1jP2EudXBkYXRlUXVldWU9bGYoYS5tZW1vaXplZFN0YXRlKTpyZihhLGMpO251bGw9PT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT9jLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yy5sYXN0Q2FwdHVyZWRVcGRhdGU9YjooYy5sYXN0Q2FwdHVyZWRVcGRhdGUubmV4dD1iLGMubGFzdENhcHR1cmVkVXBkYXRlPWIpfWZ1bmN0aW9uIHJmKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmI9PT1jLnVwZGF0ZVF1ZXVlJiYoYj1hLnVwZGF0ZVF1ZXVlPW1mKGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHNmKGEsYixjLGQsZSxmKXtzd2l0Y2goYy50YWcpe2Nhc2UgMTpyZXR1cm4gYT1jLnBheWxvYWQsXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2Nhc2UgMzphLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMjA0OXw2NDtjYXNlIDA6YT1jLnBheWxvYWQ7ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7aWYobnVsbD09PWV8fHZvaWQgMD09PWUpYnJlYWs7cmV0dXJuIG4oe30sZCxlKTtjYXNlIDI6a2Y9ITB9cmV0dXJuIGR9XG5mdW5jdGlvbiB0ZihhLGIsYyxkLGUpe2tmPSExO2I9cmYoYSxiKTtmb3IodmFyIGY9Yi5iYXNlU3RhdGUsZz1udWxsLGg9MCxrPWIuZmlyc3RVcGRhdGUsbD1mO251bGwhPT1rOyl7dmFyIG09ay5leHBpcmF0aW9uVGltZTttPGU/KG51bGw9PT1nJiYoZz1rLGY9bCksaDxtJiYoaD1tKSk6KGw9c2YoYSxiLGssbCxjLGQpLG51bGwhPT1rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RFZmZlY3Q/Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9azooYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RFZmZlY3Q9aykpKTtrPWsubmV4dH1tPW51bGw7Zm9yKGs9Yi5maXJzdENhcHR1cmVkVXBkYXRlO251bGwhPT1rOyl7dmFyIHI9ay5leHBpcmF0aW9uVGltZTtyPGU/KG51bGw9PT1tJiYobT1rLG51bGw9PT1nJiYoZj1sKSksaDxyJiYoaD1yKSk6KGw9c2YoYSxiLGssbCxjLGQpLG51bGwhPT1rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PVxuMzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdENhcHR1cmVkRWZmZWN0P2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1rOihiLmxhc3RDYXB0dXJlZEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0Q2FwdHVyZWRFZmZlY3Q9aykpKTtrPWsubmV4dH1udWxsPT09ZyYmKGIubGFzdFVwZGF0ZT1udWxsKTtudWxsPT09bT9iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsOmEuZWZmZWN0VGFnfD0zMjtudWxsPT09ZyYmbnVsbD09PW0mJihmPWwpO2IuYmFzZVN0YXRlPWY7Yi5maXJzdFVwZGF0ZT1nO2IuZmlyc3RDYXB0dXJlZFVwZGF0ZT1tO2EuZXhwaXJhdGlvblRpbWU9aDthLm1lbW9pemVkU3RhdGU9bH1cbmZ1bmN0aW9uIHVmKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTt2ZihiLmZpcnN0RWZmZWN0LGMpO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7dmYoYi5maXJzdENhcHR1cmVkRWZmZWN0LGMpO2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1udWxsfWZ1bmN0aW9uIHZmKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuY2FsbGJhY2s7aWYobnVsbCE9PWMpe2EuY2FsbGJhY2s9bnVsbDt2YXIgZD1iO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3QoXCIxOTFcIixjKTp2b2lkIDA7Yy5jYWxsKGQpfWE9YS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIHdmKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6bmMoYil9fXZhciB4Zj17Y3VycmVudDpudWxsfSx5Zj1udWxsLHpmPW51bGwsQWY9bnVsbDtmdW5jdGlvbiBCZihhLGIpe3ZhciBjPWEudHlwZS5fY29udGV4dDtKKHhmLGMuX2N1cnJlbnRWYWx1ZSxhKTtjLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBDZihhKXt2YXIgYj14Zi5jdXJyZW50O0koeGYsYSk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBEZihhKXt5Zj1hO0FmPXpmPW51bGw7YS5maXJzdENvbnRleHREZXBlbmRlbmN5PW51bGx9XG5mdW5jdGlvbiBFZihhLGIpe2lmKEFmIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilBZj1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtudWxsPT09emY/KG51bGw9PT15Zj90KFwiMjkzXCIpOnZvaWQgMCx5Zi5maXJzdENvbnRleHREZXBlbmRlbmN5PXpmPWIpOnpmPXpmLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciBGZj17fSxPPXtjdXJyZW50OkZmfSxHZj17Y3VycmVudDpGZn0sSGY9e2N1cnJlbnQ6RmZ9O2Z1bmN0aW9uIElmKGEpe2E9PT1GZj90KFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpmKGEsYil7SihIZixiLGEpO0ooR2YsYSxhKTtKKE8sRmYsYSk7dmFyIGM9Yi5ub2RlVHlwZTtzd2l0Y2goYyl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bWUobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmM9OD09PWM/Yi5wYXJlbnROb2RlOmIsYj1jLm5hbWVzcGFjZVVSSXx8bnVsbCxjPWMudGFnTmFtZSxiPW1lKGIsYyl9SShPLGEpO0ooTyxiLGEpfWZ1bmN0aW9uIEtmKGEpe0koTyxhKTtJKEdmLGEpO0koSGYsYSl9ZnVuY3Rpb24gTGYoYSl7SWYoSGYuY3VycmVudCk7dmFyIGI9SWYoTy5jdXJyZW50KTt2YXIgYz1tZShiLGEudHlwZSk7YiE9PWMmJihKKEdmLGEsYSksSihPLGMsYSkpfWZ1bmN0aW9uIE1mKGEpe0dmLmN1cnJlbnQ9PT1hJiYoSShPLGEpLEkoR2YsYSkpfVxuZnVuY3Rpb24gUChhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn1mdW5jdGlvbiBOZihhKXt2YXIgYj1hLl9yZXN1bHQ7c3dpdGNoKGEuX3N0YXR1cyl7Y2FzZSAxOnJldHVybiBiO2Nhc2UgMjp0aHJvdyBiO2Nhc2UgMDp0aHJvdyBiO2RlZmF1bHQ6dGhyb3cgYS5fc3RhdHVzPTAsYj1hLl9jdG9yLGI9YigpLGIudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSksYS5fcmVzdWx0PWIsYjt9fXZhciBPZj1YYi5SZWFjdEN1cnJlbnRPd25lcixQZj0obmV3IGFhLkNvbXBvbmVudCkucmVmcztcbmZ1bmN0aW9uIFFmKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpuKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7ZD1hLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYwPT09YS5leHBpcmF0aW9uVGltZSYmKGQuYmFzZVN0YXRlPWMpfVxudmFyIFZmPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09a2QoYSk6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9UmYoKTtkPVNmKGQsYSk7dmFyIGU9bmYoZCk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO1RmKCk7cGYoYSxlKTtVZihhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1SZigpO2Q9U2YoZCxhKTt2YXIgZT1uZihkKTtlLnRhZz0xO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtUZigpO3BmKGEsZSk7VWYoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9UmYoKTtjPVNmKGMsYSk7dmFyIGQ9bmYoYyk7ZC50YWc9XG4yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTtUZigpO3BmKGEsZCk7VWYoYSxjKX19O2Z1bmN0aW9uIFdmKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWpkKGMsZCl8fCFqZChlLGYpOiEwfVxuZnVuY3Rpb24gWGYoYSxiLGMpe3ZhciBkPSExLGU9S2U7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9T2YuY3VycmVudERpc3BhdGNoZXIucmVhZENvbnRleHQoZik6KGU9TShiKT9MZTpLLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9NZShhLGUpOktlKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9VmY7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gWmYoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJlZmLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gJGYoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1QZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PU9mLmN1cnJlbnREaXNwYXRjaGVyLnJlYWRDb250ZXh0KGYpOihmPU0oYik/TGU6Sy5jdXJyZW50LGUuY29udGV4dD1NZShhLGYpKTtmPWEudXBkYXRlUXVldWU7bnVsbCE9PWYmJih0ZihhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoUWYoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmVmYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksZj1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1mJiYodGYoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciBhZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gYmcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO3ZhciBkPXZvaWQgMDtjJiYoMSE9PWMudGFnP3QoXCIyODlcIik6dm9pZCAwLGQ9Yy5zdGF0ZU5vZGUpO2Q/dm9pZCAwOnQoXCIxNDdcIixhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PVBmJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9XCJzdHJpbmdcIiE9PXR5cGVvZiBhP3QoXCIyODRcIik6dm9pZCAwO2MuX293bmVyP3ZvaWQgMDp0KFwiMjkwXCIsYSl9cmV0dXJuIGF9XG5mdW5jdGlvbiBjZyhhLGIpe1widGV4dGFyZWFcIiE9PWEudHlwZSYmdChcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpfVxuZnVuY3Rpb24gZGcoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT0kZShhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPWRmKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj1iZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9YWYoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9YmcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1lZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZyl7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1iZihjLGEubW9kZSxkLGcpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcihhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9ZGYoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgWmI6cmV0dXJuIGM9YWYoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9YmcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlICRiOnJldHVybiBiPWVmKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihhZyhiKXx8XG5sYyhiKSlyZXR1cm4gYj1iZihiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtjZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHcoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgWmI6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1hYz9tKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgJGI6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoYWcoYyl8fGxjKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTtjZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHkoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1cbmEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBaYjpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09YWM/bShiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgJGI6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoYWcoZCl8fGxjKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTtjZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIEIoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwscT1udWxsLG09Zyx1PWc9MCxwPW51bGw7bnVsbCE9PW0mJnU8aC5sZW5ndGg7dSsrKXttLmluZGV4PnU/KHA9bSxtPW51bGwpOnA9bS5zaWJsaW5nO3ZhciB2PXcoZSxtLGhbdV0sayk7aWYobnVsbD09PXYpe251bGw9PT1tJiYobT1wKTticmVha31hJiZcbm0mJm51bGw9PT12LmFsdGVybmF0ZSYmYihlLG0pO2c9Zih2LGcsdSk7bnVsbD09PXE/bD12OnEuc2libGluZz12O3E9djttPXB9aWYodT09PWgubGVuZ3RoKXJldHVybiBjKGUsbSksbDtpZihudWxsPT09bSl7Zm9yKDt1PGgubGVuZ3RoO3UrKylpZihtPXIoZSxoW3VdLGspKWc9ZihtLGcsdSksbnVsbD09PXE/bD1tOnEuc2libGluZz1tLHE9bTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7dTxoLmxlbmd0aDt1KyspaWYocD15KG0sZSx1LGhbdV0saykpYSYmbnVsbCE9PXAuYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09cC5rZXk/dTpwLmtleSksZz1mKHAsZyx1KSxudWxsPT09cT9sPXA6cS5zaWJsaW5nPXAscT1wO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gUihlLGcsaCxrKXt2YXIgbD1sYyhoKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgbD90KFwiMTUwXCIpOnZvaWQgMDtoPWwuY2FsbChoKTtudWxsPT1oP3QoXCIxNTFcIik6dm9pZCAwO1xuZm9yKHZhciBtPWw9bnVsbCxxPWcsdT1nPTAscD1udWxsLHY9aC5uZXh0KCk7bnVsbCE9PXEmJiF2LmRvbmU7dSsrLHY9aC5uZXh0KCkpe3EuaW5kZXg+dT8ocD1xLHE9bnVsbCk6cD1xLnNpYmxpbmc7dmFyIEE9dyhlLHEsdi52YWx1ZSxrKTtpZihudWxsPT09QSl7cXx8KHE9cCk7YnJlYWt9YSYmcSYmbnVsbD09PUEuYWx0ZXJuYXRlJiZiKGUscSk7Zz1mKEEsZyx1KTtudWxsPT09bT9sPUE6bS5zaWJsaW5nPUE7bT1BO3E9cH1pZih2LmRvbmUpcmV0dXJuIGMoZSxxKSxsO2lmKG51bGw9PT1xKXtmb3IoOyF2LmRvbmU7dSsrLHY9aC5uZXh0KCkpdj1yKGUsdi52YWx1ZSxrKSxudWxsIT09diYmKGc9Zih2LGcsdSksbnVsbD09PW0/bD12Om0uc2libGluZz12LG09dik7cmV0dXJuIGx9Zm9yKHE9ZChlLHEpOyF2LmRvbmU7dSsrLHY9aC5uZXh0KCkpdj15KHEsZSx1LHYudmFsdWUsayksbnVsbCE9PXYmJihhJiZudWxsIT09di5hbHRlcm5hdGUmJnEuZGVsZXRlKG51bGw9PT12LmtleT91Olxudi5rZXkpLGc9Zih2LGcsdSksbnVsbD09PW0/bD12Om0uc2libGluZz12LG09dik7YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09YWMmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgWmI6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKWlmKDc9PT1rLnRhZz9mLnR5cGU9PT1hYzprLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnR5cGU9PT1hYz9mLnByb3BzLmNoaWxkcmVuOmYucHJvcHMsaCk7ZC5yZWY9YmcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1cbmsuc2libGluZ31mLnR5cGU9PT1hYz8oZD1iZihmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9YWYoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9YmcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlICRiOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxoKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9ZWYoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XG5cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixoKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPWRmKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKGFnKGYpKXJldHVybiBCKGEsZCxmLGgpO2lmKGxjKGYpKXJldHVybiBSKGEsZCxmLGgpO2wmJmNnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDA6aD1hLnR5cGUsdChcIjE1MlwiLGguZGlzcGxheU5hbWV8fGgubmFtZXx8XCJDb21wb25lbnRcIil9cmV0dXJuIGMoYSxkKX19dmFyIGVnPWRnKCEwKSxmZz1kZyghMSksZ2c9bnVsbCxoZz1udWxsLGlnPSExO1xuZnVuY3Rpb24gamcoYSxiKXt2YXIgYz1OKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24ga2coYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBsZyhhKXtpZihpZyl7dmFyIGI9aGc7aWYoYil7dmFyIGM9YjtpZigha2coYSxiKSl7Yj1HZShjKTtpZighYnx8IWtnKGEsYikpe2EuZWZmZWN0VGFnfD0yO2lnPSExO2dnPWE7cmV0dXJufWpnKGdnLGMpfWdnPWE7aGc9SGUoYil9ZWxzZSBhLmVmZmVjdFRhZ3w9MixpZz0hMSxnZz1hfX1mdW5jdGlvbiBtZyhhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWc7KWE9YS5yZXR1cm47Z2c9YX1mdW5jdGlvbiBuZyhhKXtpZihhIT09Z2cpcmV0dXJuITE7aWYoIWlnKXJldHVybiBtZyhhKSxpZz0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUNlKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1oZztiOylqZyhhLGIpLGI9R2UoYik7bWcoYSk7aGc9Z2c/R2UoYS5zdGF0ZU5vZGUpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gb2coKXtoZz1nZz1udWxsO2lnPSExfXZhciBwZz1YYi5SZWFjdEN1cnJlbnRPd25lcjtcbmZ1bmN0aW9uIFEoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9mZyhiLG51bGwsYyxkKTplZyhiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBxZyhhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7RGYoYixlKTtkPWMoZCxmKTtiLmVmZmVjdFRhZ3w9MTtRKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gcmcoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFZZShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxzZyhhLGIsZyxkLGUsZik7YT1hZihjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmpkLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIHRnKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPSRlKGcsZCxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBzZyhhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZlPGYmJmpkKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZj90ZyhhLGIsZik6dWcoYSxiLGMsZCxmKX1mdW5jdGlvbiB2ZyhhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIHVnKGEsYixjLGQsZSl7dmFyIGY9TShjKT9MZTpLLmN1cnJlbnQ7Zj1NZShiLGYpO0RmKGIsZSk7Yz1jKGQsZik7Yi5lZmZlY3RUYWd8PTE7UShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHdnKGEsYixjLGQsZSl7aWYoTShjKSl7dmFyIGY9ITA7UmUoYil9ZWxzZSBmPSExO0RmKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxYZihiLGMsZCxlKSwkZihiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1PZi5jdXJyZW50RGlzcGF0Y2hlci5yZWFkQ29udGV4dChsKToobD1NKGMpP0xlOksuY3VycmVudCxsPU1lKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHI9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3J8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZaZihiLGcsZCxsKTtrZj0hMTt2YXIgdz1iLm1lbW9pemVkU3RhdGU7az1nLnN0YXRlPXc7dmFyIHk9Yi51cGRhdGVRdWV1ZTtudWxsIT09eSYmKHRmKGIseSxkLGcsZSksaz1iLm1lbW9pemVkU3RhdGUpO2ghPT1kfHx3IT09a3x8TC5jdXJyZW50fHxrZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihRZihiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9a2Z8fFdmKGIsYyxoLGQsdyxrLGwpKT8ocnx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzLGcucHJvcHM9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOlAoYi50eXBlLGgpLGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9T2YuY3VycmVudERpc3BhdGNoZXIucmVhZENvbnRleHQobCk6KGw9TShjKT9MZTpLLmN1cnJlbnQsbD1NZShiLGwpKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLFxuKHI9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZaZihiLGcsZCxsKSxrZj0hMSxrPWIubWVtb2l6ZWRTdGF0ZSx3PWcuc3RhdGU9ayx5PWIudXBkYXRlUXVldWUsbnVsbCE9PXkmJih0ZihiLHksZCxnLGUpLHc9Yi5tZW1vaXplZFN0YXRlKSxoIT09ZHx8ayE9PXd8fEwuY3VycmVudHx8a2Y/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoUWYoYixjLG0sZCksdz1iLm1lbW9pemVkU3RhdGUpLChtPWtmfHxXZihiLGMsaCxkLGssdyxsKSk/KHJ8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHxcbihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCx3LGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsdyxsKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9XG5kLGIubWVtb2l6ZWRTdGF0ZT13KSxnLnByb3BzPWQsZy5zdGF0ZT13LGcuY29udGV4dD1sLGQ9bSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiB4ZyhhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiB4ZyhhLGIsYyxkLGUsZil7dmcoYSxiKTt2YXIgZz0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJlNlKGIsYywhMSksdGcoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7cGcuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9ZWcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1lZyhiLG51bGwsaCxmKSk6UShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZTZShiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHlnKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/UGUoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmUGUoYSxiLmNvbnRleHQsITEpO0pmKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIHpnKGEsYixjKXt2YXIgZD1iLm1vZGUsZT1iLnBlbmRpbmdQcm9wcyxmPWIubWVtb2l6ZWRTdGF0ZTtpZigwPT09KGIuZWZmZWN0VGFnJjY0KSl7Zj1udWxsO3ZhciBnPSExfWVsc2UgZj17dGltZWRPdXRBdDpudWxsIT09Zj9mLnRpbWVkT3V0QXQ6MH0sZz0hMCxiLmVmZmVjdFRhZyY9LTY1O2lmKG51bGw9PT1hKWlmKGcpe3ZhciBoPWUuZmFsbGJhY2s7YT1iZihudWxsLGQsMCxudWxsKTswPT09KGIubW9kZSYxKSYmKGEuY2hpbGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQpO2Q9YmYoaCxkLGMsbnVsbCk7YS5zaWJsaW5nPWQ7Yz1hO2MucmV0dXJuPWQucmV0dXJuPWJ9ZWxzZSBjPWQ9ZmcoYixudWxsLGUuY2hpbGRyZW4sYyk7ZWxzZSBudWxsIT09YS5tZW1vaXplZFN0YXRlPyhkPWEuY2hpbGQsaD1kLnNpYmxpbmcsZz8oYz1lLmZhbGxiYWNrLGU9JGUoZCxkLnBlbmRpbmdQcm9wcywwKSwwPT09KGIubW9kZSYxKSYmKGc9bnVsbCE9PVxuYi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxnIT09ZC5jaGlsZCYmKGUuY2hpbGQ9ZykpLGQ9ZS5zaWJsaW5nPSRlKGgsYyxoLmV4cGlyYXRpb25UaW1lKSxjPWUsZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsYy5yZXR1cm49ZC5yZXR1cm49Yik6Yz1kPWVnKGIsZC5jaGlsZCxlLmNoaWxkcmVuLGMpKTooaD1hLmNoaWxkLGc/KGc9ZS5mYWxsYmFjayxlPWJmKG51bGwsZCwwLG51bGwpLGUuY2hpbGQ9aCwwPT09KGIubW9kZSYxKSYmKGUuY2hpbGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQpLGQ9ZS5zaWJsaW5nPWJmKGcsZCxjLG51bGwpLGQuZWZmZWN0VGFnfD0yLGM9ZSxlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxjLnJldHVybj1kLnJldHVybj1iKTpkPWM9ZWcoYixoLGUuY2hpbGRyZW4sYykpLGIuc3RhdGVOb2RlPWEuc3RhdGVOb2RlO2IubWVtb2l6ZWRTdGF0ZT1mO2IuY2hpbGQ9YztyZXR1cm4gZH1cbmZ1bmN0aW9uIHRnKGEsYixjKXtudWxsIT09YSYmKGIuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT1hLmZpcnN0Q29udGV4dERlcGVuZGVuY3kpO2lmKGIuY2hpbGRFeHBpcmF0aW9uVGltZTxjKXJldHVybiBudWxsO251bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZD90KFwiMTUzXCIpOnZvaWQgMDtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9JGUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9JGUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gQWcoYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7aWYobnVsbCE9PWEmJmEubWVtb2l6ZWRQcm9wcz09PWIucGVuZGluZ1Byb3BzJiYhTC5jdXJyZW50JiZkPGMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOnlnKGIpO29nKCk7YnJlYWs7Y2FzZSA1OkxmKGIpO2JyZWFrO2Nhc2UgMTpNKGIudHlwZSkmJlJlKGIpO2JyZWFrO2Nhc2UgNDpKZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6QmYoYixiLm1lbW9pemVkUHJvcHMudmFsdWUpO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7ZD1iLmNoaWxkLmNoaWxkRXhwaXJhdGlvblRpbWU7aWYoMCE9PWQmJmQ+PWMpcmV0dXJuIHpnKGEsYixjKTtiPXRnKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9fXJldHVybiB0ZyhhLGIsYyl9Yi5leHBpcmF0aW9uVGltZT0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi5lbGVtZW50VHlwZTtudWxsIT09XG5hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPU1lKGIsSy5jdXJyZW50KTtEZihiLGMpO2U9ZChhLGUpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtpZihNKGQpKXt2YXIgZj0hMDtSZShiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmUWYoYixkLGcsYSk7ZS51cGRhdGVyPVZmO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7JGYoYixkLGEsYyk7Yj14ZyhudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxRKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtcbnJldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTtmPWIucGVuZGluZ1Byb3BzO2E9TmYoZSk7Yi50eXBlPWE7ZT1iLnRhZz1aZShhKTtmPVAoYSxmKTtnPXZvaWQgMDtzd2l0Y2goZSl7Y2FzZSAwOmc9dWcobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDE6Zz13ZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTE6Zz1xZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTQ6Zz1yZyhudWxsLGIsYSxQKGEudHlwZSxmKSxkLGMpO2JyZWFrO2RlZmF1bHQ6dChcIjMwNlwiLGEsXCJcIil9cmV0dXJuIGc7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpQKGQsZSksdWcoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOlAoZCxlKSx3ZyhhLGIsXG5kLGUsYyk7Y2FzZSAzOnlnKGIpO2Q9Yi51cGRhdGVRdWV1ZTtudWxsPT09ZD90KFwiMjgyXCIpOnZvaWQgMDtlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3RmKGIsZCxiLnBlbmRpbmdQcm9wcyxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpb2coKSxiPXRnKGEsYixjKTtlbHNle2U9Yi5zdGF0ZU5vZGU7aWYoZT0obnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmZS5oeWRyYXRlKWhnPUhlKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGdnPWIsZT1pZz0hMDtlPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPWZnKGIsbnVsbCxkLGMpKTooUShhLGIsZCxjKSxvZygpKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBMZihiKSxudWxsPT09YSYmbGcoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixDZShkLGUpP2c9bnVsbDpudWxsIT09XG5mJiZDZShkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KSx2ZyhhLGIpLDEhPT1jJiZiLm1vZGUmMSYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOihRKGEsYixnLGMpLGI9Yi5jaGlsZCksYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZsZyhiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHpnKGEsYixjKTtjYXNlIDQ6cmV0dXJuIEpmKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPWVnKGIsbnVsbCxkLGMpOlEoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpQKGQsZSkscWcoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFEoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBRKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFEoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO0JmKGIsZik7aWYobnVsbCE9PWcpe3ZhciBoPWcudmFsdWU7Zj1oPT09ZiYmKDAhPT1ofHwxL2g9PT0xL2YpfHxoIT09aCYmZiE9PWY/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MDtpZigwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFMLmN1cnJlbnQpe2I9dGcoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGc9Yi5jaGlsZCxudWxsIT09ZyYmKGcucmV0dXJuPWIpO251bGwhPT1nOyl7aD1nLmZpcnN0Q29udGV4dERlcGVuZGVuY3k7aWYobnVsbCE9PWgpe2Rve2lmKGguY29udGV4dD09PWQmJjAhPT0oaC5vYnNlcnZlZEJpdHMmZikpe2lmKDE9PT1nLnRhZyl7dmFyIGs9bmYoYyk7ay50YWc9MjtwZihnLGspfWcuZXhwaXJhdGlvblRpbWU8XG5jJiYoZy5leHBpcmF0aW9uVGltZT1jKTtrPWcuYWx0ZXJuYXRlO251bGwhPT1rJiZrLmV4cGlyYXRpb25UaW1lPGMmJihrLmV4cGlyYXRpb25UaW1lPWMpO2Zvcih2YXIgbD1nLnJldHVybjtudWxsIT09bDspe2s9bC5hbHRlcm5hdGU7aWYobC5jaGlsZEV4cGlyYXRpb25UaW1lPGMpbC5jaGlsZEV4cGlyYXRpb25UaW1lPWMsbnVsbCE9PWsmJmsuY2hpbGRFeHBpcmF0aW9uVGltZTxjJiYoay5jaGlsZEV4cGlyYXRpb25UaW1lPWMpO2Vsc2UgaWYobnVsbCE9PWsmJmsuY2hpbGRFeHBpcmF0aW9uVGltZTxjKWsuY2hpbGRFeHBpcmF0aW9uVGltZT1jO2Vsc2UgYnJlYWs7bD1sLnJldHVybn19az1nLmNoaWxkO2g9aC5uZXh0fXdoaWxlKG51bGwhPT1oKX1lbHNlIGs9MTA9PT1nLnRhZz9nLnR5cGU9PT1iLnR5cGU/bnVsbDpnLmNoaWxkOmcuY2hpbGQ7aWYobnVsbCE9PWspay5yZXR1cm49ZztlbHNlIGZvcihrPWc7bnVsbCE9PWs7KXtpZihrPT09Yil7az1udWxsO2JyZWFrfWc9ay5zaWJsaW5nO1xuaWYobnVsbCE9PWcpe2cucmV0dXJuPWsucmV0dXJuO2s9ZzticmVha31rPWsucmV0dXJufWc9a319UShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbixEZihiLGMpLGU9RWYoZSxmLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZWZmZWN0VGFnfD0xLFEoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPVAoZSxiLnBlbmRpbmdQcm9wcyksZj1QKGUudHlwZSxmKSxyZyhhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gc2coYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOlAoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksYi50YWc9MSxNKGQpPyhhPVxuITAsUmUoYikpOmE9ITEsRGYoYixjKSxYZihiLGQsZSxjKSwkZihiLGQsZSxjKSx4ZyhudWxsLGIsZCwhMCxhLGMpO2RlZmF1bHQ6dChcIjE1NlwiKX19ZnVuY3Rpb24gQmcoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIENnPXZvaWQgMCxHZz12b2lkIDAsSGc9dm9pZCAwLElnPXZvaWQgMDtDZz1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07R2c9ZnVuY3Rpb24oKXt9O1xuSGc9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoZiE9PWQpe3ZhciBnPWIuc3RhdGVOb2RlO0lmKE8uY3VycmVudCk7YT1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpmPXpjKGcsZik7ZD16YyhnLGQpO2E9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9ZWUoZyxmKTtkPWVlKGcsZCk7YT1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Zj1uKHt9LGYse3ZhbHVlOnZvaWQgMH0pO2Q9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTthPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmY9Z2UoZyxmKTtkPWdlKGcsZCk7YT1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBmLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihnLm9uY2xpY2s9eWUpfXZlKGMsZCk7Zz1jPXZvaWQgMDt2YXIgaD1udWxsO2ZvcihjIGluIGYpaWYoIWQuaGFzT3duUHJvcGVydHkoYykmJmYuaGFzT3duUHJvcGVydHkoYykmJm51bGwhPWZbY10paWYoXCJzdHlsZVwiPT09XG5jKXt2YXIgaz1mW2NdO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmKGh8fChoPXt9KSxoW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1jJiZcImNoaWxkcmVuXCIhPT1jJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWMmJlwiYXV0b0ZvY3VzXCIhPT1jJiYoc2EuaGFzT3duUHJvcGVydHkoYyk/YXx8KGE9W10pOihhPWF8fFtdKS5wdXNoKGMsbnVsbCkpO2ZvcihjIGluIGQpe3ZhciBsPWRbY107az1udWxsIT1mP2ZbY106dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoYykmJmwhPT1rJiYobnVsbCE9bHx8bnVsbCE9aykpaWYoXCJzdHlsZVwiPT09YylpZihrKXtmb3IoZyBpbiBrKSFrLmhhc093blByb3BlcnR5KGcpfHxsJiZsLmhhc093blByb3BlcnR5KGcpfHwoaHx8KGg9e30pLGhbZ109XCJcIik7Zm9yKGcgaW4gbClsLmhhc093blByb3BlcnR5KGcpJiZrW2ddIT09bFtnXSYmKGh8fFxuKGg9e30pLGhbZ109bFtnXSl9ZWxzZSBofHwoYXx8KGE9W10pLGEucHVzaChjLGgpKSxoPWw7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWM/KGw9bD9sLl9faHRtbDp2b2lkIDAsaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1sJiZrIT09bCYmKGE9YXx8W10pLnB1c2goYyxcIlwiK2wpKTpcImNoaWxkcmVuXCI9PT1jP2s9PT1sfHxcInN0cmluZ1wiIT09dHlwZW9mIGwmJlwibnVtYmVyXCIhPT10eXBlb2YgbHx8KGE9YXx8W10pLnB1c2goYyxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1jJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YyYmKHNhLmhhc093blByb3BlcnR5KGMpPyhudWxsIT1sJiZ4ZShlLGMpLGF8fGs9PT1sfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGMsbCkpfWgmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixoKTtlPWE7KGIudXBkYXRlUXVldWU9ZSkmJkJnKGIpfX07SWc9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJkJnKGIpfTtcbnZhciBKZz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBLZyhhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPW5jKGMpKTtudWxsIT09YyYmbWMoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmbWMoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gTGcoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7TWcoYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gTmcoYSxiKXtmb3IodmFyIGM9YTs7KXtpZig1PT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKGIpZC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO2Vsc2V7ZD1jLnN0YXRlTm9kZTt2YXIgZT1jLm1lbW9pemVkUHJvcHMuc3R5bGU7ZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGw7ZC5zdHlsZS5kaXNwbGF5PXNlKFwiZGlzcGxheVwiLGUpfX1lbHNlIGlmKDY9PT1jLnRhZyljLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yj9cIlwiOmMubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDEzPT09Yy50YWcmJm51bGwhPT1jLm1lbW9pemVkU3RhdGUpe2Q9Yy5jaGlsZC5zaWJsaW5nO2QucmV0dXJuPWM7Yz1kO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8XG5jLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBPZyhhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgVWUmJlVlKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OnZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIubGFzdEVmZmVjdCxudWxsIT09Yikpe3ZhciBjPWI9Yi5uZXh0O2Rve3ZhciBkPWMuZGVzdHJveTtpZihudWxsIT09ZCl7dmFyIGU9YTt0cnl7ZCgpfWNhdGNoKGYpe01nKGUsZil9fWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX1icmVhaztjYXNlIDE6TGcoYSk7Yj1hLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGYpe01nKGEsZil9YnJlYWs7Y2FzZSA1OkxnKGEpO2JyZWFrO2Nhc2UgNDpQZyhhKX19XG5mdW5jdGlvbiBRZyhhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFJnKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKFFnKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10KFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dChcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKHBlKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxRZyhjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWlmKGMpaWYoZCl7dmFyIGY9YixnPWUuc3RhdGVOb2RlLGg9Yzs4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcsaCk6Zi5pbnNlcnRCZWZvcmUoZyxoKX1lbHNlIGIuaW5zZXJ0QmVmb3JlKGUuc3RhdGVOb2RlLGMpO2Vsc2UgZD8oZz1iLGg9ZS5zdGF0ZU5vZGUsOD09PWcubm9kZVR5cGU/KGY9Zy5wYXJlbnROb2RlLGYuaW5zZXJ0QmVmb3JlKGgsZykpOihmPWcsZi5hcHBlbmRDaGlsZChoKSksZz1nLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWcmJnZvaWQgMCE9PWd8fG51bGwhPT1mLm9uY2xpY2t8fChmLm9uY2xpY2s9eWUpKTpiLmFwcGVuZENoaWxkKGUuc3RhdGVOb2RlKTtcbmVsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZC5yZXR1cm49ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09ZS5zaWJsaW5nOyl7aWYobnVsbD09PWUucmV0dXJufHxlLnJldHVybj09PWEpcmV0dXJuO2U9ZS5yZXR1cm59ZS5zaWJsaW5nLnJldHVybj1lLnJldHVybjtlPWUuc2libGluZ319XG5mdW5jdGlvbiBQZyhhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGU9dm9pZCAwOzspe2lmKCFjKXtjPWIucmV0dXJuO2E6Zm9yKDs7KXtudWxsPT09Yz90KFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpkPWMuc3RhdGVOb2RlO2U9ITE7YnJlYWsgYTtjYXNlIDM6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYTtjYXNlIDQ6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYX1jPWMucmV0dXJufWM9ITB9aWYoNT09PWIudGFnfHw2PT09Yi50YWcpe2E6Zm9yKHZhciBmPWIsZz1mOzspaWYoT2coZyksbnVsbCE9PWcuY2hpbGQmJjQhPT1nLnRhZylnLmNoaWxkLnJldHVybj1nLGc9Zy5jaGlsZDtlbHNle2lmKGc9PT1mKWJyZWFrO2Zvcig7bnVsbD09PWcuc2libGluZzspe2lmKG51bGw9PT1nLnJldHVybnx8Zy5yZXR1cm49PT1mKWJyZWFrIGE7Zz1nLnJldHVybn1nLnNpYmxpbmcucmV0dXJuPWcucmV0dXJuO2c9Zy5zaWJsaW5nfWU/XG4oZj1kLGc9Yi5zdGF0ZU5vZGUsOD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGcpOmYucmVtb3ZlQ2hpbGQoZykpOmQucmVtb3ZlQ2hpbGQoYi5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWIudGFnPyhkPWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8sZT0hMCk6T2coYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybjtiPWIucmV0dXJuOzQ9PT1iLnRhZyYmKGM9ITEpfWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fVxuZnVuY3Rpb24gU2coYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpicmVhaztjYXNlIDE6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiZGZShjLGYsZSxhLGQsYil9YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT90KFwiMTYyXCIpOnZvaWQgMDtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO2JyZWFrO2Nhc2UgMzpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6Yz1iLm1lbW9pemVkU3RhdGU7ZD12b2lkIDA7YT1iO251bGw9PT1jP2Q9ITE6KGQ9ITAsYT1iLmNoaWxkLDA9PT1jLnRpbWVkT3V0QXQmJihjLnRpbWVkT3V0QXQ9UmYoKSkpO251bGwhPT1hJiZOZyhhLGQpO2M9Yi51cGRhdGVRdWV1ZTtcbmlmKG51bGwhPT1jKXtiLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGc9Yi5zdGF0ZU5vZGU7bnVsbD09PWcmJihnPWIuc3RhdGVOb2RlPW5ldyBKZyk7Yy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBjPVRnLmJpbmQobnVsbCxiLGEpO2cuaGFzKGEpfHwoZy5hZGQoYSksYS50aGVuKGMsYykpfSl9YnJlYWs7Y2FzZSAxNzpicmVhaztkZWZhdWx0OnQoXCIxNjNcIil9fXZhciBVZz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBWZyhhLGIsYyl7Yz1uZihjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtXZyhkKTtLZyhhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFhnKGEsYixjKXtjPW5mKGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVlnP1lnPW5ldyBTZXQoW3RoaXNdKTpZZy5hZGQodGhpcykpO3ZhciBjPWIudmFsdWUsZT1iLnN0YWNrO0tnKGEsYik7dGhpcy5jb21wb25lbnREaWRDYXRjaChjLHtjb21wb25lbnRTdGFjazpudWxsIT09ZT9lOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gWmcoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6TShhLnR5cGUpJiZOZShhKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiYyMDQ4PyhhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGEpOm51bGw7Y2FzZSAzOnJldHVybiBLZihhKSxPZShhKSxiPWEuZWZmZWN0VGFnLDAhPT0oYiY2NCk/dChcIjI4NVwiKTp2b2lkIDAsYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhO2Nhc2UgNTpyZXR1cm4gTWYoYSksbnVsbDtjYXNlIDEzOnJldHVybiBiPWEuZWZmZWN0VGFnLGImMjA0OD8oYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhKTpudWxsO2Nhc2UgNDpyZXR1cm4gS2YoYSksbnVsbDtjYXNlIDEwOnJldHVybiBDZihhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyICRnPXtyZWFkQ29udGV4dDpFZn0sYWg9WGIuUmVhY3RDdXJyZW50T3duZXIsYmg9MTA3Mzc0MTgyMixjaD0wLGRoPSExLFM9bnVsbCxUPW51bGwsVT0wLGVoPS0xLGZoPSExLFY9bnVsbCxnaD0hMSxoaD1udWxsLGloPW51bGwsWWc9bnVsbDtmdW5jdGlvbiBqaCgpe2lmKG51bGwhPT1TKWZvcih2YXIgYT1TLnJldHVybjtudWxsIT09YTspe3ZhciBiPWE7c3dpdGNoKGIudGFnKXtjYXNlIDE6dmFyIGM9Yi50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1jJiZ2b2lkIDAhPT1jJiZOZShiKTticmVhaztjYXNlIDM6S2YoYik7T2UoYik7YnJlYWs7Y2FzZSA1Ok1mKGIpO2JyZWFrO2Nhc2UgNDpLZihiKTticmVhaztjYXNlIDEwOkNmKGIpfWE9YS5yZXR1cm59VD1udWxsO1U9MDtlaD0tMTtmaD0hMTtTPW51bGx9ZnVuY3Rpb24gVGYoKXtudWxsIT09aWgmJihiYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayhoaCksaWgoKSl9XG5mdW5jdGlvbiBraChhKXtmb3IoOzspe3ZhciBiPWEuYWx0ZXJuYXRlLGM9YS5yZXR1cm4sZD1hLnNpYmxpbmc7aWYoMD09PShhLmVmZmVjdFRhZyYxMDI0KSl7Uz1hO2E6e3ZhciBlPWI7Yj1hO3ZhciBmPVU7dmFyIGc9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSAxNjpicmVhaztjYXNlIDE1OmNhc2UgMDpicmVhaztjYXNlIDE6TShiLnR5cGUpJiZOZShiKTticmVhaztjYXNlIDM6S2YoYik7T2UoYik7Zz1iLnN0YXRlTm9kZTtnLnBlbmRpbmdDb250ZXh0JiYoZy5jb250ZXh0PWcucGVuZGluZ0NvbnRleHQsZy5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09ZXx8bnVsbD09PWUuY2hpbGQpbmcoYiksYi5lZmZlY3RUYWcmPS0zO0dnKGIpO2JyZWFrO2Nhc2UgNTpNZihiKTt2YXIgaD1JZihIZi5jdXJyZW50KTtmPWIudHlwZTtpZihudWxsIT09ZSYmbnVsbCE9Yi5zdGF0ZU5vZGUpSGcoZSxiLGYsZyxoKSxlLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PVxuMTI4KTtlbHNlIGlmKGcpe3ZhciBrPUlmKE8uY3VycmVudCk7aWYobmcoYikpe2c9YjtlPWcuc3RhdGVOb2RlO3ZhciBsPWcudHlwZSxtPWcubWVtb2l6ZWRQcm9wcyxyPWg7ZVtHYV09ZztlW0hhXT1tO2Y9dm9pZCAwO2g9bDtzd2l0Y2goaCl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpIKFwibG9hZFwiLGUpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihsPTA7bDxiYi5sZW5ndGg7bCsrKUgoYmJbbF0sZSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkgoXCJlcnJvclwiLGUpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkgoXCJlcnJvclwiLGUpO0goXCJsb2FkXCIsZSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpIKFwicmVzZXRcIixlKTtIKFwic3VibWl0XCIsZSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpIKFwidG9nZ2xlXCIsZSk7YnJlYWs7Y2FzZSBcImlucHV0XCI6QWMoZSxtKTtIKFwiaW52YWxpZFwiLGUpO3hlKHIsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZS5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhbS5tdWx0aXBsZX07SChcImludmFsaWRcIixlKTt4ZShyLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGUoZSxtKSxIKFwiaW52YWxpZFwiLGUpLHhlKHIsXCJvbkNoYW5nZVwiKX12ZShoLG0pO2w9bnVsbDtmb3IoZiBpbiBtKW0uaGFzT3duUHJvcGVydHkoZikmJihrPW1bZl0sXCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/ZS50ZXh0Q29udGVudCE9PWsmJihsPVtcImNoaWxkcmVuXCIsa10pOlwibnVtYmVyXCI9PT10eXBlb2YgayYmZS50ZXh0Q29udGVudCE9PVwiXCIrayYmKGw9W1wiY2hpbGRyZW5cIixcIlwiK2tdKTpzYS5oYXNPd25Qcm9wZXJ0eShmKSYmbnVsbCE9ayYmeGUocixmKSk7c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOlZiKGUpO0VjKGUsbSwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmIoZSk7amUoZSxtKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIG0ub25DbGljayYmXG4oZS5vbmNsaWNrPXllKX1mPWw7Zy51cGRhdGVRdWV1ZT1mO2c9bnVsbCE9PWY/ITA6ITE7ZyYmQmcoYil9ZWxzZXttPWI7ZT1mO3I9ZztsPTk9PT1oLm5vZGVUeXBlP2g6aC5vd25lckRvY3VtZW50O2s9PT1rZS5odG1sJiYoaz1sZShlKSk7az09PWtlLmh0bWw/XCJzY3JpcHRcIj09PWU/KGU9bC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGUuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsbD1lLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2Ygci5pcz9sPWwuY3JlYXRlRWxlbWVudChlLHtpczpyLmlzfSk6KGw9bC5jcmVhdGVFbGVtZW50KGUpLFwic2VsZWN0XCI9PT1lJiZyLm11bHRpcGxlJiYobC5tdWx0aXBsZT0hMCkpOmw9bC5jcmVhdGVFbGVtZW50TlMoayxlKTtlPWw7ZVtHYV09bTtlW0hhXT1nO0NnKGUsYiwhMSwhMSk7cj1lO2w9ZjttPWc7dmFyIHc9aCx5PXdlKGwsbSk7c3dpdGNoKGwpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6SChcImxvYWRcIixcbnIpO2g9bTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoaD0wO2g8YmIubGVuZ3RoO2grKylIKGJiW2hdLHIpO2g9bTticmVhaztjYXNlIFwic291cmNlXCI6SChcImVycm9yXCIscik7aD1tO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkgoXCJlcnJvclwiLHIpO0goXCJsb2FkXCIscik7aD1tO2JyZWFrO2Nhc2UgXCJmb3JtXCI6SChcInJlc2V0XCIscik7SChcInN1Ym1pdFwiLHIpO2g9bTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkgoXCJ0b2dnbGVcIixyKTtoPW07YnJlYWs7Y2FzZSBcImlucHV0XCI6QWMocixtKTtoPXpjKHIsbSk7SChcImludmFsaWRcIixyKTt4ZSh3LFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmg9ZWUocixtKTticmVhaztjYXNlIFwic2VsZWN0XCI6ci5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIW0ubXVsdGlwbGV9O2g9bih7fSxtLHt2YWx1ZTp2b2lkIDB9KTtIKFwiaW52YWxpZFwiLHIpO3hlKHcsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoZShyLFxubSk7aD1nZShyLG0pO0goXCJpbnZhbGlkXCIscik7eGUodyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6aD1tfXZlKGwsaCk7az12b2lkIDA7dmFyIEI9bCxSPXIsdj1oO2ZvcihrIGluIHYpaWYodi5oYXNPd25Qcm9wZXJ0eShrKSl7dmFyIHE9dltrXTtcInN0eWxlXCI9PT1rP3RlKFIscSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09az8ocT1xP3EuX19odG1sOnZvaWQgMCxudWxsIT1xJiZvZShSLHEpKTpcImNoaWxkcmVuXCI9PT1rP1wic3RyaW5nXCI9PT10eXBlb2YgcT8oXCJ0ZXh0YXJlYVwiIT09Qnx8XCJcIiE9PXEpJiZwZShSLHEpOlwibnVtYmVyXCI9PT10eXBlb2YgcSYmcGUoUixcIlwiK3EpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1rJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ayYmXCJhdXRvRm9jdXNcIiE9PWsmJihzYS5oYXNPd25Qcm9wZXJ0eShrKT9udWxsIT1xJiZ4ZSh3LGspOm51bGwhPXEmJnhjKFIsayxxLHkpKX1zd2l0Y2gobCl7Y2FzZSBcImlucHV0XCI6VmIocik7XG5FYyhyLG0sITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZiKHIpO2plKHIsbSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPW0udmFsdWUmJnIuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3ljKG0udmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6aD1yO2gubXVsdGlwbGU9ISFtLm11bHRpcGxlO3I9bS52YWx1ZTtudWxsIT1yP2ZlKGgsISFtLm11bHRpcGxlLHIsITEpOm51bGwhPW0uZGVmYXVsdFZhbHVlJiZmZShoLCEhbS5tdWx0aXBsZSxtLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYoci5vbmNsaWNrPXllKX0oZz1CZShmLGcpKSYmQmcoYik7Yi5zdGF0ZU5vZGU9ZX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNlIG51bGw9PT1iLnN0YXRlTm9kZT90KFwiMTY2XCIpOnZvaWQgMDticmVhaztjYXNlIDY6ZSYmbnVsbCE9Yi5zdGF0ZU5vZGU/SWcoZSxiLGUubWVtb2l6ZWRQcm9wcyxnKTooXCJzdHJpbmdcIiE9PVxudHlwZW9mIGcmJihudWxsPT09Yi5zdGF0ZU5vZGU/dChcIjE2NlwiKTp2b2lkIDApLGU9SWYoSGYuY3VycmVudCksSWYoTy5jdXJyZW50KSxuZyhiKT8oZz1iLGY9Zy5zdGF0ZU5vZGUsZT1nLm1lbW9pemVkUHJvcHMsZltHYV09ZywoZz1mLm5vZGVWYWx1ZSE9PWUpJiZCZyhiKSk6KGY9YixnPSg5PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZyksZ1tHYV09YixmLnN0YXRlTm9kZT1nKSk7YnJlYWs7Y2FzZSAxMTpicmVhaztjYXNlIDEzOmc9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXtiLmV4cGlyYXRpb25UaW1lPWY7Uz1iO2JyZWFrIGF9Zz1udWxsIT09ZztmPW51bGwhPT1lJiZudWxsIT09ZS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYhZyYmZiYmKGU9ZS5jaGlsZC5zaWJsaW5nLG51bGwhPT1lJiYoaD1iLmZpcnN0RWZmZWN0LG51bGwhPT1oPyhiLmZpcnN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PWgpOihiLmZpcnN0RWZmZWN0PVxuYi5sYXN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PW51bGwpLGUuZWZmZWN0VGFnPTgpKTtpZihnIT09Znx8MD09PShiLmVmZmVjdFRhZyYxKSYmZyliLmVmZmVjdFRhZ3w9NDticmVhaztjYXNlIDc6YnJlYWs7Y2FzZSA4OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSA0OktmKGIpO0dnKGIpO2JyZWFrO2Nhc2UgMTA6Q2YoYik7YnJlYWs7Y2FzZSA5OmJyZWFrO2Nhc2UgMTQ6YnJlYWs7Y2FzZSAxNzpNKGIudHlwZSkmJk5lKGIpO2JyZWFrO2RlZmF1bHQ6dChcIjE1NlwiKX1TPW51bGx9Yj1hO2lmKDE9PT1VfHwxIT09Yi5jaGlsZEV4cGlyYXRpb25UaW1lKXtnPTA7Zm9yKGY9Yi5jaGlsZDtudWxsIT09ZjspZT1mLmV4cGlyYXRpb25UaW1lLGg9Zi5jaGlsZEV4cGlyYXRpb25UaW1lLGU+ZyYmKGc9ZSksaD5nJiYoZz1oKSxmPWYuc2libGluZztiLmNoaWxkRXhwaXJhdGlvblRpbWU9Z31pZihudWxsIT09UylyZXR1cm4gUztudWxsIT09YyYmMD09PShjLmVmZmVjdFRhZyYxMDI0KSYmKG51bGw9PT1cbmMuZmlyc3RFZmZlY3QmJihjLmZpcnN0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKX1lbHNle2E9WmcoYSxVKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTEwMjMsYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PW51bGwsYy5lZmZlY3RUYWd8PTEwMjQpfWlmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNlIGJyZWFrfXJldHVybiBudWxsfVxuZnVuY3Rpb24gbGgoYSl7dmFyIGI9QWcoYS5hbHRlcm5hdGUsYSxVKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPWtoKGEpKTthaC5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBtaChhLGIpe2RoP3QoXCIyNDNcIik6dm9pZCAwO1RmKCk7ZGg9ITA7YWguY3VycmVudERpc3BhdGNoZXI9JGc7dmFyIGM9YS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjtpZihjIT09VXx8YSE9PVR8fG51bGw9PT1TKWpoKCksVD1hLFU9YyxTPSRlKFQuY3VycmVudCxudWxsLFUpLGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGQ9ITE7ZG97dHJ5e2lmKGIpZm9yKDtudWxsIT09UyYmIW5oKCk7KVM9bGgoUyk7ZWxzZSBmb3IoO251bGwhPT1TOylTPWxoKFMpfWNhdGNoKEIpe2lmKEFmPXpmPXlmPW51bGwsbnVsbD09PVMpZD0hMCxXZyhCKTtlbHNle251bGw9PT1TP3QoXCIyNzFcIik6dm9pZCAwO3ZhciBlPVMsZj1lLnJldHVybjtpZihudWxsPT09ZilkPSEwLFdnKEIpO2Vsc2V7YTp7dmFyIGc9YSxoPWYsaz1lLGw9QjtmPVU7ay5lZmZlY3RUYWd8PTEwMjQ7ay5maXJzdEVmZmVjdD1rLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09bCYmXCJvYmplY3RcIj09PVxudHlwZW9mIGwmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsLnRoZW4pe3ZhciBtPWw7bD1oO3ZhciByPS0xLHc9LTE7ZG97aWYoMTM9PT1sLnRhZyl7dmFyIHk9bC5hbHRlcm5hdGU7aWYobnVsbCE9PXkmJih5PXkubWVtb2l6ZWRTdGF0ZSxudWxsIT09eSkpe3c9MTAqKDEwNzM3NDE4MjIteS50aW1lZE91dEF0KTticmVha315PWwucGVuZGluZ1Byb3BzLm1heER1cmF0aW9uO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgeSlpZigwPj15KXI9MDtlbHNlIGlmKC0xPT09cnx8eTxyKXI9eX1sPWwucmV0dXJufXdoaWxlKG51bGwhPT1sKTtsPWg7ZG97aWYoeT0xMz09PWwudGFnKXk9dm9pZCAwPT09bC5tZW1vaXplZFByb3BzLmZhbGxiYWNrPyExOm51bGw9PT1sLm1lbW9pemVkU3RhdGU7aWYoeSl7aD1sLnVwZGF0ZVF1ZXVlO251bGw9PT1oP2wudXBkYXRlUXVldWU9bmV3IFNldChbbV0pOmguYWRkKG0pO2lmKDA9PT0obC5tb2RlJjEpKXtsLmVmZmVjdFRhZ3w9NjQ7ay5lZmZlY3RUYWcmPS0xOTU3O1xuMT09PWsudGFnJiYobnVsbD09PWsuYWx0ZXJuYXRlP2sudGFnPTE3OihmPW5mKDEwNzM3NDE4MjMpLGYudGFnPTIscGYoayxmKSkpO2suZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMzticmVhayBhfWs9Zy5waW5nQ2FjaGU7bnVsbD09PWs/KGs9Zy5waW5nQ2FjaGU9bmV3IFVnLGg9bmV3IFNldCxrLnNldChtLGgpKTooaD1rLmdldChtKSx2b2lkIDA9PT1oJiYoaD1uZXcgU2V0LGsuc2V0KG0saCkpKTtoLmhhcyhmKXx8KGguYWRkKGYpLGs9b2guYmluZChudWxsLGcsbSxmKSxtLnRoZW4oayxrKSk7LTE9PT1yP2c9MTA3Mzc0MTgyMzooLTE9PT13JiYodz0xMCooMTA3Mzc0MTgyMi1qZihnLGYpKS01RTMpLGc9dytyKTswPD1nJiZlaDxnJiYoZWg9Zyk7bC5lZmZlY3RUYWd8PTIwNDg7bC5leHBpcmF0aW9uVGltZT1mO2JyZWFrIGF9bD1sLnJldHVybn13aGlsZShudWxsIT09bCk7bD1FcnJvcigobWMoay50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK1xubmMoaykpfWZoPSEwO2w9d2YobCxrKTtnPWg7ZG97c3dpdGNoKGcudGFnKXtjYXNlIDM6Zy5lZmZlY3RUYWd8PTIwNDg7Zy5leHBpcmF0aW9uVGltZT1mO2Y9VmcoZyxsLGYpO3FmKGcsZik7YnJlYWsgYTtjYXNlIDE6aWYobT1sLHI9Zy50eXBlLHc9Zy5zdGF0ZU5vZGUsMD09PShnLmVmZmVjdFRhZyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygci5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT13JiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1ZZ3x8IVlnLmhhcyh3KSkpKXtnLmVmZmVjdFRhZ3w9MjA0ODtnLmV4cGlyYXRpb25UaW1lPWY7Zj1YZyhnLG0sZik7cWYoZyxmKTticmVhayBhfX1nPWcucmV0dXJufXdoaWxlKG51bGwhPT1nKX1TPWtoKGUpO2NvbnRpbnVlfX19YnJlYWt9d2hpbGUoMSk7ZGg9ITE7QWY9emY9eWY9YWguY3VycmVudERpc3BhdGNoZXI9bnVsbDtpZihkKVQ9bnVsbCxhLmZpbmlzaGVkV29yaz1udWxsO1xuZWxzZSBpZihudWxsIT09UylhLmZpbmlzaGVkV29yaz1udWxsO2Vsc2V7ZD1hLmN1cnJlbnQuYWx0ZXJuYXRlO251bGw9PT1kP3QoXCIyODFcIik6dm9pZCAwO1Q9bnVsbDtpZihmaCl7ZT1hLmxhdGVzdFBlbmRpbmdUaW1lO2Y9YS5sYXRlc3RTdXNwZW5kZWRUaW1lO2c9YS5sYXRlc3RQaW5nZWRUaW1lO2lmKDAhPT1lJiZlPGN8fDAhPT1mJiZmPGN8fDAhPT1nJiZnPGMpe2hmKGEsYyk7cGgoYSxkLGMsYS5leHBpcmF0aW9uVGltZSwtMSk7cmV0dXJufWlmKCFhLmRpZEVycm9yJiZiKXthLmRpZEVycm9yPSEwO2M9YS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj1jO2I9YS5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO3BoKGEsZCxjLGIsLTEpO3JldHVybn19YiYmLTEhPT1laD8oaGYoYSxjKSxiPTEwKigxMDczNzQxODIyLWpmKGEsYykpLGI8ZWgmJihlaD1iKSxiPTEwKigxMDczNzQxODIyLVJmKCkpLGI9ZWgtYixwaChhLGQsYyxhLmV4cGlyYXRpb25UaW1lLDA+Yj8wOmIpKTooYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9XG5jLGEuZmluaXNoZWRXb3JrPWQpfX1mdW5jdGlvbiBNZyhhLGIpe2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe3N3aXRjaChjLnRhZyl7Y2FzZSAxOnZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1ZZ3x8IVlnLmhhcyhkKSkpe2E9d2YoYixhKTthPVhnKGMsYSwxMDczNzQxODIzKTtwZihjLGEpO1VmKGMsMTA3Mzc0MTgyMyk7cmV0dXJufWJyZWFrO2Nhc2UgMzphPXdmKGIsYSk7YT1WZyhjLGEsMTA3Mzc0MTgyMyk7cGYoYyxhKTtVZihjLDEwNzM3NDE4MjMpO3JldHVybn1jPWMucmV0dXJufTM9PT1hLnRhZyYmKGM9d2YoYixhKSxjPVZnKGEsYywxMDczNzQxODIzKSxwZihhLGMpLFVmKGEsMTA3Mzc0MTgyMykpfVxuZnVuY3Rpb24gU2YoYSxiKXswIT09Y2g/YT1jaDpkaD9hPWdoPzEwNzM3NDE4MjM6VTpiLm1vZGUmMT8oYT1xaD8xMDczNzQxODIyLTEwKigoKDEwNzM3NDE4MjItYSsxNSkvMTB8MCkrMSk6MTA3Mzc0MTgyMi0yNSooKCgxMDczNzQxODIyLWErNTAwKS8yNXwwKSsxKSxudWxsIT09VCYmYT09PVUmJi0tYSk6YT0xMDczNzQxODIzO3FoJiYoMD09PXJofHxhPHJoKSYmKHJoPWEpO3JldHVybiBhfWZ1bmN0aW9uIG9oKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7aWYobnVsbCE9PVQmJlU9PT1jKVQ9bnVsbDtlbHNlIGlmKGI9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsZD1hLmxhdGVzdFN1c3BlbmRlZFRpbWUsMCE9PWImJmM8PWImJmM+PWQpe2EuZGlkRXJyb3I9ITE7Yj1hLmxhdGVzdFBpbmdlZFRpbWU7aWYoMD09PWJ8fGI+YylhLmxhdGVzdFBpbmdlZFRpbWU9YztnZihjLGEpO2M9YS5leHBpcmF0aW9uVGltZTswIT09YyYmc2goYSxjKX19XG5mdW5jdGlvbiBUZyhhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPVJmKCk7Yj1TZihiLGEpO2E9dGgoYSxiKTtudWxsIT09YSYmKGZmKGEsYiksYj1hLmV4cGlyYXRpb25UaW1lLDAhPT1iJiZzaChhLGIpKX1cbmZ1bmN0aW9uIHRoKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihkLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7bnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmMz09PWQudGFnKXtlPWQuc3RhdGVOb2RlO2JyZWFrfWQ9ZC5yZXR1cm59cmV0dXJuIGV9XG5mdW5jdGlvbiBVZihhLGIpe2E9dGgoYSxiKTtudWxsIT09YSYmKCFkaCYmMCE9PVUmJmI+VSYmamgoKSxmZihhLGIpLGRoJiYhZ2gmJlQ9PT1hfHxzaChhLGEuZXhwaXJhdGlvblRpbWUpLHVoPnZoJiYodWg9MCx0KFwiMTg1XCIpKSl9ZnVuY3Rpb24gd2goYSxiLGMsZCxlKXt2YXIgZj1jaDtjaD0xMDczNzQxODIzO3RyeXtyZXR1cm4gYShiLGMsZCxlKX1maW5hbGx5e2NoPWZ9fXZhciB4aD1udWxsLFc9bnVsbCx5aD0wLHpoPXZvaWQgMCxYPSExLEFoPW51bGwsWT0wLHJoPTAsQmg9ITEsQ2g9bnVsbCxaPSExLERoPSExLHFoPSExLEVoPW51bGwsRmg9YmEudW5zdGFibGVfbm93KCksR2g9MTA3Mzc0MTgyMi0oRmgvMTB8MCksSGg9R2gsdmg9NTAsdWg9MCxJaD1udWxsO2Z1bmN0aW9uIEpoKCl7R2g9MTA3Mzc0MTgyMi0oKGJhLnVuc3RhYmxlX25vdygpLUZoKS8xMHwwKX1cbmZ1bmN0aW9uIEtoKGEsYil7aWYoMCE9PXloKXtpZihiPHloKXJldHVybjtudWxsIT09emgmJmJhLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrKHpoKX15aD1iO2E9YmEudW5zdGFibGVfbm93KCktRmg7emg9YmEudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhMaCx7dGltZW91dDoxMCooMTA3Mzc0MTgyMi1iKS1hfSl9ZnVuY3Rpb24gcGgoYSxiLGMsZCxlKXthLmV4cGlyYXRpb25UaW1lPWQ7MCE9PWV8fG5oKCk/MDxlJiYoYS50aW1lb3V0SGFuZGxlPURlKE1oLmJpbmQobnVsbCxhLGIsYyksZSkpOihhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jLGEuZmluaXNoZWRXb3JrPWIpfWZ1bmN0aW9uIE1oKGEsYixjKXthLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jO2EuZmluaXNoZWRXb3JrPWI7SmgoKTtIaD1HaDtOaChhLGMpfWZ1bmN0aW9uIFJmKCl7aWYoWClyZXR1cm4gSGg7T2goKTtpZigwPT09WXx8MT09PVkpSmgoKSxIaD1HaDtyZXR1cm4gSGh9XG5mdW5jdGlvbiBzaChhLGIpe251bGw9PT1hLm5leHRTY2hlZHVsZWRSb290PyhhLmV4cGlyYXRpb25UaW1lPWIsbnVsbD09PVc/KHhoPVc9YSxhLm5leHRTY2hlZHVsZWRSb290PWEpOihXPVcubmV4dFNjaGVkdWxlZFJvb3Q9YSxXLm5leHRTY2hlZHVsZWRSb290PXhoKSk6Yj5hLmV4cGlyYXRpb25UaW1lJiYoYS5leHBpcmF0aW9uVGltZT1iKTtYfHwoWj9EaCYmKEFoPWEsWT0xMDczNzQxODIzLFBoKGEsMTA3Mzc0MTgyMywhMSkpOjEwNzM3NDE4MjM9PT1iP1FoKDEwNzM3NDE4MjMsITEpOktoKGEsYikpfVxuZnVuY3Rpb24gT2goKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09Vylmb3IodmFyIGM9VyxkPXhoO251bGwhPT1kOyl7dmFyIGU9ZC5leHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1XP3QoXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXt4aD1XPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT14aCl4aD1lPWQubmV4dFNjaGVkdWxlZFJvb3QsVy5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1XKXtXPWM7Vy5uZXh0U2NoZWR1bGVkUm9vdD14aDtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PWQubmV4dFNjaGVkdWxlZFJvb3QsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Q9Yy5uZXh0U2NoZWR1bGVkUm9vdH1lbHNle2U+YSYmKGE9ZSxiPWQpO2lmKGQ9PT1XKWJyZWFrO2lmKDEwNzM3NDE4MjM9PT1cbmEpYnJlYWs7Yz1kO2Q9ZC5uZXh0U2NoZWR1bGVkUm9vdH19QWg9YjtZPWF9dmFyIFJoPSExO2Z1bmN0aW9uIG5oKCl7cmV0dXJuIFJoPyEwOmJhLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCk/Umg9ITA6ITF9ZnVuY3Rpb24gTGgoKXt0cnl7aWYoIW5oKCkmJm51bGwhPT14aCl7SmgoKTt2YXIgYT14aDtkb3t2YXIgYj1hLmV4cGlyYXRpb25UaW1lOzAhPT1iJiZHaDw9YiYmKGEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249R2gpO2E9YS5uZXh0U2NoZWR1bGVkUm9vdH13aGlsZShhIT09eGgpfVFoKDAsITApfWZpbmFsbHl7Umg9ITF9fVxuZnVuY3Rpb24gUWgoYSxiKXtPaCgpO2lmKGIpZm9yKEpoKCksSGg9R2g7bnVsbCE9PUFoJiYwIT09WSYmYTw9WSYmIShSaCYmR2g+WSk7KVBoKEFoLFksR2g+WSksT2goKSxKaCgpLEhoPUdoO2Vsc2UgZm9yKDtudWxsIT09QWgmJjAhPT1ZJiZhPD1ZOylQaChBaCxZLCExKSxPaCgpO2ImJih5aD0wLHpoPW51bGwpOzAhPT1ZJiZLaChBaCxZKTt1aD0wO0loPW51bGw7aWYobnVsbCE9PUVoKWZvcihhPUVoLEVoPW51bGwsYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO3RyeXtjLl9vbkNvbXBsZXRlKCl9Y2F0Y2goZCl7Qmh8fChCaD0hMCxDaD1kKX19aWYoQmgpdGhyb3cgYT1DaCxDaD1udWxsLEJoPSExLGE7fWZ1bmN0aW9uIE5oKGEsYil7WD90KFwiMjUzXCIpOnZvaWQgMDtBaD1hO1k9YjtQaChhLGIsITEpO1FoKDEwNzM3NDE4MjMsITEpfVxuZnVuY3Rpb24gUGgoYSxiLGMpe1g/dChcIjI0NVwiKTp2b2lkIDA7WD0hMDtpZihjKXt2YXIgZD1hLmZpbmlzaGVkV29yaztudWxsIT09ZD9TaChhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1hLnRpbWVvdXRIYW5kbGUsLTEhPT1kJiYoYS50aW1lb3V0SGFuZGxlPS0xLEVlKGQpKSxtaChhLGMpLGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQmJihuaCgpP2EuZmluaXNoZWRXb3JrPWQ6U2goYSxkLGIpKSl9ZWxzZSBkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kP1NoKGEsZCxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxkPWEudGltZW91dEhhbmRsZSwtMSE9PWQmJihhLnRpbWVvdXRIYW5kbGU9LTEsRWUoZCkpLG1oKGEsYyksZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZCYmU2goYSxkLGIpKTtYPSExfVxuZnVuY3Rpb24gU2goYSxiLGMpe3ZhciBkPWEuZmlyc3RCYXRjaDtpZihudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU+PWMmJihudWxsPT09RWg/RWg9W2RdOkVoLnB1c2goZCksZC5fZGVmZXIpKXthLmZpbmlzaGVkV29yaz1iO2EuZXhwaXJhdGlvblRpbWU9MDtyZXR1cm59YS5maW5pc2hlZFdvcms9bnVsbDthPT09SWg/dWgrKzooSWg9YSx1aD0wKTtnaD1kaD0hMDthLmN1cnJlbnQ9PT1iP3QoXCIxNzdcIik6dm9pZCAwO2M9YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU7MD09PWM/dChcIjI2MVwiKTp2b2lkIDA7YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDtkPWIuZXhwaXJhdGlvblRpbWU7dmFyIGU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lO2Q9ZT5kP2U6ZDthLmRpZEVycm9yPSExOzA9PT1kPyhhLmVhcmxpZXN0UGVuZGluZ1RpbWU9MCxhLmxhdGVzdFBlbmRpbmdUaW1lPTAsYS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFBpbmdlZFRpbWU9XG4wKTooZDxhLmxhdGVzdFBpbmdlZFRpbWUmJihhLmxhdGVzdFBpbmdlZFRpbWU9MCksZT1hLmxhdGVzdFBlbmRpbmdUaW1lLDAhPT1lJiYoZT5kP2EuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lPTA6YS5lYXJsaWVzdFBlbmRpbmdUaW1lPmQmJihhLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZSkpLGU9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsMD09PWU/ZmYoYSxkKTpkPGEubGF0ZXN0U3VzcGVuZGVkVGltZT8oYS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFBpbmdlZFRpbWU9MCxmZihhLGQpKTpkPmUmJmZmKGEsZCkpO2dmKDAsYSk7YWguY3VycmVudD1udWxsOzE8Yi5lZmZlY3RUYWc/bnVsbCE9PWIubGFzdEVmZmVjdD8oYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YixkPWIuZmlyc3RFZmZlY3QpOmQ9YjpkPWIuZmlyc3RFZmZlY3Q7emU9SGQ7ZT1UZCgpO2lmKFVkKGUpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpblxuZSl2YXIgZj17c3RhcnQ6ZS5zZWxlY3Rpb25TdGFydCxlbmQ6ZS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Zj0oZj1lLm93bmVyRG9jdW1lbnQpJiZmLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGc9Zi5nZXRTZWxlY3Rpb24mJmYuZ2V0U2VsZWN0aW9uKCk7aWYoZyYmMCE9PWcucmFuZ2VDb3VudCl7Zj1nLmFuY2hvck5vZGU7dmFyIGg9Zy5hbmNob3JPZmZzZXQsaz1nLmZvY3VzTm9kZTtnPWcuZm9jdXNPZmZzZXQ7dHJ5e2Yubm9kZVR5cGUsay5ub2RlVHlwZX1jYXRjaChkYil7Zj1udWxsO2JyZWFrIGF9dmFyIGw9MCxtPS0xLHI9LTEsdz0wLHk9MCxCPWUsUj1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHY7Oyl7QiE9PWZ8fDAhPT1oJiYzIT09Qi5ub2RlVHlwZXx8KG09bCtoKTtCIT09a3x8MCE9PWcmJjMhPT1CLm5vZGVUeXBlfHwocj1sK2cpOzM9PT1CLm5vZGVUeXBlJiYobCs9Qi5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHY9Qi5maXJzdENoaWxkKSlicmVhaztSPUI7Qj12fWZvcig7Oyl7aWYoQj09PVxuZSlicmVhayBiO1I9PT1mJiYrK3c9PT1oJiYobT1sKTtSPT09ayYmKyt5PT09ZyYmKHI9bCk7aWYobnVsbCE9PSh2PUIubmV4dFNpYmxpbmcpKWJyZWFrO0I9UjtSPUIucGFyZW50Tm9kZX1CPXZ9Zj0tMT09PW18fC0xPT09cj9udWxsOntzdGFydDptLGVuZDpyfX1lbHNlIGY9bnVsbH1mPWZ8fHtzdGFydDowLGVuZDowfX1lbHNlIGY9bnVsbDtBZT17Zm9jdXNlZEVsZW06ZSxzZWxlY3Rpb25SYW5nZTpmfTtIZD0hMTtmb3IoVj1kO251bGwhPT1WOyl7ZT0hMTtmPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09Vjspe2lmKFYuZWZmZWN0VGFnJjI1NilhOnt2YXIgcT1WLmFsdGVybmF0ZTtoPVY7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmJyZWFrIGE7Y2FzZSAxOmlmKGguZWZmZWN0VGFnJjI1NiYmbnVsbCE9PXEpe3ZhciB1PXEubWVtb2l6ZWRQcm9wcyxBPXEubWVtb2l6ZWRTdGF0ZSxZZj1oLnN0YXRlTm9kZSxWaD1ZZi5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShoLmVsZW1lbnRUeXBlPT09XG5oLnR5cGU/dTpQKGgudHlwZSx1KSxBKTtZZi5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1WaH1icmVhayBhO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrIGE7ZGVmYXVsdDp0KFwiMTYzXCIpfX1WPVYubmV4dEVmZmVjdH19Y2F0Y2goZGIpe2U9ITAsZj1kYn1lJiYobnVsbD09PVY/dChcIjE3OFwiKTp2b2lkIDAsTWcoVixmKSxudWxsIT09ViYmKFY9Vi5uZXh0RWZmZWN0KSl9Zm9yKFY9ZDtudWxsIT09Vjspe3E9ITE7dT12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PVY7KXt2YXIgeD1WLmVmZmVjdFRhZzt4JjE2JiZwZShWLnN0YXRlTm9kZSxcIlwiKTtpZih4JjEyOCl7dmFyIEM9Vi5hbHRlcm5hdGU7aWYobnVsbCE9PUMpe3ZhciBwPUMucmVmO251bGwhPT1wJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHA/cChudWxsKTpwLmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh4JjE0KXtjYXNlIDI6UmcoVik7Vi5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpSZyhWKTtcblYuZWZmZWN0VGFnJj0tMztTZyhWLmFsdGVybmF0ZSxWKTticmVhaztjYXNlIDQ6U2coVi5hbHRlcm5hdGUsVik7YnJlYWs7Y2FzZSA4OkE9VjtQZyhBKTtBLnJldHVybj1udWxsO0EuY2hpbGQ9bnVsbDtBLm1lbW9pemVkU3RhdGU9bnVsbDtBLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIEc9QS5hbHRlcm5hdGU7bnVsbCE9PUcmJihHLnJldHVybj1udWxsLEcuY2hpbGQ9bnVsbCxHLm1lbW9pemVkU3RhdGU9bnVsbCxHLnVwZGF0ZVF1ZXVlPW51bGwpfVY9Vi5uZXh0RWZmZWN0fX1jYXRjaChkYil7cT0hMCx1PWRifXEmJihudWxsPT09Vj90KFwiMTc4XCIpOnZvaWQgMCxNZyhWLHUpLG51bGwhPT1WJiYoVj1WLm5leHRFZmZlY3QpKX1wPUFlO0M9VGQoKTt4PXAuZm9jdXNlZEVsZW07cT1wLnNlbGVjdGlvblJhbmdlO2lmKEMhPT14JiZ4JiZ4Lm93bmVyRG9jdW1lbnQmJlNkKHgub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQseCkpe251bGwhPT1xJiZVZCh4KSYmKEM9cS5zdGFydCxwPXEuZW5kLFxudm9pZCAwPT09cCYmKHA9QyksXCJzZWxlY3Rpb25TdGFydFwiaW4geD8oeC5zZWxlY3Rpb25TdGFydD1DLHguc2VsZWN0aW9uRW5kPU1hdGgubWluKHAseC52YWx1ZS5sZW5ndGgpKToocD0oQz14Lm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmQy5kZWZhdWx0Vmlld3x8d2luZG93LHAuZ2V0U2VsZWN0aW9uJiYocD1wLmdldFNlbGVjdGlvbigpLHU9eC50ZXh0Q29udGVudC5sZW5ndGgsRz1NYXRoLm1pbihxLnN0YXJ0LHUpLHE9dm9pZCAwPT09cS5lbmQ/RzpNYXRoLm1pbihxLmVuZCx1KSwhcC5leHRlbmQmJkc+cSYmKHU9cSxxPUcsRz11KSx1PVJkKHgsRyksQT1SZCh4LHEpLHUmJkEmJigxIT09cC5yYW5nZUNvdW50fHxwLmFuY2hvck5vZGUhPT11Lm5vZGV8fHAuYW5jaG9yT2Zmc2V0IT09dS5vZmZzZXR8fHAuZm9jdXNOb2RlIT09QS5ub2RlfHxwLmZvY3VzT2Zmc2V0IT09QS5vZmZzZXQpJiYoQz1DLmNyZWF0ZVJhbmdlKCksQy5zZXRTdGFydCh1Lm5vZGUsdS5vZmZzZXQpLHAucmVtb3ZlQWxsUmFuZ2VzKCksXG5HPnE/KHAuYWRkUmFuZ2UoQykscC5leHRlbmQoQS5ub2RlLEEub2Zmc2V0KSk6KEMuc2V0RW5kKEEubm9kZSxBLm9mZnNldCkscC5hZGRSYW5nZShDKSkpKSkpO0M9W107Zm9yKHA9eDtwPXAucGFyZW50Tm9kZTspMT09PXAubm9kZVR5cGUmJkMucHVzaCh7ZWxlbWVudDpwLGxlZnQ6cC5zY3JvbGxMZWZ0LHRvcDpwLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmZvY3VzJiZ4LmZvY3VzKCk7Zm9yKHg9MDt4PEMubGVuZ3RoO3grKylwPUNbeF0scC5lbGVtZW50LnNjcm9sbExlZnQ9cC5sZWZ0LHAuZWxlbWVudC5zY3JvbGxUb3A9cC50b3B9QWU9bnVsbDtIZD0hIXplO3plPW51bGw7YS5jdXJyZW50PWI7Zm9yKFY9ZDtudWxsIT09Vjspe2Q9ITE7eD12b2lkIDA7dHJ5e2ZvcihDPWM7bnVsbCE9PVY7KXt2YXIgRmI9Vi5lZmZlY3RUYWc7aWYoRmImMzYpe3ZhciBHYj1WLmFsdGVybmF0ZTtwPVY7Rz1DO3N3aXRjaChwLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpicmVhaztcbmNhc2UgMTp2YXIgSGM9cC5zdGF0ZU5vZGU7aWYocC5lZmZlY3RUYWcmNClpZihudWxsPT09R2IpSGMuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBpaT1wLmVsZW1lbnRUeXBlPT09cC50eXBlP0diLm1lbW9pemVkUHJvcHM6UChwLnR5cGUsR2IubWVtb2l6ZWRQcm9wcyk7SGMuY29tcG9uZW50RGlkVXBkYXRlKGlpLEdiLm1lbW9pemVkU3RhdGUsSGMuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBEZz1wLnVwZGF0ZVF1ZXVlO251bGwhPT1EZyYmdWYocCxEZyxIYyxHKTticmVhaztjYXNlIDM6dmFyIEVnPXAudXBkYXRlUXVldWU7aWYobnVsbCE9PUVnKXtxPW51bGw7aWYobnVsbCE9PXAuY2hpbGQpc3dpdGNoKHAuY2hpbGQudGFnKXtjYXNlIDU6cT1wLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6cT1wLmNoaWxkLnN0YXRlTm9kZX11ZihwLEVnLHEsRyl9YnJlYWs7Y2FzZSA1OnZhciBqaT1wLnN0YXRlTm9kZTtudWxsPT09R2ImJnAuZWZmZWN0VGFnJlxuNCYmQmUocC50eXBlLHAubWVtb2l6ZWRQcm9wcykmJmppLmZvY3VzKCk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6YnJlYWs7Y2FzZSAxNzpicmVhaztkZWZhdWx0OnQoXCIxNjNcIil9fWlmKEZiJjEyOCl7dmFyIEljPVYucmVmO2lmKG51bGwhPT1JYyl7dmFyIEZnPVYuc3RhdGVOb2RlO3N3aXRjaChWLnRhZyl7Y2FzZSA1OnZhciBjZT1GZzticmVhaztkZWZhdWx0OmNlPUZnfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBJYz9JYyhjZSk6SWMuY3VycmVudD1jZX19Vj1WLm5leHRFZmZlY3R9fWNhdGNoKGRiKXtkPSEwLHg9ZGJ9ZCYmKG51bGw9PT1WP3QoXCIxNzhcIik6dm9pZCAwLE1nKFYseCksbnVsbCE9PVYmJihWPVYubmV4dEVmZmVjdCkpfWRoPWdoPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBUZSYmVGUoYi5zdGF0ZU5vZGUpO0ZiPWIuZXhwaXJhdGlvblRpbWU7Yj1iLmNoaWxkRXhwaXJhdGlvblRpbWU7Yj1iPkZiP2I6RmI7MD09PWImJihZZz1cbm51bGwpO2EuZXhwaXJhdGlvblRpbWU9YjthLmZpbmlzaGVkV29yaz1udWxsfWZ1bmN0aW9uIFdnKGEpe251bGw9PT1BaD90KFwiMjQ2XCIpOnZvaWQgMDtBaC5leHBpcmF0aW9uVGltZT0wO0JofHwoQmg9ITAsQ2g9YSl9ZnVuY3Rpb24gVGgoYSxiKXt2YXIgYz1aO1o9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KFo9Yyl8fFh8fFFoKDEwNzM3NDE4MjMsITEpfX1mdW5jdGlvbiBVaChhLGIpe2lmKFomJiFEaCl7RGg9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7RGg9ITF9fXJldHVybiBhKGIpfWZ1bmN0aW9uIFdoKGEsYixjKXtpZihxaClyZXR1cm4gYShiLGMpO1p8fFh8fDA9PT1yaHx8KFFoKHJoLCExKSxyaD0wKTt2YXIgZD1xaCxlPVo7Wj1xaD0hMDt0cnl7cmV0dXJuIGEoYixjKX1maW5hbGx5e3FoPWQsKFo9ZSl8fFh8fFFoKDEwNzM3NDE4MjMsITEpfX1cbmZ1bmN0aW9uIFhoKGEsYixjLGQsZSl7dmFyIGY9Yi5jdXJyZW50O2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7Yjp7Mj09PWtkKGMpJiYxPT09Yy50YWc/dm9pZCAwOnQoXCIxNzBcIik7dmFyIGc9Yztkb3tzd2l0Y2goZy50YWcpe2Nhc2UgMzpnPWcuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoTShnLnR5cGUpKXtnPWcuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWc9Zy5yZXR1cm59d2hpbGUobnVsbCE9PWcpO3QoXCIxNzFcIik7Zz12b2lkIDB9aWYoMT09PWMudGFnKXt2YXIgaD1jLnR5cGU7aWYoTShoKSl7Yz1RZShjLGgsZyk7YnJlYWsgYX19Yz1nfWVsc2UgYz1LZTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWU7ZT1uZihkKTtlLnBheWxvYWQ9e2VsZW1lbnQ6YX07Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7XG5UZigpO3BmKGYsZSk7VWYoZixkKTtyZXR1cm4gZH1mdW5jdGlvbiBZaChhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1SZigpO2U9U2YoZixlKTtyZXR1cm4gWGgoYSxiLGMsZSxkKX1mdW5jdGlvbiBaaChhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uICRoKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6JGIsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5DYj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkNjKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1MYShkKTtlP3ZvaWQgMDp0KFwiOTBcIik7V2IoZCk7Q2MoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmllKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmZShhLCEhYy5tdWx0aXBsZSxiLCExKX19O1xuZnVuY3Rpb24gYWkoYSl7dmFyIGI9MTA3Mzc0MTgyMi0yNSooKCgxMDczNzQxODIyLVJmKCkrNTAwKS8yNXwwKSsxKTtiPj1iaCYmKGI9YmgtMSk7dGhpcy5fZXhwaXJhdGlvblRpbWU9Ymg9Yjt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfWFpLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dGhpcy5fZGVmZXI/dm9pZCAwOnQoXCIyNTBcIik7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBiaTtYaChhLGIsbnVsbCxjLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5haS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21wbGV0ZSlhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5haS5wcm90b3R5cGUuY29tbWl0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGI9YS5maXJzdEJhdGNoO3RoaXMuX2RlZmVyJiZudWxsIT09Yj92b2lkIDA6dChcIjI1MVwiKTtpZih0aGlzLl9oYXNDaGlsZHJlbil7dmFyIGM9dGhpcy5fZXhwaXJhdGlvblRpbWU7aWYoYiE9PXRoaXMpe3RoaXMuX2hhc0NoaWxkcmVuJiYoYz10aGlzLl9leHBpcmF0aW9uVGltZT1iLl9leHBpcmF0aW9uVGltZSx0aGlzLnJlbmRlcih0aGlzLl9jaGlsZHJlbikpO2Zvcih2YXIgZD1udWxsLGU9YjtlIT09dGhpczspZD1lLGU9ZS5fbmV4dDtudWxsPT09ZD90KFwiMjUxXCIpOnZvaWQgMDtkLl9uZXh0PWUuX25leHQ7dGhpcy5fbmV4dD1iO2EuZmlyc3RCYXRjaD10aGlzfXRoaXMuX2RlZmVyPSExO05oKGEsYyk7Yj10aGlzLl9uZXh0O3RoaXMuX25leHQ9bnVsbDtiPWEuZmlyc3RCYXRjaD1iO251bGwhPT1iJiZiLl9oYXNDaGlsZHJlbiYmYi5yZW5kZXIoYi5fY2hpbGRyZW4pfWVsc2UgdGhpcy5fbmV4dD1cbm51bGwsdGhpcy5fZGVmZXI9ITF9O2FpLnByb3RvdHlwZS5fb25Db21wbGV0ZT1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21wbGV0ZSl7dGhpcy5fZGlkQ29tcGxldGU9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKSgwLGFbYl0pKCl9fTtmdW5jdGlvbiBiaSgpe3RoaXMuX2NhbGxiYWNrcz1udWxsO3RoaXMuX2RpZENvbW1pdD0hMTt0aGlzLl9vbkNvbW1pdD10aGlzLl9vbkNvbW1pdC5iaW5kKHRoaXMpfWJpLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbW1pdClhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5iaS5wcm90b3R5cGUuX29uQ29tbWl0PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbW1pdCl7dGhpcy5fZGlkQ29tbWl0PSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz90KFwiMTkxXCIsYyk6dm9pZCAwO2MoKX19fTtcbmZ1bmN0aW9uIGNpKGEsYixjKXtiPU4oMyxudWxsLG51bGwsYj8zOjApO2E9e2N1cnJlbnQ6Yixjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwscGluZ0NhY2hlOm51bGwsZWFybGllc3RQZW5kaW5nVGltZTowLGxhdGVzdFBlbmRpbmdUaW1lOjAsZWFybGllc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFBpbmdlZFRpbWU6MCxkaWRFcnJvcjohMSxwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU6MCxmaW5pc2hlZFdvcms6bnVsbCx0aW1lb3V0SGFuZGxlOi0xLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YyxuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjowLGV4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3RoaXMuX2ludGVybmFsUm9vdD1iLnN0YXRlTm9kZT1hfVxuY2kucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2ludGVybmFsUm9vdCxkPW5ldyBiaTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZkLnRoZW4oYik7WWgoYSxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtjaS5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcgYmk7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO1loKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307Y2kucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IGJpO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTtZaChiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xuY2kucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IGFpKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU+PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gZGkoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfUtiPVRoO0xiPVdoO01iPWZ1bmN0aW9uKCl7WHx8MD09PXJofHwoUWgocmgsITEpLHJoPTApfTtcbmZ1bmN0aW9uIGVpKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgY2koYSwhMSxiKX1cbmZ1bmN0aW9uIGZpKGEsYixjLGQsZSl7ZGkoYyk/dm9pZCAwOnQoXCIyMDBcIik7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgZz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1aaChmLl9pbnRlcm5hbFJvb3QpO2cuY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPWVpKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPVpoKGYuX2ludGVybmFsUm9vdCk7aC5jYWxsKGEpfX1VaChmdW5jdGlvbigpe251bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9KX1yZXR1cm4gWmgoZi5faW50ZXJuYWxSb290KX1cbmZ1bmN0aW9uIGdpKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7ZGkoYik/dm9pZCAwOnQoXCIyMDBcIik7cmV0dXJuICRoKGEsYixudWxsLGMpfVxudmFyIGtpPXtjcmVhdGVQb3J0YWw6Z2ksZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7dm9pZCAwPT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcj90KFwiMTg4XCIpOnQoXCIyNjhcIixPYmplY3Qua2V5cyhhKSkpO2E9bmQoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gZmkobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGZpKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/dChcIjM4XCIpOnZvaWQgMDtyZXR1cm4gZmkoYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7ZGkoYSk/XG52b2lkIDA6dChcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFVoKGZ1bmN0aW9uKCl7ZmkobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gZ2kuYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOlRoLHVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlczpXaCxmbHVzaFN5bmM6ZnVuY3Rpb24oYSxiKXtYP3QoXCIxODdcIik6dm9pZCAwO3ZhciBjPVo7Wj0hMDt0cnl7cmV0dXJuIHdoKGEsYil9ZmluYWxseXtaPWMsUWgoMTA3Mzc0MTgyMywhMSl9fSx1bnN0YWJsZV9jcmVhdGVSb290OmhpLHVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZDpmdW5jdGlvbihhKXt2YXIgYj1aO1o9ITA7dHJ5e3doKGEpfWZpbmFsbHl7KFo9Yil8fFh8fFFoKDEwNzM3NDE4MjMsITEpfX0sX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50czpbSmEsXG5LYSxMYSxDYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUscWEsUmEsZnVuY3Rpb24oYSl7emEoYSxRYSl9LEliLEpiLEpkLEVhXX19O2Z1bmN0aW9uIGhpKGEsYil7ZGkoYSk/dm9pZCAwOnQoXCIyOTlcIixcInVuc3RhYmxlX2NyZWF0ZVJvb3RcIik7cmV0dXJuIG5ldyBjaShhLCEwLG51bGwhPWImJiEwPT09Yi5oeWRyYXRlKX0oZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gV2Uobih7fSxhLHtvdmVycmlkZVByb3BzOm51bGwsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1uZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfX0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpJYSxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjcuMFwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO1xudmFyIGxpPXtkZWZhdWx0OmtpfSxtaT1saSYma2l8fGxpO21vZHVsZS5leHBvcnRzPW1pLmRlZmF1bHR8fG1pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xMi4wXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGM9bnVsbCxmPSExLGg9MyxrPS0xLGw9LTEsbT0hMSxuPSExO2Z1bmN0aW9uIHAoKXtpZighbSl7dmFyIGE9Yy5leHBpcmF0aW9uVGltZTtuP3EoKTpuPSEwO3IodCxhKX19XG5mdW5jdGlvbiB1KCl7dmFyIGE9YyxiPWMubmV4dDtpZihjPT09YiljPW51bGw7ZWxzZXt2YXIgZD1jLnByZXZpb3VzO2M9ZC5uZXh0PWI7Yi5wcmV2aW91cz1kfWEubmV4dD1hLnByZXZpb3VzPW51bGw7ZD1hLmNhbGxiYWNrO2I9YS5leHBpcmF0aW9uVGltZTthPWEucHJpb3JpdHlMZXZlbDt2YXIgZT1oLFE9bDtoPWE7bD1iO3RyeXt2YXIgZz1kKCl9ZmluYWxseXtoPWUsbD1RfWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnKWlmKGc9e2NhbGxiYWNrOmcscHJpb3JpdHlMZXZlbDphLGV4cGlyYXRpb25UaW1lOmIsbmV4dDpudWxsLHByZXZpb3VzOm51bGx9LG51bGw9PT1jKWM9Zy5uZXh0PWcucHJldmlvdXM9ZztlbHNle2Q9bnVsbDthPWM7ZG97aWYoYS5leHBpcmF0aW9uVGltZT49Yil7ZD1hO2JyZWFrfWE9YS5uZXh0fXdoaWxlKGEhPT1jKTtudWxsPT09ZD9kPWM6ZD09PWMmJihjPWcscCgpKTtiPWQucHJldmlvdXM7Yi5uZXh0PWQucHJldmlvdXM9ZztnLm5leHQ9ZDtnLnByZXZpb3VzPVxuYn19ZnVuY3Rpb24gdigpe2lmKC0xPT09ayYmbnVsbCE9PWMmJjE9PT1jLnByaW9yaXR5TGV2ZWwpe209ITA7dHJ5e2RvIHUoKTt3aGlsZShudWxsIT09YyYmMT09PWMucHJpb3JpdHlMZXZlbCl9ZmluYWxseXttPSExLG51bGwhPT1jP3AoKTpuPSExfX19ZnVuY3Rpb24gdChhKXttPSEwO3ZhciBiPWY7Zj1hO3RyeXtpZihhKWZvcig7bnVsbCE9PWM7KXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKGMuZXhwaXJhdGlvblRpbWU8PWQpe2RvIHUoKTt3aGlsZShudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTw9ZCl9ZWxzZSBicmVha31lbHNlIGlmKG51bGwhPT1jKXtkbyB1KCk7d2hpbGUobnVsbCE9PWMmJiF3KCkpfX1maW5hbGx5e209ITEsZj1iLG51bGwhPT1jP3AoKTpuPSExLHYoKX19XG52YXIgeD1EYXRlLHk9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsej1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lP3JlcXVlc3RBbmltYXRpb25GcmFtZTp2b2lkIDAsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2FuY2VsQW5pbWF0aW9uRnJhbWU/Y2FuY2VsQW5pbWF0aW9uRnJhbWU6dm9pZCAwLEMsRDtmdW5jdGlvbiBFKGEpe0M9QShmdW5jdGlvbihiKXt6KEQpO2EoYil9KTtEPXkoZnVuY3Rpb24oKXtCKEMpO2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LDEwMCl9XG5pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgRj1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBGLm5vdygpfX1lbHNlIGV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCl9O3ZhciByLHEsdyxHPW51bGw7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3c/Rz13aW5kb3c6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBnbG9iYWwmJihHPWdsb2JhbCk7XG5pZihHJiZHLl9zY2hlZE1vY2spe3ZhciBIPUcuX3NjaGVkTW9jaztyPUhbMF07cT1IWzFdO3c9SFsyXTtleHBvcnRzLnVuc3RhYmxlX25vdz1IWzNdfWVsc2UgaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIEk9bnVsbCxKPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1JKXRyeXtJKGEpfWZpbmFsbHl7ST1udWxsfX07cj1mdW5jdGlvbihhKXtudWxsIT09ST9zZXRUaW1lb3V0KHIsMCxhKTooST1hLHNldFRpbWVvdXQoSiwwLCExKSl9O3E9ZnVuY3Rpb24oKXtJPW51bGx9O3c9ZnVuY3Rpb24oKXtyZXR1cm4hMX19ZWxzZXtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUmJihcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBCJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIikpO3ZhciBLPW51bGwsTD0hMSxNPS0xLE49ITEsTz0hMSxQPTAsUj0zMyxTPTMzO3c9ZnVuY3Rpb24oKXtyZXR1cm4gUDw9ZXhwb3J0cy51bnN0YWJsZV9ub3coKX07dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe0w9ITE7dmFyIGE9SyxiPU07Sz1udWxsO009LTE7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKSxlPSExO2lmKDA+PVAtZClpZigtMSE9PWImJmI8PWQpZT0hMDtlbHNle058fChOPSEwLEUoVikpO0s9YTtNPWI7cmV0dXJufWlmKG51bGwhPT1hKXtPPSEwO3RyeXthKGUpfWZpbmFsbHl7Tz0hMX19fTtcbnZhciBWPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1LKXtFKFYpO3ZhciBiPWEtUCtTO2I8UyYmUjxTPyg4PmImJihiPTgpLFM9YjxSP1I6Yik6Uj1iO1A9YStTO0x8fChMPSEwLFUucG9zdE1lc3NhZ2Uodm9pZCAwKSl9ZWxzZSBOPSExfTtyPWZ1bmN0aW9uKGEsYil7Sz1hO009YjtPfHwwPmI/VS5wb3N0TWVzc2FnZSh2b2lkIDApOk58fChOPSEwLEUoVikpfTtxPWZ1bmN0aW9uKCl7Sz1udWxsO0w9ITE7TT0tMX19ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7XG5leHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBkPWgsZT1rO2g9YTtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtoPWQsaz1lLHYoKX19O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7dmFyIGQ9LTEhPT1rP2s6ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iJiZcIm51bWJlclwiPT09dHlwZW9mIGIudGltZW91dCliPWQrYi50aW1lb3V0O2Vsc2Ugc3dpdGNoKGgpe2Nhc2UgMTpiPWQrLTE7YnJlYWs7Y2FzZSAyOmI9ZCsyNTA7YnJlYWs7Y2FzZSA1OmI9ZCsxMDczNzQxODIzO2JyZWFrO2Nhc2UgNDpiPWQrMUU0O2JyZWFrO2RlZmF1bHQ6Yj1kKzVFM31hPXtjYWxsYmFjazphLHByaW9yaXR5TGV2ZWw6aCxleHBpcmF0aW9uVGltZTpiLG5leHQ6bnVsbCxwcmV2aW91czpudWxsfTtpZihudWxsPT09YyljPWEubmV4dD1hLnByZXZpb3VzPWEscCgpO2Vsc2V7ZD1udWxsO3ZhciBlPWM7ZG97aWYoZS5leHBpcmF0aW9uVGltZT5iKXtkPWU7YnJlYWt9ZT1lLm5leHR9d2hpbGUoZSE9PWMpO251bGw9PT1kP2Q9YzpkPT09YyYmKGM9YSxwKCkpO1xuYj1kLnByZXZpb3VzO2IubmV4dD1kLnByZXZpb3VzPWE7YS5uZXh0PWQ7YS5wcmV2aW91cz1ifXJldHVybiBhfTtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPWEubmV4dDtpZihudWxsIT09Yil7aWYoYj09PWEpYz1udWxsO2Vsc2V7YT09PWMmJihjPWIpO3ZhciBkPWEucHJldmlvdXM7ZC5uZXh0PWI7Yi5wcmV2aW91cz1kfWEubmV4dD1hLnByZXZpb3VzPW51bGx9fTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1oO3JldHVybiBmdW5jdGlvbigpe3ZhciBkPWgsZT1rO2g9YjtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e2g9ZCxrPWUsdigpfX19O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gaH07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIWYmJihudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxsfHx3KCkpfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7bnVsbCE9PWMmJnAoKX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBjfTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW1cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGVtcHR5RnVuY3Rpb247XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJpbXBvcnQgeyBjcmVhdGVTdG9yZSwgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHRodW5rIGZyb20gJ3JlZHV4LXRodW5rJztcbmltcG9ydCBjcmVhdGVSZWR1Y2VyIGZyb20gJy4vcmVkdWNlcnMnO1xuXG5jb25zdCBjb21wb3NlRW5oYW5jZXJzID1cbiAgdHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiZcbiAgKHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX19cbiAgICA/IHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX19cbiAgICA6IGNvbXBvc2UpO1xuXG4gIFxuXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJlU3RvcmUoKSB7XG4gIGNvbnN0IG1pZGRsZXdhcmVzID0gW3RodW5rXTtcbiAgY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICAgIFxuICAgIHVzZXI6IHt9LC8vIHN0b3JlIHVzZXIgaW5mbyBpZiBoZSBpcyBsb2dpbmdcbiAgICBcbiAgICBtb3ZpZXM6IFtdLy8gc3RvcmUgbGlzdCBvZiBtb3ZpZXMgZm9yIGxvZ2luZyB1c2VyXG4gIH07XG4gIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoXG4gICAgY3JlYXRlUmVkdWNlcixcbiAgICBpbml0aWFsU3RhdGUsXG4gICAgY29tcG9zZUVuaGFuY2VycyhhcHBseU1pZGRsZXdhcmUoLi4ubWlkZGxld2FyZXMpKVxuICApO1xuICByZXR1cm4gc3RvcmU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbmZpZ3VyZVN0b3JlOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmZ1bmN0aW9uIGNyZWF0ZVRodW5rTWlkZGxld2FyZShleHRyYUFyZ3VtZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2gsXG4gICAgICAgIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIHRodW5rID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKCk7XG50aHVuay53aXRoRXh0cmFBcmd1bWVudCA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gdGh1bms7IiwiaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSAncmVkdXgnO1xuXG5pbXBvcnQgdXNlciBmcm9tIFwiLi9yZWR1Y2Vycy91c2VyXCI7XG5pbXBvcnQgbW92aWVzIGZyb20gXCIuL3JlZHVjZXJzL21vdmllc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb21iaW5lUmVkdWNlcnMoe1xuICB1c2VyLFxuICBtb3ZpZXNcbn0pOyIsImltcG9ydCBjb25zdGFudHMgZnJvbSAnLi4vY29uc3RhbnRzL2NvbnN0YW50cydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlcihzdGF0ZSA9IHt9LCBhY3Rpb24gPSB7fSkge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG5cdCAgY2FzZSBjb25zdGFudHMuVVNFUl9MT0dHRURfSU46XG4gICAgICAvLyBzdGF0ZS50b2tlbiA9IGFjdGlvbi51c2VyLmlzTG9nZWQ7XG4gICAgICByZXR1cm4gey4uLmFjdGlvbi51c2VyfTtcbiAgICBjYXNlIGNvbnN0YW50cy5VU0VSX0xPR0dFRF9PVVQ6XG4gICAgICByZXR1cm4ge307XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuIiwiaW1wb3J0IGNvbnN0YW50cyBmcm9tICcuLi9jb25zdGFudHMvY29uc3RhbnRzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtb3ZpZXMoc3RhdGUgPSBudWxsLCBhY3Rpb24pIHtcbiAgICBcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIFxuICAgICAgICBjYXNlIGNvbnN0YW50cy5NT1ZJRVNfRkVUQ0hFRDoge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gIGFjdGlvbi5tb3ZpZXM7XG5cdFx0fVxuXHRcdGNhc2UgY29uc3RhbnRzLk1PVklFX0NSRUFURUQ6IHtcbiAgICAgICAgICAgIHJldHVybiBbLi4uc3RhdGUsIGFjdGlvbi5tb3ZpZV07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBjb25zdGFudHMuQ0xFQVJfQUxMX01PVklFUzoge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gW107XG5cdFx0fVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlIFxuICAgIH1cbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBSb3V0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgSG9tZVBhZ2UgZnJvbSBcIi4vY29tcG9uZW50cy9wYWdlcy9Ib21lUGFnZVwiO1xuaW1wb3J0IExvZ2luUGFnZSBmcm9tIFwiLi9jb21wb25lbnRzL3BhZ2VzL0xvZ2luUGFnZVwiO1xuaW1wb3J0IERhc2hib2FyZFBhZ2UgZnJvbSBcIi4vY29tcG9uZW50cy9wYWdlcy9EYXNoYm9hcmRQYWdlXCI7XG5pbXBvcnQgU2lnbnVwUGFnZSBmcm9tIFwiLi9jb21wb25lbnRzL3BhZ2VzL1NpZ251cFBhZ2VcIjtcbmltcG9ydCBOZXdNb3ZpZVBhZ2UgZnJvbSBcIi4vY29tcG9uZW50cy9wYWdlcy9OZXdNb3ZpZVBhZ2VcIjtcbmltcG9ydCBVc2VyUm91dGUgZnJvbSBcIi4vY29tcG9uZW50cy9yb3V0ZXMvVXNlclJvdXRlXCI7XG5pbXBvcnQgR3Vlc3RSb3V0ZSBmcm9tIFwiLi9jb21wb25lbnRzL3JvdXRlcy9HdWVzdFJvdXRlXCI7XG5pbXBvcnQgVG9wTmF2QmFyIGZyb20gXCIuL2NvbXBvbmVudHMvbmF2aWdhdGlvbi9Ub3BOYXZCYXJcIjtcbiAgXG5jb25zdCBBcHAgPSAoeyBsb2NhdGlvbiwgaXNBdXRoZW50aWNhdGVkIH0pID0+IChcbiAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cbiAgICBcbiAgICB7aXNBdXRoZW50aWNhdGVkICYmIDxUb3BOYXZCYXIgbG9jYXRpb249e2xvY2F0aW9ufS8+fVxuICAgIDxSb3V0ZSBsb2NhdGlvbj17bG9jYXRpb259IHBhdGg9XCIvXCIgZXhhY3QgY29tcG9uZW50PXtIb21lUGFnZX0gLz5cbiAgICBcbiAgICA8R3Vlc3RSb3V0ZSBsb2NhdGlvbj17bG9jYXRpb259IHBhdGg9XCIvbG9naW5cIiBleGFjdCBjb21wb25lbnQ9e0xvZ2luUGFnZX0gLz5cblxuICAgIDxHdWVzdFJvdXRlIGxvY2F0aW9uPXtsb2NhdGlvbn0gcGF0aD1cIi9zaWdudXBcIiBleGFjdCBjb21wb25lbnQ9e1NpZ251cFBhZ2V9IC8+XG4gICBcbiAgICA8VXNlclJvdXRlXG4gICAgICBsb2NhdGlvbj17bG9jYXRpb259XG4gICAgICBwYXRoPVwiL2Rhc2hib2FyZFwiXG4gICAgICBleGFjdFxuICAgICAgY29tcG9uZW50PXtEYXNoYm9hcmRQYWdlfVxuICAgIC8+XG4gICAgPFVzZXJSb3V0ZVxuICAgICAgbG9jYXRpb249e2xvY2F0aW9ufVxuICAgICAgcGF0aD1cIi9kYXNoYm9hcmQvYWRkXCJcbiAgICAgIGV4YWN0XG4gICAgICBjb21wb25lbnQ9e05ld01vdmllUGFnZX1cbiAgICAvPlxuICA8L2Rpdj5cbik7XG5cbkFwcC5wcm9wVHlwZXMgPSB7XG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHBhdGhuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZCxcbiAgaXNBdXRoZW50aWNhdGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkXG59O1xuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcbiAgcmV0dXJuIHtcbiAgICBpc0F1dGhlbnRpY2F0ZWQ6ISFzdGF0ZS51c2VyLmVtYWlsXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShBcHApO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tIFwiLi4vLi4vYWN0aW9ucy9hdXRoXCI7XG5cbmNvbnN0IEhvbWVQYWdlID0gKHsgaXNBdXRoZW50aWNhdGVkLCBsb2dvdXQgfSkgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT1cInN0YXJ0LXBhZ2Ugcm93IGp1c3RpZnktY29udGVudC1tZC1jZW50ZXJcIj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cInN0eWxlZC1mb3JtLWJsb2NrIGNvbC1zbS02IG10LTMgdGV4dC1jZW50ZXJcIj5cbiAgICAgIHtcbiAgICAgICAgaXNBdXRoZW50aWNhdGVkID8gPGgzIGNsYXNzTmFtZT1cIm1iLTNcIj5IZXJlIHlvdSBjYW4gZ28gYXdheSgoPC9oMz4gXG4gICAgICAgIDogXG4gICAgICAgIDxoMyBjbGFzc05hbWU9XCJtYi0zXCI+TGV0J3MgZ28hISE8L2gzPlxuICAgICAgfVxuICAgICAgXG4gICAgICB7aXNBdXRoZW50aWNhdGVkID8gKCBcbiAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLWJsb2NrIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLW1kIG10LTNcIiBvbkNsaWNrPXsoKSA9PiBsb2dvdXQoKX0+TG9nb3V0PC9idXR0b24+XG4gICAgICApIDogKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxMaW5rIGNsYXNzTmFtZT1cImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IGJ0bi1tZCBidG4tYmxvY2sgXCIgdG89XCIvbG9naW5cIj5Mb2dpbjwvTGluaz5cbiAgICAgICAgICBvciBcbiAgICAgICAgICA8TGluayBjbGFzc05hbWU9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tbWQgYnRuLWJsb2NrIFwiIHRvPVwiL3NpZ251cFwiPlNpZ24gVXA8L0xpbms+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4pO1xuXG5Ib21lUGFnZS5wcm9wVHlwZXMgPSB7XG4gIGlzQXV0aGVudGljYXRlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgbG9nb3V0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59O1xuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcbiAgcmV0dXJuIHtcbiAgICBpc0F1dGhlbnRpY2F0ZWQ6ICEhc3RhdGUudXNlci5lbWFpbFxuICB9O1xufVxuLy8gZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKEhvbWVQYWdlKTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIHsgbG9nb3V0OiBhY3Rpb25zLmxvZ291dCB9KShIb21lUGFnZSk7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKHV0aWxzLm1lcmdlKGRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKGlzQnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikgfHwgISFvYmouX2lzQnVmZmVyKVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi8uLi9kZWZhdWx0cycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gdXRpbHMubWVyZ2Uoe1xuICAgICAgdXJsOiBhcmd1bWVudHNbMF1cbiAgICB9LCBhcmd1bWVudHNbMV0pO1xuICB9XG5cbiAgY29uZmlnID0gdXRpbHMubWVyZ2UoZGVmYXVsdHMsIHRoaXMuZGVmYXVsdHMsIHsgbWV0aG9kOiAnZ2V0JyB9LCBjb25maWcpO1xuICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuXG4gIC8vIFN1cHBvcnQgYmFzZVVSTCBjb25maWdcbiAgaWYgKGNvbmZpZy5iYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKGNvbmZpZy51cmwpKSB7XG4gICAgY29uZmlnLnVybCA9IGNvbWJpbmVVUkxzKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICAvLyBOb3RlOiBzdGF0dXMgaXMgbm90IGV4cG9zZWQgYnkgWERvbWFpblJlcXVlc3RcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9XG5cbiAgICAgIGlmICghdXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgdmFyIG9yaWdpblVSTDtcblxuICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICByZXR1cm4ge1xuICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGJ0b2EgcG9seWZpbGwgZm9yIElFPDEwIGNvdXJ0ZXN5IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXZpZGNoYW1iZXJzL0Jhc2U2NC5qc1xuXG52YXIgY2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xuXG5mdW5jdGlvbiBFKCkge1xuICB0aGlzLm1lc3NhZ2UgPSAnU3RyaW5nIGNvbnRhaW5zIGFuIGludmFsaWQgY2hhcmFjdGVyJztcbn1cbkUucHJvdG90eXBlID0gbmV3IEVycm9yO1xuRS5wcm90b3R5cGUuY29kZSA9IDU7XG5FLnByb3RvdHlwZS5uYW1lID0gJ0ludmFsaWRDaGFyYWN0ZXJFcnJvcic7XG5cbmZ1bmN0aW9uIGJ0b2EoaW5wdXQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhpbnB1dCk7XG4gIHZhciBvdXRwdXQgPSAnJztcbiAgZm9yIChcbiAgICAvLyBpbml0aWFsaXplIHJlc3VsdCBhbmQgY291bnRlclxuICAgIHZhciBibG9jaywgY2hhckNvZGUsIGlkeCA9IDAsIG1hcCA9IGNoYXJzO1xuICAgIC8vIGlmIHRoZSBuZXh0IHN0ciBpbmRleCBkb2VzIG5vdCBleGlzdDpcbiAgICAvLyAgIGNoYW5nZSB0aGUgbWFwcGluZyB0YWJsZSB0byBcIj1cIlxuICAgIC8vICAgY2hlY2sgaWYgZCBoYXMgbm8gZnJhY3Rpb25hbCBkaWdpdHNcbiAgICBzdHIuY2hhckF0KGlkeCB8IDApIHx8IChtYXAgPSAnPScsIGlkeCAlIDEpO1xuICAgIC8vIFwiOCAtIGlkeCAlIDEgKiA4XCIgZ2VuZXJhdGVzIHRoZSBzZXF1ZW5jZSAyLCA0LCA2LCA4XG4gICAgb3V0cHV0ICs9IG1hcC5jaGFyQXQoNjMgJiBibG9jayA+PiA4IC0gaWR4ICUgMSAqIDgpXG4gICkge1xuICAgIGNoYXJDb2RlID0gc3RyLmNoYXJDb2RlQXQoaWR4ICs9IDMgLyA0KTtcbiAgICBpZiAoY2hhckNvZGUgPiAweEZGKSB7XG4gICAgICB0aHJvdyBuZXcgRSgpO1xuICAgIH1cbiAgICBibG9jayA9IGJsb2NrIDw8IDggfCBjaGFyQ29kZTtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ0b2E7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgfVxuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IExvZ2luRm9ybSBmcm9tIFwiLi4vZm9ybXMvTG9naW5Gb3JtXCI7XG5pbXBvcnQgeyBsb2dpbiB9IGZyb20gXCIuLi8uLi9hY3Rpb25zL2F1dGhcIjtcblxuY2xhc3MgTG9naW5QYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN1Ym1pdCA9IHRoaXMuc3VibWl0LmJpbmQodGhpcyk7XG4gIH1cblxuICBzdWJtaXQgKGRhdGEpIHtcbiAgICB0aGlzLnByb3BzLmxvZ2luKGRhdGEpXG4gICAgICAvLyAudGhlbigoKSA9PiB0aGlzLnByb3BzLmhpc3RvcnkucHVzaChcIi9kYXNoYm9hcmRcIikpXG4gICAgICA7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93IGp1c3RpZnktY29udGVudC1tZC1jZW50ZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdHlsZWQtZm9ybS1ibG9jayBjb2wtc20tNiBtdC0zIHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGgzIGNsYXNzTmFtZT1cIm1iLTNcIj5Mb2dpbjwvaDM+XG5cbiAgICAgICAgICA8TG9naW5Gb3JtIHN1Ym1pdD17dGhpcy5zdWJtaXR9IC8+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTNcIj4gXG4gICAgICAgICAgICBOZXcgdXNlcj8gPExpbmsgdG89XCIvc2lnbnVwXCI+U2lnbnVwITwvTGluaz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbkxvZ2luUGFnZS5wcm9wVHlwZXMgPSB7XG4gIC8vIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gIC8vICAgcHVzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAvLyB9KS5pc1JlcXVpcmVkLFxuICBsb2dpbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChudWxsLCB7IGxvZ2luIH0pKExvZ2luUGFnZSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgRXJyb3JNc2cgZnJvbSBcIi4uL21lc3NhZ2VzL0Vycm9yTXNnXCI7XG5cblxuY2xhc3MgTG9naW5Gb3JtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZGF0YToge1xuICAgICAgICBlbWFpbDogXCJcIixcbiAgICAgICAgcGFzc3dvcmQ6IFwiXCJcbiAgICAgIH0sXG4gICAgICBlcnJvcnM6IHt9XG4gICAgfTtcblxuICAgIHRoaXMub25TdWJtaXQgPSB0aGlzLm9uU3VibWl0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgXG4gIH1cbiAgXG4gIG9uQ2hhbmdlKGUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZGF0YTogeyAuLi50aGlzLnN0YXRlLmRhdGEsIFtlLnRhcmdldC5uYW1lXTogZS50YXJnZXQudmFsdWUgfVxuICAgICAgfSk7XG4gIH1cblxuICBvblN1Ym1pdChlKSB7XG4gICAgICBcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgZXJyb3JzID0gdGhpcy52YWxpZGF0ZSh0aGlzLnN0YXRlLmRhdGEpO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBlcnJvcnMgfSk7XG4gICAgaWYgKE9iamVjdC5rZXlzKGVycm9ycykubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogdHJ1ZSB9KTtcbiAgICAgIHRoaXMucHJvcHNcbiAgICAgICAgLnN1Ym1pdCh0aGlzLnN0YXRlLmRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkYXRlKGRhdGEpIHtcbiAgICBjb25zdCBlcnJvcnMgPSB7fTtcbiAgICBpZiAoZGF0YS5lbWFpbC5pbmRleE9mKCdAJykgPT0gLTEpIGVycm9ycy5lbWFpbCA9IFwiSW52YWxpZCBlbWFpbFwiO1xuICAgIGlmICghZGF0YS5wYXNzd29yZCAmJiAhZGF0YS5yZXBlYXRfcGFzc3dvcmQgKSBlcnJvcnMuYmxhbmtfcGFzc3dvcmQgPSBcIlBhc3N3b3JkcyBjYW4ndCBiZSBibGFua1wiO1xuICAgIHJldHVybiBlcnJvcnM7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3JzIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIFxuICAgICAgPGZvcm0gb25TdWJtaXQ9eyB0aGlzLm9uU3VibWl0IH0+XG5cdFx0XHRcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwIHRleHQtbGVmdFwiPlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiZW1haWxcIj5FbWFpbCBhZGRyZXNzPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgXG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX0gXG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiIFxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgXG4gICAgICAgICAgICBpZD1cImVtYWlsXCIgXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIGVtYWlsXCJcbiAgICAgICAgICAgIG5hbWU9XCJlbWFpbFwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICB7IGVycm9ycy5lbWFpbCAmJiA8RXJyb3JNc2cgdGV4dD17IGVycm9ycy5lbWFpbCB9IC8+IH1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cCAgdGV4dC1sZWZ0XCI+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJwYXNzd29yZFwiPlBhc3N3b3JkPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgXG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX0gXG4gICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIiBcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIFxuICAgICAgICAgICAgaWQ9XCJwYXNzd29yZFwiIFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJQYXNzd29yZFwiXG4gICAgICAgICAgICBuYW1lPVwicGFzc3dvcmRcIlxuICAgICAgICAgIC8+XG4gICAgICAgICAgeyBlcnJvcnMuYmxhbmtfcGFzc3dvcmQgJiYgPEVycm9yTXNnIHRleHQ9eyBlcnJvcnMuYmxhbmtfcGFzc3dvcmQgfSAvPiB9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3NOYW1lPVwiYnRuIGJ0bi1ibG9jayBidG4tcHJpbWFyeSBidG4tbWQgbXQtM1wiPkxvZ2luPC9idXR0b24+XG4gICAgICA8L2Zvcm0+XG5cbiAgICApO1xuICB9XG59XG5cbkxvZ2luRm9ybS5wcm9wVHlwZXMgPSB7XG4gIHN1Ym1pdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTG9naW5Gb3JtO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuXG5pbXBvcnQgeyBOYXZMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCJ2YWxpZGF0b3IvbGliL2NvbnRhaW5zXCI7XG5cbmltcG9ydCBTZWFyY2hNb3ZpZXNJbnB1dCBmcm9tIFwiLi4vZm9ybXMvU2VhcmNoTW92aWVzSW5wdXRcIjtcblxuaW1wb3J0IHsgZmV0Y2hNb3ZpZXMsIGNsZWFyTGlzdCB9IGZyb20gXCIuLi8uLi9hY3Rpb25zL21vdmllc1wiO1xuaW1wb3J0IHsgZGltIH0gZnJvbSBcImFuc2ktY29sb3JzXCI7XG5cbmNsYXNzIERhc2hib2FyZFBhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzU3RhcnRTZWFyY2g6ICcnXG4gICAgfVxuXG4gICAgdGhpcy5vbkluaXQgPSB0aGlzLm9uSW5pdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2xlYXJMaXN0ID0gdGhpcy5jbGVhckxpc3QuYmluZCh0aGlzKTtcbiAgICB0aGlzLnN0YXJ0U2VhcmNoID0gdGhpcy5zdGFydFNlYXJjaC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5vbkluaXQodGhpcy5wcm9wcyk7XG4gIH0gXG5cbiAgb25Jbml0IChwcm9wcykge1xuICAgIHByb3BzLmZldGNoTW92aWVzKCBwcm9wcy51c2VyRW1haWwgKTtcbiAgfSBcbiAgLy8gc2VhcmNoIGJ5IHRpdGxlIG1vdmllc1xuICBzdGFydFNlYXJjaCggdmFsVGV4dCApIHtcbiAgICB0aGlzLnNldFN0YXRlKHtpc1N0YXJ0U2VhcmNoOiB2YWxUZXh0LnRvTG93ZXJDYXNlKCl9KVxuICB9XG5cbiAgY2xlYXJMaXN0KCkge1xuICAgIHRoaXMucHJvcHMuY2xlYXJMaXN0KCB0aGlzLnByb3BzLnVzZXJFbWFpbCApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCBtb3ZpZXMgPSB0aGlzLnByb3BzLm1vdmllcztcbiAgICBjb25zdCBpc1N0YXJ0U2VhcmNoID0gdGhpcy5zdGF0ZS5pc1N0YXJ0U2VhcmNoO1xuICAgIGlmICggaXNTdGFydFNlYXJjaCAhPSAnJyApIHtcbiAgICAgIG1vdmllcyA9IG1vdmllcy5maWx0ZXIoKCBtb3ZpZSApID0+IHtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5zKG1vdmllLnRpdGxlLnRvTG93ZXJDYXNlKCksIHRoaXMuc3RhdGUuaXNTdGFydFNlYXJjaClcbiAgICAgIH0pXG4gICAgfVxuXG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cbiAgICAgICAgXG5cbiAgICAgICAge21vdmllcy5sZW5ndGggPT09IDAgJiYgaXNTdGFydFNlYXJjaCA9PSAnJyA/IChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5vLXJlc3VsdC1ibG9ja1wiPiBcbiAgICAgICAgICAgIDxoMz5Zb3UgaGF2ZW4ndCBhbnkgZmF2b3JpdGUgbW92aWVzITwvaDM+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKSA6IDxoMiBjbGFzc05hbWU9XCJtYi0zXCI+WW91ciBmYXZvcml0ZSBtb3ZpZXMgbGlzdCE8L2gyPn0gXG5cbiAgICAgICAgICA8aHIvPlxuICAgICAgICBcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhY3Rpb25zLWRhc2hib2FyZCByb3dcIj5cbiAgICAgICAgICBcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC02XCI+XG4gICAgICAgICAgICA8TmF2TGluayBjbGFzc05hbWU9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc20gbXQtMSBtci0zXCIgdG89XCIvZGFzaGJvYXJkL2FkZFwiPiBBZGQgbmV3IG1vdmllIDwvTmF2TGluaz5cbiAgICAgICAgICBcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbW92aWVzLmxlbmd0aCA+IDAgJiYgKFxuICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc20gbXQtMVwiIG9uQ2xpY2s9eyB0aGlzLmNsZWFyTGlzdCB9IHR5cGU9XCJidXR0b25cIj5DbGVhciBsaXN0PC9idXR0b24+XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTZcIj5cbiAgICAgICAgICAgIDxTZWFyY2hNb3ZpZXNJbnB1dCBzdGFydFNlYXJjaD17IHRoaXMuc3RhcnRTZWFyY2ggfS8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIHtcbiAgICAgICAgICBpc1N0YXJ0U2VhcmNoICYmICFtb3ZpZXMubGVuZ3RoICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5vLXJlc3VsdC1ibG9ja1wiPiBcbiAgICAgICAgICAgICAgICAgIDxoMz5UaGVyZSBhcmUgbm8gcmVzdWx0IGZvciBzaG93aW5nPC9oMz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuXG4gICAgICAgXG5cbiAgICAgICAge1xuICAgICAgICAgIG1vdmllcy5sZW5ndGggPiAwICYmIChcbiAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJ0YWJsZSB0YWJsZS1zbSBtdC0zXCI+XG4gICAgICAgICAgICAgIDx0aGVhZD5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB7IFxuICAgICAgICAgICAgICAgICAgbW92aWVzLm1hcCgobW92aWUsIGtleSk9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgga2V5ID09IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBrZXk9e2tleX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhtb3ZpZSkubWFwKChpdGVtLCBrZXkpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPHRoIHNjb3BlPVwiY29sXCIga2V5PXsga2V5IH0+IHsgaXRlbSB9PC90aD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICA8L3RoZWFkPlxuICAgICAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICAgICAgeyBcbiAgICAgICAgICAgICAgICAgIG1vdmllcy5tYXAoKG1vdmllLCBrZXkpPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgIDx0ciBrZXk9eyBrZXkgfSBjbGFzc05hbWU9XCJtb3ZpZS1pdGVtXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKG1vdmllKS5tYXAoKGl0ZW0sIGtleSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPHRkIGtleT17IGtleSB9IGNsYXNzTmFtZT17IGtleSB9PiB7IG1vdmllW2l0ZW1dID8gbW92aWVbaXRlbV0gOiAnLScgfTwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICB7LyogPHVsIGNsYXNzTmFtZT1cIm1vdmllcy1saXN0XCI+XG4gICAgICAgICAgeyBcbiAgICAgICAgICAgIG1vdmllcy5tYXAoKG1vdmllLCBrZXkpPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxsaSBrZXk9eyBrZXkgfSBjbGFzc05hbWU9XCJtb3ZpZS1pdGVtXCI+XG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKG1vdmllKS5tYXAoKGl0ZW0sIGtleSk9PntcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPHNwYW4ga2V5PXsga2V5IH0gY2xhc3NOYW1lPXsga2V5IH0+IHsgbW92aWVbaXRlbV0gfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgIDwvdWw+ICovfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5EYXNoYm9hcmRQYWdlLnByb3BUeXBlcyA9IHtcbiAgdXNlckVtYWlsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGZldGNoTW92aWVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBjbGVhckxpc3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG1vdmllczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWRcbn07XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICByZXR1cm4ge1xuICAgIHVzZXJFbWFpbDogc3RhdGUudXNlci5lbWFpbCxcbiAgICBtb3ZpZXM6IHN0YXRlLm1vdmllc1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgeyBmZXRjaE1vdmllcywgY2xlYXJMaXN0IH0pKERhc2hib2FyZFBhZ2UpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY29udGFpbnM7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gcmVxdWlyZSgnLi91dGlsL2Fzc2VydFN0cmluZycpO1xuXG52YXIgX2Fzc2VydFN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NlcnRTdHJpbmcpO1xuXG52YXIgX3RvU3RyaW5nID0gcmVxdWlyZSgnLi91dGlsL3RvU3RyaW5nJyk7XG5cbnZhciBfdG9TdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9TdHJpbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBjb250YWlucyhzdHIsIGVsZW0pIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcyLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBzdHIuaW5kZXhPZigoMCwgX3RvU3RyaW5nMi5kZWZhdWx0KShlbGVtKSkgPj0gMDtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnRzLmRlZmF1bHQgPSB0b1N0cmluZztcbmZ1bmN0aW9uIHRvU3RyaW5nKGlucHV0KSB7XG4gIGlmICgodHlwZW9mIGlucHV0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihpbnB1dCkpID09PSAnb2JqZWN0JyAmJiBpbnB1dCAhPT0gbnVsbCkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQudG9TdHJpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlucHV0ID0gaW5wdXQudG9TdHJpbmcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQgPSAnW29iamVjdCBPYmplY3RdJztcbiAgICB9XG4gIH0gZWxzZSBpZiAoaW5wdXQgPT09IG51bGwgfHwgdHlwZW9mIGlucHV0ID09PSAndW5kZWZpbmVkJyB8fCBpc05hTihpbnB1dCkgJiYgIWlucHV0Lmxlbmd0aCkge1xuICAgIGlucHV0ID0gJyc7XG4gIH1cbiAgcmV0dXJuIFN0cmluZyhpbnB1dCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5cbmNsYXNzIFNlYXJjaE1vdmllc0lucHV0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICBzZWFyY2hUZXh0OiBcIlwiXG4gICAgfTtcblxuICAgIHRoaXMub25DaGFuZ2UgPSB0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcyk7XG4gIFxuICB9XG4gIFxuICBvbkNoYW5nZShlKSB7XG5cdHRoaXMuc2V0U3RhdGUoeyBzZWFyY2hUZXh0OiBlLnRhcmdldC52YWx1ZSB9LCAoKSA9PiB7XG5cdFx0dGhpcy5wcm9wcy5zdGFydFNlYXJjaCggdGhpcy5zdGF0ZS5zZWFyY2hUZXh0ICk7XG5cdH0pXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIFxuXHRcdDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXAgcHVsbC1yaWdodCBpbnB1dC1ncm91cC1zbVwiPlxuXHRcdFx0PGlucHV0IFxuXHRcdFx0XHRvbkNoYW5nZT17IHRoaXMub25DaGFuZ2UgfSBcblx0XHRcdFx0dHlwZT1cInRleHRcIiBcblx0XHRcdFx0Y2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgXG5cdFx0XHRcdHBsYWNlaG9sZGVyPVwiU2VhcmNoIGJ5IG1vdmllJ3MgdGl0bGVcIiBcblx0XHRcdFx0bmFtZT1cInNlYXJjaFRleHRcIiAvPlxuXHRcdDwvZGl2PlxuXG4gICAgKTtcbiAgfVxufVxuXG5TZWFyY2hNb3ZpZXNJbnB1dC5wcm9wVHlwZXMgPSB7XG5cdHN0YXJ0U2VhcmNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hNb3ZpZXNJbnB1dDtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29sb3JzID0geyBlbmFibGVkOiB0cnVlLCB2aXNpYmxlOiB0cnVlLCBzdHlsZXM6IHt9LCBrZXlzOiB7fSB9O1xuXG5pZiAoJ0ZPUkNFX0NPTE9SJyBpbiBwcm9jZXNzLmVudikge1xuICBjb2xvcnMuZW5hYmxlZCA9IHByb2Nlc3MuZW52LkZPUkNFX0NPTE9SICE9PSAnMCc7XG59XG5cbmNvbnN0IGFuc2kgPSBzdHlsZSA9PiB7XG4gIHN0eWxlLm9wZW4gPSBgXFx1MDAxYlske3N0eWxlLmNvZGVzWzBdfW1gO1xuICBzdHlsZS5jbG9zZSA9IGBcXHUwMDFiWyR7c3R5bGUuY29kZXNbMV19bWA7XG4gIHN0eWxlLnJlZ2V4ID0gbmV3IFJlZ0V4cChgXFxcXHUwMDFiXFxcXFske3N0eWxlLmNvZGVzWzFdfW1gLCAnZycpO1xuICByZXR1cm4gc3R5bGU7XG59O1xuXG5jb25zdCB3cmFwID0gKHN0eWxlLCBzdHIsIG5sKSA9PiB7XG4gIGxldCB7IG9wZW4sIGNsb3NlLCByZWdleCB9ID0gc3R5bGU7XG4gIHN0ciA9IG9wZW4gKyAoc3RyLmluY2x1ZGVzKGNsb3NlKSA/IHN0ci5yZXBsYWNlKHJlZ2V4LCBjbG9zZSArIG9wZW4pIDogc3RyKSArIGNsb3NlO1xuICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYWxrL2NoYWxrL3B1bGwvOTIsIHRoYW5rcyB0byB0aGVcbiAgLy8gY2hhbGsgY29udHJpYnV0b3JzIGZvciB0aGlzIGZpeC4gSG93ZXZlciwgd2UndmUgY29uZmlybWVkIHRoYXRcbiAgLy8gdGhpcyBpc3N1ZSBpcyBhbHNvIHByZXNlbnQgaW4gV2luZG93cyB0ZXJtaW5hbHNcbiAgcmV0dXJuIG5sID8gc3RyLnJlcGxhY2UoL1xccj9cXG4vZywgYCR7Y2xvc2V9JCYke29wZW59YCkgOiBzdHI7XG59O1xuXG5jb25zdCBzdHlsZSA9IChpbnB1dCwgc3RhY2spID0+IHtcbiAgaWYgKGlucHV0ID09PSAnJyB8fCBpbnB1dCA9PSBudWxsKSByZXR1cm4gJyc7XG4gIGlmIChjb2xvcnMuZW5hYmxlZCA9PT0gZmFsc2UpIHJldHVybiBpbnB1dDtcbiAgaWYgKGNvbG9ycy52aXNpYmxlID09PSBmYWxzZSkgcmV0dXJuICcnO1xuICBsZXQgc3RyID0gJycgKyBpbnB1dDtcbiAgbGV0IG5sID0gc3RyLmluY2x1ZGVzKCdcXG4nKTtcbiAgbGV0IG4gPSBzdGFjay5sZW5ndGg7XG4gIHdoaWxlIChuLS0gPiAwKSBzdHIgPSB3cmFwKGNvbG9ycy5zdHlsZXNbc3RhY2tbbl1dLCBzdHIsIG5sKTtcbiAgcmV0dXJuIHN0cjtcbn07XG5cbmNvbnN0IGRlZmluZSA9IChuYW1lLCBjb2RlcywgdHlwZSkgPT4ge1xuICBjb2xvcnMuc3R5bGVzW25hbWVdID0gYW5zaSh7IG5hbWUsIGNvZGVzIH0pO1xuICBsZXQgdCA9IGNvbG9ycy5rZXlzW3R5cGVdIHx8IChjb2xvcnMua2V5c1t0eXBlXSA9IFtdKTtcbiAgdC5wdXNoKG5hbWUpO1xuXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoY29sb3JzLCBuYW1lLCB7XG4gICAgZ2V0KCkge1xuICAgICAgbGV0IGNvbG9yID0gaW5wdXQgPT4gc3R5bGUoaW5wdXQsIGNvbG9yLnN0YWNrKTtcbiAgICAgIFJlZmxlY3Quc2V0UHJvdG90eXBlT2YoY29sb3IsIGNvbG9ycyk7XG4gICAgICBjb2xvci5zdGFjayA9IHRoaXMuc3RhY2sgPyB0aGlzLnN0YWNrLmNvbmNhdChuYW1lKSA6IFtuYW1lXTtcbiAgICAgIHJldHVybiBjb2xvcjtcbiAgICB9XG4gIH0pO1xufTtcblxuZGVmaW5lKCdyZXNldCcsIFswLCAwXSwgJ21vZGlmaWVyJyk7XG5kZWZpbmUoJ2JvbGQnLCBbMSwgMjJdLCAnbW9kaWZpZXInKTtcbmRlZmluZSgnZGltJywgWzIsIDIyXSwgJ21vZGlmaWVyJyk7XG5kZWZpbmUoJ2l0YWxpYycsIFszLCAyM10sICdtb2RpZmllcicpO1xuZGVmaW5lKCd1bmRlcmxpbmUnLCBbNCwgMjRdLCAnbW9kaWZpZXInKTtcbmRlZmluZSgnaW52ZXJzZScsIFs3LCAyN10sICdtb2RpZmllcicpO1xuZGVmaW5lKCdoaWRkZW4nLCBbOCwgMjhdLCAnbW9kaWZpZXInKTtcbmRlZmluZSgnc3RyaWtldGhyb3VnaCcsIFs5LCAyOV0sICdtb2RpZmllcicpO1xuXG5kZWZpbmUoJ2JsYWNrJywgWzMwLCAzOV0sICdjb2xvcicpO1xuZGVmaW5lKCdyZWQnLCBbMzEsIDM5XSwgJ2NvbG9yJyk7XG5kZWZpbmUoJ2dyZWVuJywgWzMyLCAzOV0sICdjb2xvcicpO1xuZGVmaW5lKCd5ZWxsb3cnLCBbMzMsIDM5XSwgJ2NvbG9yJyk7XG5kZWZpbmUoJ2JsdWUnLCBbMzQsIDM5XSwgJ2NvbG9yJyk7XG5kZWZpbmUoJ21hZ2VudGEnLCBbMzUsIDM5XSwgJ2NvbG9yJyk7XG5kZWZpbmUoJ2N5YW4nLCBbMzYsIDM5XSwgJ2NvbG9yJyk7XG5kZWZpbmUoJ3doaXRlJywgWzM3LCAzOV0sICdjb2xvcicpO1xuZGVmaW5lKCdncmF5JywgWzkwLCAzOV0sICdjb2xvcicpO1xuZGVmaW5lKCdncmV5JywgWzkwLCAzOV0sICdjb2xvcicpO1xuXG5kZWZpbmUoJ2JnQmxhY2snLCBbNDAsIDQ5XSwgJ2JnJyk7XG5kZWZpbmUoJ2JnUmVkJywgWzQxLCA0OV0sICdiZycpO1xuZGVmaW5lKCdiZ0dyZWVuJywgWzQyLCA0OV0sICdiZycpO1xuZGVmaW5lKCdiZ1llbGxvdycsIFs0MywgNDldLCAnYmcnKTtcbmRlZmluZSgnYmdCbHVlJywgWzQ0LCA0OV0sICdiZycpO1xuZGVmaW5lKCdiZ01hZ2VudGEnLCBbNDUsIDQ5XSwgJ2JnJyk7XG5kZWZpbmUoJ2JnQ3lhbicsIFs0NiwgNDldLCAnYmcnKTtcbmRlZmluZSgnYmdXaGl0ZScsIFs0NywgNDldLCAnYmcnKTtcblxuZGVmaW5lKCdibGFja0JyaWdodCcsIFs5MCwgMzldLCAnYnJpZ2h0Jyk7XG5kZWZpbmUoJ3JlZEJyaWdodCcsIFs5MSwgMzldLCAnYnJpZ2h0Jyk7XG5kZWZpbmUoJ2dyZWVuQnJpZ2h0JywgWzkyLCAzOV0sICdicmlnaHQnKTtcbmRlZmluZSgneWVsbG93QnJpZ2h0JywgWzkzLCAzOV0sICdicmlnaHQnKTtcbmRlZmluZSgnYmx1ZUJyaWdodCcsIFs5NCwgMzldLCAnYnJpZ2h0Jyk7XG5kZWZpbmUoJ21hZ2VudGFCcmlnaHQnLCBbOTUsIDM5XSwgJ2JyaWdodCcpO1xuZGVmaW5lKCdjeWFuQnJpZ2h0JywgWzk2LCAzOV0sICdicmlnaHQnKTtcbmRlZmluZSgnd2hpdGVCcmlnaHQnLCBbOTcsIDM5XSwgJ2JyaWdodCcpO1xuXG5kZWZpbmUoJ2JnQmxhY2tCcmlnaHQnLCBbMTAwLCA0OV0sICdiZ0JyaWdodCcpO1xuZGVmaW5lKCdiZ1JlZEJyaWdodCcsIFsxMDEsIDQ5XSwgJ2JnQnJpZ2h0Jyk7XG5kZWZpbmUoJ2JnR3JlZW5CcmlnaHQnLCBbMTAyLCA0OV0sICdiZ0JyaWdodCcpO1xuZGVmaW5lKCdiZ1llbGxvd0JyaWdodCcsIFsxMDMsIDQ5XSwgJ2JnQnJpZ2h0Jyk7XG5kZWZpbmUoJ2JnQmx1ZUJyaWdodCcsIFsxMDQsIDQ5XSwgJ2JnQnJpZ2h0Jyk7XG5kZWZpbmUoJ2JnTWFnZW50YUJyaWdodCcsIFsxMDUsIDQ5XSwgJ2JnQnJpZ2h0Jyk7XG5kZWZpbmUoJ2JnQ3lhbkJyaWdodCcsIFsxMDYsIDQ5XSwgJ2JnQnJpZ2h0Jyk7XG5kZWZpbmUoJ2JnV2hpdGVCcmlnaHQnLCBbMTA3LCA0OV0sICdiZ0JyaWdodCcpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb250cm9sLXJlZ2V4ICovXG5jb25zdCByZSA9IGNvbG9ycy5hbnNpUmVnZXggPSAvXFx1MDAxYlxcW1xcZCttL2dtO1xuY29sb3JzLmhhc0NvbG9yID0gY29sb3JzLmhhc0Fuc2kgPSBzdHIgPT4ge1xuICByZS5sYXN0SW5kZXggPSAwO1xuICByZXR1cm4gISFzdHIgJiYgdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgJiYgcmUudGVzdChzdHIpO1xufTtcblxuY29sb3JzLnVuc3R5bGUgPSBzdHIgPT4ge1xuICByZS5sYXN0SW5kZXggPSAwO1xuICByZXR1cm4gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgPyBzdHIucmVwbGFjZShyZSwgJycpIDogc3RyO1xufTtcblxuY29sb3JzLm5vbmUgPSBjb2xvcnMuY2xlYXIgPSBjb2xvcnMubm9vcCA9IHN0ciA9PiBzdHI7IC8vIG5vLW9wLCBmb3IgcHJvZ3JhbW1hdGljIHVzYWdlXG5jb2xvcnMuc3RyaXBDb2xvciA9IGNvbG9ycy51bnN0eWxlO1xuY29sb3JzLnN5bWJvbHMgPSByZXF1aXJlKCcuL3N5bWJvbHMnKTtcbmNvbG9ycy5kZWZpbmUgPSBkZWZpbmU7XG5tb2R1bGUuZXhwb3J0cyA9IGNvbG9ycztcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgaXNXaW5kb3dzID0gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJztcbmNvbnN0IGlzTGludXggPSBwcm9jZXNzLnBsYXRmb3JtID09PSAnbGludXgnO1xuXG5jb25zdCB3aW5kb3dzID0ge1xuICBidWxsZXQ6ICfigKInLFxuICBjaGVjazogJ+KImicsXG4gIGNyb3NzOiAnw5cnLFxuICBlbGxpcHNpczogJy4uLicsXG4gIGhlYXJ0OiAn4p2kJyxcbiAgaW5mbzogJ2knLFxuICBsaW5lOiAn4pSAJyxcbiAgbWlkZG90OiAnwrcnLFxuICBtaW51czogJ++8jScsXG4gIHBsdXM6ICfvvIsnLFxuICBxdWVzdGlvbjogJz8nLFxuICBxdWVzdGlvblNtYWxsOiAn77mWJyxcbiAgcG9pbnRlcjogJz4nLFxuICBwb2ludGVyU21hbGw6ICfCuycsXG4gIHdhcm5pbmc6ICfigLwnXG59O1xuXG5jb25zdCBvdGhlciA9IHtcbiAgYmFsbG90Q3Jvc3M6ICfinJgnLFxuICBidWxsZXQ6ICfigKInLFxuICBjaGVjazogJ+KclCcsXG4gIGNyb3NzOiAn4pyWJyxcbiAgZWxsaXBzaXM6ICfigKYnLFxuICBoZWFydDogJ+KdpCcsXG4gIGluZm86ICfihLknLFxuICBsaW5lOiAn4pSAJyxcbiAgbWlkZG90OiAnwrcnLFxuICBtaW51czogJ++8jScsXG4gIHBsdXM6ICfvvIsnLFxuICBxdWVzdGlvbjogJz8nLFxuICBxdWVzdGlvbkZ1bGw6ICfvvJ8nLFxuICBxdWVzdGlvblNtYWxsOiAn77mWJyxcbiAgcG9pbnRlcjogaXNMaW51eCA/ICfilrgnIDogJ+KdrycsXG4gIHBvaW50ZXJTbWFsbDogaXNMaW51eCA/ICfigKMnIDogJ+KAuicsXG4gIHdhcm5pbmc6ICfimqAnXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzV2luZG93cyA/IHdpbmRvd3MgOiBvdGhlcjtcblJlZmxlY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICd3aW5kb3dzJywgeyBlbnVtZXJhYmxlOiBmYWxzZSwgdmFsdWU6IHdpbmRvd3MgfSk7XG5SZWZsZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnb3RoZXInLCB7IGVudW1lcmFibGU6IGZhbHNlLCB2YWx1ZTogb3RoZXIgfSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCBTaWdudXBGb3JtIGZyb20gXCIuLi9mb3Jtcy9TaWdudXBGb3JtXCI7XG5pbXBvcnQgeyBzaWdudXAgfSBmcm9tIFwiLi4vLi4vYWN0aW9ucy9hdXRoXCI7XG5cbmNsYXNzIFNpZ251cFBhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3VibWl0ID0gdGhpcy5zdWJtaXQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHN1Ym1pdCAoZGF0YSkge1xuICAgIHRoaXMucHJvcHMuc2lnbnVwKGRhdGEpXG4gICAgICAvLyAudGhlbigoKSA9PiB0aGlzLnByb3BzLmhpc3RvcnkucHVzaChcIi9kYXNoYm9hcmRcIikpXG4gICAgICA7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93IGp1c3RpZnktY29udGVudC1tZC1jZW50ZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdHlsZWQtZm9ybS1ibG9jayBjb2wtc20tNiBtdC0zIHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGgzIGNsYXNzTmFtZT1cIm1iLTNcIj5TaWdudXA8L2gzPlxuXG4gICAgICAgICAgPFNpZ251cEZvcm0gc3VibWl0PXt0aGlzLnN1Ym1pdH0gLz5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtM1wiPiBcbiAgICAgICAgICAgIEFscmVhZHkgc2lnbnVwIGdvIHRvIDxMaW5rIHRvPVwiL2xvZ2luXCI+TG9naW4gcGFnZSE8L0xpbms+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5TaWdudXBQYWdlLnByb3BUeXBlcyA9IHtcbiAgLy8gaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgLy8gICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIC8vIH0pLmlzUmVxdWlyZWQsXG4gIHNpZ251cDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChudWxsLCB7IHNpZ251cCB9KShTaWdudXBQYWdlKTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBFcnJvck1zZyBmcm9tIFwiLi4vbWVzc2FnZXMvRXJyb3JNc2dcIjtcblxuY2xhc3MgU2lnbnVwRm9ybSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZW1haWw6IFwiXCIsXG5cdFx0cGFzc3dvcmQ6IFwiXCIsXG5cdFx0cmVwZWF0X3Bhc3N3b3JkOiBcIlwiXG4gICAgICB9LFxuICAgIC8vICAgbG9hZGluZzogZmFsc2UsXG4gICAgICBlcnJvcnM6IHt9XG4gICAgfTtcblxuICAgIHRoaXMub25TdWJtaXQgPSB0aGlzLm9uU3VibWl0LmJpbmQodGhpcyk7XG5cdHRoaXMub25DaGFuZ2UgPSB0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcyk7XG4gIH1cbiAgXG5cbiAgb25DaGFuZ2UoZSkge1xuXHQgIHRoaXMuc2V0U3RhdGUoe1xuXHRcdCAgZGF0YTogeyAuLi50aGlzLnN0YXRlLmRhdGEsIFtlLnRhcmdldC5uYW1lXTogZS50YXJnZXQudmFsdWUgfVxuXHRcdH0pO1xuXHR9XG5cbiAgb25TdWJtaXQoZSkge1xuXHRlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgZXJyb3JzID0gdGhpcy52YWxpZGF0ZSh0aGlzLnN0YXRlLmRhdGEpO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBlcnJvcnMgfSk7XG4gICAgaWYgKE9iamVjdC5rZXlzKGVycm9ycykubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogdHJ1ZSB9KTtcbiAgICAgIHRoaXMucHJvcHNcbiAgICAgICAgLnN1Ym1pdCh0aGlzLnN0YXRlLmRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkYXRlKGRhdGEpIHtcbiAgICBjb25zdCBlcnJvcnMgPSB7fTtcbiAgICBpZiAoZGF0YS5lbWFpbC5pbmRleE9mKCdAJykgPT0gLTEpIGVycm9ycy5lbWFpbCA9IFwiSW52YWxpZCBlbWFpbFwiO1xuXHRpZiAoIWRhdGEucGFzc3dvcmQgJiYgIWRhdGEucmVwZWF0X3Bhc3N3b3JkICkgZXJyb3JzLmJsYW5rX3Bhc3N3b3JkID0gXCJQYXNzd29yZHMgY2FuJ3QgYmUgYmxhbmtcIjtcblx0aWYgKGRhdGEucGFzc3dvcmQgIT0gZGF0YS5yZXBlYXRfcGFzc3dvcmQgKSBlcnJvcnMudW5tYXRjaF9wYXNzd29yZCA9IFwiUGFzc3dvcmRzIGRvbid0IG1hdGNoXCI7XG4gICAgcmV0dXJuIGVycm9ycztcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvcnMsIGxvYWRpbmcgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuXHRcdDxmb3JtIG9uU3VibWl0PXsgdGhpcy5vblN1Ym1pdCB9PlxuXHRcdFx0XG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXAgdGV4dC1sZWZ0XCI+XG5cdFx0XHRcdDxsYWJlbCBodG1sRm9yPVwiZW1haWxcIj5FbWFpbCBhZGRyZXNzPC9sYWJlbD5cblx0XHRcdFx0PGlucHV0IFxuXHRcdFx0XHRcdG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlfSBcblx0XHRcdFx0XHR0eXBlPVwidGV4dFwiIFxuXHRcdFx0XHRcdGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIFxuXHRcdFx0XHRcdGlkPVwiZW1haWxcIiBcblx0XHRcdFx0XHRwbGFjZWhvbGRlcj1cIkVudGVyIGVtYWlsXCJcblx0XHRcdFx0XHRuYW1lPVwiZW1haWxcIlxuXHRcdFx0XHQvPlxuXHRcdFx0XHR7IGVycm9ycy5lbWFpbCAmJiA8RXJyb3JNc2cgdGV4dD17IGVycm9ycy5lbWFpbCB9IC8+IH1cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwIHRleHQtbGVmdFwiPlxuXHRcdFx0XHQ8bGFiZWwgaHRtbEZvcj1cImZpcnN0X3Bhc3N3b3JkXCI+UGFzc3dvcmQ8L2xhYmVsPlxuXHRcdFx0XHQ8aW5wdXQgXG5cdFx0XHRcdFx0b25DaGFuZ2U9e3RoaXMub25DaGFuZ2V9IFxuXHRcdFx0XHRcdHR5cGU9XCJwYXNzd29yZFwiIFxuXHRcdFx0XHRcdGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIFxuXHRcdFx0XHRcdGlkPVwiZmlyc3RfcGFzc3dvcmRcIiBcblx0XHRcdFx0XHRwbGFjZWhvbGRlcj1cIlBhc3N3b3JkXCJcblx0XHRcdFx0XHRuYW1lPVwicGFzc3dvcmRcIlxuXHRcdFx0XHQvPlxuXHRcdFx0XHR7IGVycm9ycy5ibGFua19wYXNzd29yZCAmJiA8RXJyb3JNc2cgdGV4dD17IGVycm9ycy5ibGFua19wYXNzd29yZCB9IC8+IH1cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwIHRleHQtbGVmdFwiPlxuXHRcdFx0XHQ8bGFiZWwgaHRtbEZvcj1cInJlcGVhdF9wYXNzd29yZFwiPlBhc3N3b3JkPC9sYWJlbD5cblx0XHRcdFx0PGlucHV0IFxuXHRcdFx0XHRcdG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlfSBcblx0XHRcdFx0XHR0eXBlPVwicGFzc3dvcmRcIiBcblx0XHRcdFx0XHRjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiBcblx0XHRcdFx0XHRpZD1cInJlcGVhdF9wYXNzd29yZFwiIFxuXHRcdFx0XHRcdHBsYWNlaG9sZGVyPVwiUmVwZWF0IFBhc3N3b3JkXCJcblx0XHRcdFx0XHRuYW1lPVwicmVwZWF0X3Bhc3N3b3JkXCJcblx0XHRcdFx0Lz5cblx0XHRcdFx0eyBlcnJvcnMuYmxhbmtfcGFzc3dvcmQgJiYgPEVycm9yTXNnIHRleHQ9eyBlcnJvcnMuYmxhbmtfcGFzc3dvcmQgfSAvPiB9XG5cdFx0XHRcdHsgZXJyb3JzLnVubWF0Y2hfcGFzc3dvcmQgJiYgPEVycm9yTXNnIHRleHQ9eyBlcnJvcnMudW5tYXRjaF9wYXNzd29yZCB9IC8+IH1cblx0XHRcdDwvZGl2PlxuXHRcdFx0XG5cdFx0XHQ8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzc05hbWU9XCJidG4gYnRuLWJsb2NrIGJ0bi1wcmltYXJ5IGJ0bi1tZCBtdC0zXCI+U3VibWl0PC9idXR0b24+XG5cdFx0PC9mb3JtPlxuICAgICk7XG4gIH1cbn1cblxuU2lnbnVwRm9ybS5wcm9wVHlwZXMgPSB7XG4gIHN1Ym1pdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0IGRlZmF1bHQgU2lnbnVwRm9ybTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbi8vIGltcG9ydCB7IExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IEFkZE5ld01vdmllRm9ybSBmcm9tIFwiLi4vZm9ybXMvQWRkTmV3TW92aWVGb3JtXCI7XG5pbXBvcnQgeyBhZGROZXdNb3ZpZSB9IGZyb20gXCIuLi8uLi9hY3Rpb25zL21vdmllc1wiO1xuXG5jbGFzcyBOZXdNb3ZpZVBhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgc3VwZXIocHJvcHMpO1xuXHR0aGlzLnN1Ym1pdCA9IHRoaXMuc3VibWl0LmJpbmQodGhpcyk7XG5cdFxuXHRcbiAgfVxuXG4gIHN1Ym1pdCAoZGF0YSkge1xuXHRkYXRhLnVzZXJFbWFpbCA9IHRoaXMucHJvcHMudXNlckVtYWlsO1xuICAgIHRoaXMucHJvcHMuYWRkTmV3TW92aWUoZGF0YSlcbiAgICAgIC50aGVuKCgpID0+IHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKFwiL2Rhc2hib2FyZFwiKSlcbiAgICAgIDtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3cganVzdGlmeS1jb250ZW50LW1kLWNlbnRlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN0eWxlZC1mb3JtLWJsb2NrIGNvbC1zbS02IG10LTMgdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwibWItM1wiPkFkZCBuZXcgbW92aWU8L2gzPlxuXG4gICAgICAgICAgPEFkZE5ld01vdmllRm9ybSBzdWJtaXQ9e3RoaXMuc3VibWl0fSAvPlxuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5OZXdNb3ZpZVBhZ2UucHJvcFR5cGVzID0ge1xuICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZCxcbiAgdXNlckVtYWlsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGFkZE5ld01vdmllOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59O1xuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcblx0cmV0dXJuIHtcblx0ICB1c2VyRW1haWw6IHN0YXRlLnVzZXIuZW1haWxcblx0fTtcbiAgfVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgeyBhZGROZXdNb3ZpZSB9KShOZXdNb3ZpZVBhZ2UpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IGlzSW50IGZyb20gXCJ2YWxpZGF0b3IvbGliL2lzSW50XCI7XG5pbXBvcnQgaXNFbXB0eSBmcm9tIFwidmFsaWRhdG9yL2xpYi9pc0VtcHR5XCI7XG5cbmltcG9ydCBFcnJvck1zZyBmcm9tIFwiLi4vbWVzc2FnZXMvRXJyb3JNc2dcIjtcblxuY2xhc3MgQWRkTmV3TW92aWVGb3JtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZGF0YToge1xuICAgICAgICB0aXRsZTogXCJcIixcbiAgICAgICAgcmVsZWFzZTogXCJcIixcbiAgICAgICAgYnVkZ2V0OiBcIlwiLFxuICAgICAgfSxcbiAgICAgIGVycm9yczoge31cbiAgICB9O1xuXG4gICAgdGhpcy5vblN1Ym1pdCA9IHRoaXMub25TdWJtaXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQ2hhbmdlID0gdGhpcy5vbkNoYW5nZS5iaW5kKHRoaXMpO1xuICBcbiAgfVxuICBcbiAgb25DaGFuZ2UoZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBkYXRhOiB7IC4uLnRoaXMuc3RhdGUuZGF0YSwgW2UudGFyZ2V0Lm5hbWVdOiBlLnRhcmdldC52YWx1ZSB9XG4gICAgICB9KTtcbiAgfVxuXG4gIG9uU3VibWl0KGUpIHtcbiAgICAgIFxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBlcnJvcnMgPSB0aGlzLnZhbGlkYXRlKHRoaXMuc3RhdGUuZGF0YSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGVycm9ycyB9KTtcbiAgICBpZiAoT2JqZWN0LmtleXMoZXJyb3JzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMucHJvcHNcbiAgICAgICAgLnN1Ym1pdCh0aGlzLnN0YXRlLmRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkYXRlKGRhdGEpIHtcbiAgICBjb25zdCBlcnJvcnMgPSB7fTtcbiAgICBpZiAoIWRhdGEudGl0bGUgKSBlcnJvcnMudGl0bGUgPSBcIlRpdGxlIGNhbid0IGJlIGJsYW5rXCI7XG4gICAgaWYgKCFpc0ludChkYXRhLnJlbGVhc2UpICYmICFpc0VtcHR5KGRhdGEucmVsZWFzZSkgKSBlcnJvcnMucmVsZWFzZSA9IFwiUmVxdWlyZWQgb25seSBkaWdpdHNcIjtcblxuICAgIHJldHVybiBlcnJvcnM7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZXJyb3JzIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIFxuICAgICAgPGZvcm0gb25TdWJtaXQ9eyB0aGlzLm9uU3VibWl0IH0+XG5cdFx0XHRcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwIHRleHQtbGVmdFwiPlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwibW92aWVUaXRsZVwiPk1vdmllIFRpdGxlPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgXG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX0gXG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiIFxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgXG4gICAgICAgICAgICBpZD1cIm1vdmllVGl0bGVcIiBcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgdGl0bGVcIlxuICAgICAgICAgICAgbmFtZT1cInRpdGxlXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIHsgZXJyb3JzLnRpdGxlICYmIDxFcnJvck1zZyB0ZXh0PXsgZXJyb3JzLnRpdGxlIH0gLz4gfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwIHRleHQtbGVmdFwiPlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwibW92aWVSZWxlYXNlXCI+TW92aWUgUmVsZWFzZTwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2V9IFxuICAgICAgICAgICAgdHlwZT1cInRleHRcIiBcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIFxuICAgICAgICAgICAgaWQ9XCJtb3ZpZVJlbGVhc2VcIiBcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiTW92aWUgUmVsZWFzZVwiXG4gICAgICAgICAgICBuYW1lPVwicmVsZWFzZVwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICB7IGVycm9ycy5yZWxlYXNlICYmIDxFcnJvck1zZyB0ZXh0PXsgZXJyb3JzLnJlbGVhc2UgfSAvPiB9XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cCB0ZXh0LWxlZnRcIj5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cIm1vdmllQnVkZ2V0XCI+TW92aWUgQnVkZ2V0PC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgXG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX0gXG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiIFxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgXG4gICAgICAgICAgICBpZD1cIm1vdmllQnVkZ2V0XCIgXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIk1vdmllIEJ1ZGdldFwiXG4gICAgICAgICAgICBuYW1lPVwiYnVkZ2V0XCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIHsvKiB7IGVycm9ycy5ibGFua19wYXNzd29yZCAmJiA8RXJyb3JNc2cgdGV4dD17IGVycm9ycy5ibGFua19wYXNzd29yZCB9IC8+IH0gKi99XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3NOYW1lPVwiYnRuIGJ0bi1ibG9jayBidG4tcHJpbWFyeSBidG4tbWQgbXQtM1wiPkFkZCBuZXcgbW92aWU8L2J1dHRvbj5cbiAgICAgIDwvZm9ybT5cblxuICAgICk7XG4gIH1cbn1cblxuQWRkTmV3TW92aWVGb3JtLnByb3BUeXBlcyA9IHtcbiAgc3VibWl0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnQgZGVmYXVsdCBBZGROZXdNb3ZpZUZvcm07XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0ludDtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSByZXF1aXJlKCcuL3V0aWwvYXNzZXJ0U3RyaW5nJyk7XG5cbnZhciBfYXNzZXJ0U3RyaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Fzc2VydFN0cmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBpbnQgPSAvXig/OlstK10/KD86MHxbMS05XVswLTldKikpJC87XG52YXIgaW50TGVhZGluZ1plcm9lcyA9IC9eWy0rXT9bMC05XSskLztcblxuZnVuY3Rpb24gaXNJbnQoc3RyLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nMi5kZWZhdWx0KShzdHIpO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBHZXQgdGhlIHJlZ2V4IHRvIHVzZSBmb3IgdGVzdGluZywgYmFzZWQgb24gd2hldGhlclxuICAvLyBsZWFkaW5nIHplcm9lcyBhcmUgYWxsb3dlZCBvciBub3QuXG4gIHZhciByZWdleCA9IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2FsbG93X2xlYWRpbmdfemVyb2VzJykgJiYgIW9wdGlvbnMuYWxsb3dfbGVhZGluZ196ZXJvZXMgPyBpbnQgOiBpbnRMZWFkaW5nWmVyb2VzO1xuXG4gIC8vIENoZWNrIG1pbi9tYXgvbHQvZ3RcbiAgdmFyIG1pbkNoZWNrUGFzc2VkID0gIW9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ21pbicpIHx8IHN0ciA+PSBvcHRpb25zLm1pbjtcbiAgdmFyIG1heENoZWNrUGFzc2VkID0gIW9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ21heCcpIHx8IHN0ciA8PSBvcHRpb25zLm1heDtcbiAgdmFyIGx0Q2hlY2tQYXNzZWQgPSAhb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnbHQnKSB8fCBzdHIgPCBvcHRpb25zLmx0O1xuICB2YXIgZ3RDaGVja1Bhc3NlZCA9ICFvcHRpb25zLmhhc093blByb3BlcnR5KCdndCcpIHx8IHN0ciA+IG9wdGlvbnMuZ3Q7XG5cbiAgcmV0dXJuIHJlZ2V4LnRlc3Qoc3RyKSAmJiBtaW5DaGVja1Bhc3NlZCAmJiBtYXhDaGVja1Bhc3NlZCAmJiBsdENoZWNrUGFzc2VkICYmIGd0Q2hlY2tQYXNzZWQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0VtcHR5O1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IHJlcXVpcmUoJy4vdXRpbC9hc3NlcnRTdHJpbmcnKTtcblxudmFyIF9hc3NlcnRTdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXNzZXJ0U3RyaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gaXNFbXB0eShzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcyLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBzdHIubGVuZ3RoID09PSAwO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5cbmltcG9ydCB7IFJvdXRlLCBSZWRpcmVjdCB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cblxuY29uc3QgVXNlclJvdXRlID0gKHsgaXNBdXRoZW50aWNhdGVkLCBjb21wb25lbnQ6IENvbXBvbmVudCwgLi4ucmVzdCB9KSA9PiAoXG5cdFxuXHRcdDxSb3V0ZVxuXHRcdFx0ey4uLnJlc3R9XG5cdFx0XHRyZW5kZXI9e3Byb3BzID0+IFxuXHRcdFx0XHRcdGlzQXV0aGVudGljYXRlZCA/IChcblx0XHRcdFx0XHRcdDxDb21wb25lbnQgey4uLnByb3BzfS8+XG5cdFx0XHRcdFx0KSA6IChcblx0XHRcdFx0XHRcdDxSZWRpcmVjdCB0bz1cIi9cIiAvPlxuXHRcdFx0XHRcdClcblx0XHRcdH0vPlxuXHRcbilcblxuXG5Vc2VyUm91dGUucHJvcFR5cGVzID0ge1xuXHRpc0F1dGhlbnRpY2F0ZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cdGNvbXBvbmVudDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn1cblxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcblx0cmV0dXJuIHtcblx0ICBpc0F1dGhlbnRpY2F0ZWQ6ICEhc3RhdGUudXNlci5lbWFpbFxuXHR9O1xuICB9XG4gIFxuICBleHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoVXNlclJvdXRlKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBSb3V0ZSwgUmVkaXJlY3QgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5jb25zdCBHdWVzdFJvdXRlID0gKHsgaXNBdXRoZW50aWNhdGVkLCBjb21wb25lbnQ6IENvbXBvbmVudCwgLi4ucmVzdCB9KSA9PiAoXG4gIDxSb3V0ZVxuICAgIHsuLi5yZXN0fVxuICAgIHJlbmRlcj17cHJvcHMgPT5cbiAgICAgICFpc0F1dGhlbnRpY2F0ZWQgPyAoXG4gICAgICAgIDxDb21wb25lbnQgey4uLnByb3BzfSAvPlxuICAgICAgKSA6IChcbiAgICAgICAgPFJlZGlyZWN0IHRvPVwiL2Rhc2hib2FyZFwiIC8+XG4gICAgICApfVxuICAvPlxuKTtcblxuR3Vlc3RSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNBdXRoZW50aWNhdGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkXG59O1xuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcbiAgcmV0dXJuIHtcbiAgICBpc0F1dGhlbnRpY2F0ZWQ6ICEhc3RhdGUudXNlci5lbWFpbFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoR3Vlc3RSb3V0ZSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBOYXZMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IGxvZ291dCB9IGZyb20gJy4vLi4vLi4vYWN0aW9ucy9hdXRoJztcbiAgXG5jb25zdCBUb3BOYWJCYXIgPSAoeyBsb2NhdGlvbiwgbG9nb3V0LCB1c2VyIH0pID0+IChcbiAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiY29sIG10LTNcIj5cblx0XHR7XG5cdFx0XHRsb2NhdGlvbi5wYXRobmFtZSAhPSAnLycgJiYgKDxzcGFuPjxOYXZMaW5rIHRvPVwiL1wiPkdvIEhvbWU8L05hdkxpbms+PC9zcGFuPilcblx0XHR9XG5cdFxuXHRcdDxzcGFuIGNsYXNzTmFtZT1cImNvbC1zbS0zXCI+XG5cdFx0XHRcdHsgdXNlci5lbWFpbCB9XG5cdFx0PC9zcGFuPlxuXG5cdFx0e1xuXHRcdFx0bG9jYXRpb24ucGF0aG5hbWUgIT0gJy8nICYmICg8c3BhbiBjbGFzc05hbWU9XCJjb2wtc20tMyB0ZXh0LWNlbnRlclwiPjxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtIG10LTFcIiBvbkNsaWNrPXsgbG9nb3V0IH0+TG9nT3V0PC9idXR0b24+PC9zcGFuPilcblx0XHR9XG5cdFx0XG5cdFx0e1xuXHRcdFx0bG9jYXRpb24ucGF0aG5hbWUgIT0gJy9kYXNoYm9hcmQnICYmICg8c3BhbiBjbGFzc05hbWU9XCJjb2wtc20tM1wiPjxOYXZMaW5rIHRvPVwiL2Rhc2hib2FyZFwiPlNob3cgbW92aWVzIGxpc3Q8L05hdkxpbms+PC9zcGFuPilcblx0XHR9XG5cdFxuXHRcdDxoci8+XG4gIDwvc2VjdGlvbj5cbik7XG5cblRvcE5hYkJhci5wcm9wVHlwZXMgPSB7XG5cdGxvZ291dDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblx0dXNlcjogUHJvcFR5cGVzLnNoYXBlKHtcblx0XHRlbWFpbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG5cdCAgfSkuaXNSZXF1aXJlZCxcbn07XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICByZXR1cm4ge1xuXHR1c2VyOiBzdGF0ZS51c2VyXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCB7IGxvZ291dCB9KShUb3BOYWJCYXIpO1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vQXBwLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vQXBwLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0FwcC5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50byArIFwiIFwiICsgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=